
4.运行环境
  前端页面和服务端或者是客户端不一样的地方就是它需要随时去下载网页代码，下载完还要渲染，渲染的过程中还要执行js的一些运算，所以
  它的性能需要比较高的要求。首先要下载快，渲染快，js执行逻辑要比较合理。所以针对它要做一些优化。怎么
  让网页能更快一些。就是保证代码在浏览器中稳定且高效。首先是
  稳定，你不能乱了，你做了高效之后有什么安全问题，这个肯定不行。高效就是让它更快，下载的更快，渲染的更快以及执行的更快，这就是我们
  需要做的一个工作。这个也是比较重要的一部分。
    1.网页加载过程
      我们首先得知道网页是怎么加载的，才能把这个稳定且高效给做好。你连它的加载过程你都不知道，那你就不知道从何入手是不是。
    2.性能优化
      这其实不光是性能，还要有一个体验优化。性能优化有时候可能会表现的更倾向于说让这个事情做的更快一些，更高效一些。但是体验优化呢，
      有时候是让这个事情做的更顺畅一些，就是不卡顿，更顺畅一些。
    3.安全
      就是我们要知道一些在web前端在h5页面一些常见的安全攻击。然后我们要做一些常见的预防。当然安全这个问题肯定不仅仅是前端的一些问
      题。我们只需要做好我们自己的本职工作，至少我们能把这个前端的安全工作给它做好，至少把大家都知道的一些安全的问题给它预防掉。这
      是我们最基本的一个工作。
  1.页面加载过程
    题目:
      1.从输入url到渲染出页面的整个过程
        从下面这些方面去思考
        1.下载资源：各个资源类型，下载过程
        2.渲染页面：结合html css javascript 图片等
        考虑一下这个整个的页面是怎么被渲染出来的
      2.window.onload和DOMContentLoaded的区别
    知识点:
      1.加载资源的形式
        首先我们要知道它加载什么东西
        1.html代码
          最基本的访问页面需要html代码对吧
        2.媒体文件，如图片，视频等
          再一个页面中如果有图片有视频这样的媒体文件。我们需要加载一些文件，加载一些图片视频的媒体文件。所以我们
        3.javascript css
          然后呢就是js和css的这个代码
        一般情况下的页面就基本上三部分。
      2.加载资源的过程
        1.DNS解析：域名 -> IP地址
          我们输入url，第一步的时候它要进行dns解析，dns就是domin name server就是域名服务，域名服务解析，把域名变成ip地址。
          其实域名直接是ip地址也没问题，但由于ip地址很难记，还有就是ip地址在不同区域内，特别是大型网站，像百度，淘宝这种大型
          的网站，ip地址是不一样的，因为它们做了分区域的ip地址的一个均衡或者代理。所以说我们在访问域名的时候，这个域名解析这个
          服务它会根据地域去解析不同的域名，让你的网站会访问的更快一些。比如说你人在北京，你去访问广州的一个机器，ip地址肯定会
          慢对吧。你人在北京，你去访问一个昌平的一个机器，那肯定会快很多。所以基于这两点，我们肯定是要用域名而不是用ip地址。那
          用域名，你就必须用一个域名解析服务。为什么要用域名解析服务呢，我们的手机或电脑去访问一个域名的时候，它真正对应到的还
          是一个ip地址，还是一个ip地址的机器。所以说域名只是一个中间的，方便大家记住，方便统一使用的一个符号，它真正到网络中，
          它还是用ip地址做这个网络访问的。所以说第一步我们要把域名解析成ip地址。
        2.浏览器根据ip地址向服务器发起http请求
          浏览器向ip地址发送请求，其实浏览器只是一个发起方，它真正的核心模块还是操作系统的，操作系统里面有一些能发送网络服务的
          一些系统服务。浏览器调用这个操作系统的系统服务。然后操作系统去把这个事情发送。这里面我们说是http请求，其他它里面还涉
          及到一些http的一些连接，比如说我们常说的三次握手这些。这些有点概念化了。三次握手这个东西在我们实际的应用中，其实我们
          体会不到。我们能体会到的就是ip地址，http请求。我们前端常用的协议就是http协议。这是发起请求。
        3.发起请求后服务器接收请求并处理http请求，并返回给浏览器。返回的东西就是前面讲的加载的资源。看你请求的是什么东西，它就
          给你返回什么东西。
        大体过程就是这样的。
      3.渲染页面的过程
        1.如果我们请求的是一个页面的话，那肯定是返回html代码。然后网页根据html代码生成DOM Tree。
        2.根据css代码生成CSSOM，这个OM跟DOM的OM是一样的，就是object model对象模型。就是css对象模型。这个意思和html生成dom
          树是一样的，html是一个文本代码，浏览器解析完之后呢，它要生成一个结构化的树结构。那css它也是一个文本代码，然后它要生成
          一个css object model的一个可结构化的一个对象。从概念上理解它和dom树是一样的。遇到css的代码出现就会生成一个CSSOM。
        3.DOM Tree和CSSOM整合成一个Render Tree渲染树。为什么要这么做呢，因为只有dom树是没法渲染的。因为有些标签的css属性是
          在CSSOM里面的。DOM树是整个网页的结构框架。然后再在框架上放上一些样式。最终整合成一个框架和样式合并出来的一个结构。我
          们叫做Render Tree。这样的话就可以去渲染了。所谓Render Tree就是我们dom树里面挂了很多css的属性。它也是一个树结构。只
          不过每个节点它挂了一些css的属性。这样的话就可以渲染了。
        4.然后浏览器根据Render Tree渲染页面
          因为有了结构了也有了css属性了，就可以渲染页面了。
        5.如果入到<script>则暂停渲染，优先加载并执行js代码，完成之后再继续。
          我们之前讲js异步的时候说过，js的进程和渲染进程是共用一个线程的。为什么要共用一个线程呢，因为js有可能会改变dom的结构，
          还有可能会改变Render Tree这个结构。这也是为何建议把js放到body最后的原因所在。
        6.直至把Render Tree渲染完成。这个页面就渲染完成了。
        这就是整个的一个渲染过程。
      4.页面加载和渲染示例
        可以通过示例来分析一下加载和渲染过程
        1.示例1
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>Document</title>
            </head>
            <body>
              <p>test</p>
            </body>
          </html>
          我们根据加载过程把页面加载下来，然后根据html生成一个dom树，根据cssOM，然后最后生成render Tree去渲染。
        2.示例2
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>Document</title>
              <link rel="stylesheet" type="text/css" href="test.css">
            </head>
            <body>
              <p>test</p>
            </body>
          </html>
          我们页面加载完之后，我们要先把css代码加载完，因为它是在head里面，加载完之后我们css代码的这个cssOM就已经给它做出来了。
          出来之后我们再根据html这个结构渲染出dom树，然后两个整合成render tree，然后去把这个页面渲染出来。这个是有css的情况。
          思考题：
            1.为何建议把css放在head中
              根据浏览器的渲染过程。如果css放到dom结构下面，那么就会先生成dom树，因为它没有css的信息，所以它就照着默认标签的样式渲染
              到浏览器上，继续向下渲染发现有一个css，把这个css文件加载完成之后，生成一个CSSOM，然后又和当前的这个dom树做一个合并生成
              RenderTree，然后可能会再重新渲染。可能就会是一个重复的过程。有时候这个动作比较慢的话就可能会出现肉眼可见的样式变化的过
              程，感官上不好。所以即使网速很好，电脑也很好的时候，也不建议把css放到下面来写。因为这是一个不好的书写方式。我们之所以把
              css放到上面来写是建议想把css的规则把css的代码在dom树生成完成之前就给它加载完，就把这个css的规则放到这，然后当dom树生
              成完之后直接和所有的css整合生成一个渲染树，生成一个Render Tree，然后一步渲染完成。这样的话就不要再出现重复了。这样的话
              是我们期望的一个过程。所以说我们要把css放到head中。
        3.示例3
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>Document</title>
            </head>
            <body>
              <div id="container">default</div>
              <script src="index.js"></script>
              <p>test</p>
            </body>
          </html>
          根据我们的渲染过程，我们可以这样分析。拿到html之后，我们去分析html，然后生成一个dom树。然后根据dom树进行渲染。
          思考题：
            1.为何建议把js放到body最后
              如果没有放在最后，可能会出现本来渲染了一部分，然后突然卡住了去加载执行js了，然后有进行渲染后面的dom内容。所以说它就会导致
              一个页面渲染的过程比较长。本来我们期望的是这个页面一共的渲染时间是1s钟。我们期望在0.3s或0.5s钟之内让用户看到页面的所有内
              容。然后剩下的0.5s之内我们执行js代码，然后把这个页面渲染完成。这是我们期望的。我们不期望说这个页面渲染一共是1s钟。然后直
              到1s钟的最后一刻我们才让用户看到所有的内容。所以说我们要把js放到最后。就是说我们要把先能出来的东西全部都渲染出来，把html
              渲染完之后，然后在把script继续执行，到时候你该干什么干什么，反正我dom已经渲染完了，你愿意改的话你就改吧。这样是我们比较
              期望的一个结果。
        4.示例4
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="UTF-8">
              <title>Document</title>
            </head>
            <body>
              <p>test</p>
              <img src="test.png" />
              <p>test</p>
            </body>
          </html>
          生成dom树之后，依次渲染，发现img，我们就要去加载test.png这个文件。但这个过程不会停止渲染，它不像是一个js文件，它不
          像js代码，因为图片这个东西加载完之后直接插进去就行了，它不会改变其他的结果。只不过这个时候这个图片还没过来，所以说我们
          这个位置先空着，然后继续向下渲染，这个时候不会去阻塞这个渲染过程。等什么时候图片加载完，然后我们就把图片塞到这来。有可
          能图片会比较大，或者比较高，可能会把内容向下撑一下，这个就需要重排一下就可以了。
          这就是带img这个情况的一个用处。
            window.addEventListener('load', function () {
              // 网页全部资源加载完才会执行，包括图片，视频等
            })
            window.addEventListener('DOMContentLoaded', function () {
              // dom渲染完即可执行，此时图片，视频可能还没有加载完
            })
            所以说，如果是有图片的话，用DOMContentLoaded这个事件去监听网页加载完成，这样的话就会更快一些。它就不用等到图片加
            载完，因为我们基本上所有的操作都是对dom的操作，图片是不是加载完对我们的一些js的代码中操作的时候可能不是那么的重要。
            所以我们在一般的情况下，像jquery这种代码它都是要监听DOMContentLoaded这个事件来去做一些处理的。只要是监听到这个
            事件，它就认为这个网页它已经加载完了。它不会等到图片加载完再执行，所以说用这个比用load这个事件更加靠谱。
      