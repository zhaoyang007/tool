重学前端
  1.开篇词|从今天起，重新理解前端
    1.你好，我是 winter。接下来的 3 个月里，我将带你重新认识前端。
    2.前端发展史：从青铜到黄金时代
      1.我自己是在 2006 年开始接触前端的。现在回想起来，那会儿前端还处于史前的“青铜时代”，甚至网页的主要交互都还是依靠切换超链接
        来完成的。
    3. 1. 前端的史前记忆：“青铜时代”
      1.那时候，谷歌刚刚基于 Ajax 发布的 Gmail 也没多久，虽然这项伟大的技术标志着 Web 1.0（静态网页）到 Web 2.0（动态网页）
        的迈进，但在国内依然少有人懂，如果当时谁可以对这项技术侃侃而谈，那简直就是大神的级别了。
      2.当时我还是个学生，喜欢前端纯粹是兴趣使然。那时我混黑白棋社区，想着给黑白棋界面写插件，但自己又不懂界面相关的知识，于是开始
        通过各种方式学习前端。
      3.真想学的时候才发现网络上的前端资料很是稀缺，所以我基本上都是先从图书馆借书，然后再在电脑上跑案例验证这样的方式来学习的，现
        在想起来，还真是一段艰难的岁月。
      4.当然，这段经历也为我日后的前端生涯悄悄埋下了一颗种子，我逐渐开始把自己的职业规划路线放在了前端上。
      5.这在当时是个不可思议的想法，因为那时的前端岗位不论从收入上还是在职责上，都远落后于其他岗位。但是，我基于对技术发展趋势的判
        断，认为前端在未来会越来越重要。
    4. 2. 进入发展期的前端：“白银时代”
      1.2008 年，我毕业了，也很幸运地得到了一个既能发挥我的 C++ 长处，又能兼顾前端发展规划的职位：微软北京的软件开发工程师，恰好
        负责的是 Windows CE 上的 IE 浏览器开发，在这里，我接触到了当时最先进的软件工程体系，并且积累了很多 UI 架构经验。
      2.两年后，我加入了盛大做电子书，负责电子书的文本排版工作，这个工作是一个既写底层又写 JavaScript 的岗位，同时排版引擎也是浏
        览器的重要组成部分，也让我对浏览器的工作原理有了更深入的理解。
      3.在盛大后期，我加入了 WebOS 项目，负责前端框架，我开始基于移动的角度思考前端交互和框架，这份工作让我离前端又近了一步。
      4.但是很遗憾，因为种种原因，我在微软和盛大的几个项目都不算成功，除了电子书实际上市但销量不高，Windows CE 7.0 和盛大的 
        WebOS 都在公司内部夭折。
      5.自己亲手构建的产品，却因为非技术原因没有服务到最终用户，对我来说，是件非常遗憾的事情。不过，这段时间，也让我更加确信前端技
        术的价值。
      6.回过来看，那几年，前端技术开始了它的大踏步发展，那一段时间，可以说是前端的“白银时代”。最直观的表现之一就是前端逐步从后端分
        离了出来，它的代码也变得复杂了起来，还需要保存数据、处理数据、生成视图等等。
      7.悄然之间，我发现前端已经从零散的“工序”逐步发展成为有体系和发展目标的职能，同时，在越来越大的前端团队中，工程化的思想也逐渐
        萌芽。我深有感触，前端已经不再是别人眼中的“小菜一碟”了。
    5. 3. 从前端到“全端”：“黄金时代”
      1.在这样的行业背景里，从盛大离职后，我加入了阿里巴巴做手机淘宝开发，这也是我首次从事真正的前端工作。
      2.在手机淘宝，前端团队的各种基础设施也逐渐建立了起来，从最开始的多屏适配方案、基础库、工具链到页面搭建平台和性能体系，最后到
        客户端融合方案 Weex，我随着团队一起经历了业务发展、团队自身成长和行业变革。
      3.与此同时，在我加入阿里巴巴后的这段时间里，随着移动时代的到来，前端也开启了自己的“黄金时代”，它的职责变得更加重要，有了独立
        的发布权限，技术也变得更加复杂。
      4.一些传统软件开发和互联网服务端的方法论逐步移植到前端开发中，并形成了前端自己的工程体系，诸如持续集成、前后端分离、线上监控……
      5.架构方面，前端架构的任务也从简单的解决兼容和风格问题，逐步过渡到提倡组件化和 UI 架构模式，最后形成了新一代的前端框架 
        React、Vue 和 Angular，他们也在竞争和互相学习中成长。
    6.前端开发之痛：散点自学 + 基础不牢
      1.正当处于“黄金时代”的前端技术在全力以赴极速前行之时，我却发现，前端开发者们的步伐似乎渐渐有些跟不上了。
      2.因为在我职业发展的后半段，面试和培养前端工程师已经成为我的长期工作职责。在这期间，我意识到，目前的前端教育几乎是完全缺失的。
      3.在面试应届生过程中，我会习惯性地问表现比较好的同学“你是如何学习前端的”，而我得到的答案多是“自学”“在社团学习”，却从未听到
        过“在学校学习过”这样的答案。
      4.而对于工作之后的前端开发者来说，没有系统学习的问题仍然存在，常常有一些具有多年从业经验的工程师，仍然会在看到一些用法时惊呼：
        “还可以这样！”
      5.在我看来，这些用法都是一些基础的不能再基础的知识点，但是他们却浑然不知。
      6.如果深入进去了解，你会发现，表面上看他们可能是一时忘记了，或者之前没注意，但实际上是他们对于前端的知识体系和底层原理没有真
        正系统地理解。
      7.在阿里工作的时候，我戏称很多同学学前端的方式是“土法学前端”，他们对于知识的理解基本都停留在点上，从来没有大范围把这些点串成
        线，形成自己的知识体系，因此才会出现上面说的遗漏和盲点。
      8.这个问题在一些一直在小公司工作的前端工程师身上非常突出。
      9.经常能看到一些案例，一些有技术追求、有热情的工程师，因为技术敏感度和主观能动性都不错，所以工作了五六年之后，逐步开始在自己
        的公司做一些技术管理相关的事情了。
      10.但是，由于他们所在公司的业务并不复杂，也没有技术积累，所以他们自身的技术水平其实并不高，可以说还处于非常初级的阶段（可能
        面试连阿里 P6 都过不了）。
      11.做了管理，技术没跟上，并且还错过了最佳的学习时间，这个境遇可想而知，他们在工作中大概率只能是被动地接受需求解决问题，然后
        也同时焦虑着自己的未来，焦虑着自己的竞争力。
      12.关于前端工程师成长，我认为需要两个视角。一是立足标准，系统性总结和整理前端知识，建立自己的认知和方法论；二是放眼团队，从
        业务和工程角度思考前端团队的价值和发展需要。只有这样做，才能够持续发展，在高速发展的技术和工程浪潮中稳稳立足。
      13.这也正是“重学前端”这个专栏的初衷，我希望提供一些视角，带你以完备、体系化的方式理解和思考前端的基础知识和工程实践。
      14.除此之外，前端工程师也是开发工程师的一员，除了前端自身的领域知识和工程特点外，你还需要了解程序员通用的编程能力和架构能力。
      15.所以，想要成为优秀的前端工程师，我觉得你需要通过系统地学习和总结获取知识，通过练习获取编程能力，通过工作经验来获取架构和
        工程能力。
      16.当然，一个为期 3 个月的专栏无法穷尽前端庞杂的知识，讲知识点也不是我们的目标。知识点讲的再好再全，也不一定能记得住。
      17.我们专栏的目标是帮助你建立自己的知识体系，根据你自己的理解把前端的领域知识链接起来，形成结构，这样做，不但能帮助你记忆知
        识，还能在其中发现自己知识的缺失，甚至可以凭借知识体系来判断知识的重要性，来决定是否要深入学习。
      18.在这个专栏里，我将知识分成了四个模块来讲解：
        JavaScript；
        CSS 和 HTML；
        浏览器实践；
        前端综合应用。
      19.前三个模块是前端的基础知识，是个人的前端能力提升，而模块四则是前端团队发展相关的内容，有助于你和团队的整体提高。
      20.在 JavaScript 部分中，我主要会从文法和运行时的角度去讨论 JavaScript 语言。它们是互相关联的，而语义就是文法到运行时之
        间的桥梁；它们分别又是完备的，任何语言特性都离不开两者，所以从语法和运行时的角度，我们都可以了解完整的 JavaScript。
      21.CSS 和 HTML 部分，会侧重从语言和设计思想的角度来讲解，我们同样可以对两者的全貌建立一些认知。
      22.浏览器部分，包含了浏览器工作的原理和一些重要的 API，包括 BOM、DOM、CSSOM 和其他一些内容。了解了这些知识，你才能把 
        JavaScript 和 HTML、CSS 连接起来，用 JavaScript 来实现功能。
      23.前端综合应用部分，主要是我的一些工作经验，我会选择我在手淘和淘宝工作中的一些案例来辅助讲解。
      24.前面，我说到前端是一个非常年轻的职业，但我仍然认为前端具有很多空间和机会，一些基础设施仍然简陋，前端的能力可以带来更多的
        业务场景，这些有待于我们去发掘。
      25.前端社区非常活跃，新技术也在不断出现。在这样的环境下，机会和竞争并存，学习也犹如逆水行舟，不进则退，建立自己的知识体系和
        方法论，你才能够保持领先优势。
      26.我希望从我的经验出发，给你一些启发和帮助，并借由这个专栏帮你建立自己的前端知识体系。同时，我也相信，在你们中间一定会产生 
        更多能够带领前端领域取得突破的、优秀的前端工程师。
      27.最后，也希望你能和我分享你的前端故事和经历，你是怎么走上前端道路的？你希望将来成为怎样的前端工程师？欢迎在留言区与我分享。
  2.明确你的前端学习线路与方法
    1.你好，我是 winter。今天我们一起来聊聊前端的学习路线与方法。
    2.在“开篇词”中，我和你简单回顾了前端行业的发展，到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我
      发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践
      和工作中零散的学习。
    3.这样的现状就引发了一系列的问题。
    4.首先是前端的基础知识，常常有一些工作多年的工程师，在看到一些我认为很基础的 JavaScript 语法的时候，还会惊呼“居然可以这样”。
      是的，基础知识的欠缺会让你束手束脚，更限制你解决问题的思路。
    5.其次，技术上存在短板，就会导致前端开发者的上升通道不甚顺畅。特别是一些小公司的程序员，只能靠自己摸索，这样就很容易陷入重复性
      劳动的陷阱，最终耽误自己的职业发展。
    6.除此之外，前端工程师也会面临技术发展问题带来的挑战。前端社区高度活跃，前端标准也在快速更新，这样蓬勃发展对技术来说无疑是好事，
      但是副作用也显而易见，它使得前端工程师的学习压力变得很大。
    7.我们就拿 JavaScript 标准来说，ES6 中引入的新特性超过了过去十年的总和，新特性带来的实践就更多了，仅仅是一个 Proxy 特性的
      引入，就支持了 VueJS 从 2.0 到 3.0 的内核原理完全升级。
    8.缺少系统教育 + 技术快速革新，在这样的大环境下，前端工程师保持自学能力就显得尤其重要了。
    9.那么，前端究竟应该怎么学呢？我想，我可以简单分享一下自己的经验。
    10.学习路径与学习方法
      1.首先是 0 基础入门的同学，你可以读几本经典的前端教材，比如《JavaScript 高级程序设计》《精通 CSS》等书籍，去阅读一些参考
        性质的网站也是不错的选项，比如MDN。
      2.如果你至少已经有了 1 年以上的工作经验，希望在技术上有一定突破，那么，这个专栏就可以是你技术进阶的一个选项了。
      3.在这个专栏中，我希望传达的不仅仅是具体的知识点，还有体系架构和学习方法。我希望达到三个目标：
        带你摸索出适合自己的前端学习方法；
        帮助你建立起前端技术的知识架构；
        让你理解前端技术背后的核心思想。
      4.在开始具体的知识讲解之前，这篇文章中，我想先来谈两个前端学习方法。
    11.第一个方法：建立知识架构
      1.第一个方法是建立自己的知识架构，并且在这个架构上，不断地进行优化。
      2.我们先来讲讲什么叫做知识架构？我们可以把它理解为知识的“目录”或者索引，它能够帮助我们把零散的知识组织起来，也能够帮助我们发
        现一些知识上的盲区。
      3.当然，知识的架构是有优劣之分的，最重要的就是逻辑性和完备性。
      4.我们来思考一个问题，如果我们要给 JavaScript 知识做一个顶层目录，该怎么做呢？
      5.如果我们把一些特别流行的术语和问题，拼凑起来，可能会变成这样：
        类型转换；
        this 指针；
        闭包；
        作用域链；
        原型链；
        ……
      6.这其实不是我们想要的结果，因为这些知识点之间，没有任何逻辑关系。它们既不是并列关系，又不是递进关系，合在一起，也就没有任何
        意义。这样的知识架构，无法帮助我们去发现问题和理解问题。
      7.如果让我来做，我会这样划分：
        文法
        语义
        运行时
      8.为什么这样分呢，因为对于任何计算机语言来说，必定是“用规定的文法，去表达特定语义，最终操作运行时的”一个过程。
      9.这样，JavaScript 的任何知识都不会出现在这个范围之外，这是知识架构的完备性。我们再往下细分一个层级，就变成了这个样子：
        文法
          词法
          语法
        语义
        运行时
          类型
          执行过程
      10.我来解释一下这个划分。
      11.文法可以分成词法和语法，这来自编译原理的划分，同样是完备的。语义则跟语法具有一一对应关系，这里暂时不区分。
      12.对于运行时部分，这个划分保持了完备性，我们都知道：程序 = 算法 + 数据结构，那么，对运行时来说，类型就是数据结构，执行过
        程就是算法。
      13.当我们再往下细分的时候，就会看到熟悉的概念了，词法中有各种直接量、关键字、运算符，语法和语义则是表达式、语句、函数、对象、
        模块，类型则包含了对象、数字、字符串等……
      14.这样逐层向下细分，知识框架就初见端倪了。在顶层和大结构上，我们通过逻辑来保持完备性。如果继续往下，就需要一些技巧了，我们
        可以寻找一些线索。
      15.比如在 JavaScript 标准中，有完整的文法定义，它是具有完备性的，所以我们可以根据它来完成，我们还可以根据语法去建立语义的
        知识架构。实际上，因为 JavaScript 有一份统一的标准，所以相对来说不太困难。
      16.如果是浏览器中的 API，那就困难了，它们分布在 w3c 的各种标准当中，非常难找。但是我们要想找到一些具有完备性的线索，也不是
        没有办法。我喜欢的一个办法，就是用实际的代码去找：for in 遍历 window 的属性，再去找它的内容。
      17.我想，学习的过程，实际上就是知识架构不断进化的过程，通过知识架构的自然延伸，我们可以更轻松地记忆一些原本难以记住的点，还
        可以发现被忽视的知识盲点。
      18.建立知识架构，同样有利于面试，没人能够记住所有的知识，当不可避免地谈到一个记不住的知识，如果你能快速定位到它在知识架构中
        的位置，把一些相关的点讲出来，我想，这也能捞回不少分。（关于前端具体的知识架构，我会在 02 篇文章中详细讲解。）
    12.第二个方法：追本溯源
      1.第二个方法，我把它称作追本溯源。
      2.有一些知识，背后有一个很大的体系，例如，我们对比一下 CSS 里面的两个属性：
        opacity；
        display。
      3.虽然都是“属性”，但是它们背后的知识量完全不同，opacity 是个非常单纯的数值，表达的意思也很清楚，而 display 的每一个取值
        背后都是一个不同的布局体系。我们要讲清楚 display，就必须关注正常流（Normal Flow）、关注弹性布局系统以及 grid 这些内
        容。
      4.还有一些知识，涉及的概念本身经历了各种变迁，变得非常复杂和有争议性，比如 MVC，从 1979 年至今，概念变化非常大，MVC 的定
        义几乎已经成了一段公案，我曾经截取了 MVC 原始论文、MVP 原始论文、微软 MSDN、Apple 开发者文档，这些内容里面，MVC 画的
        图、箭头和解释都完全不同。
      5.这种时候，就是我们做一些考古工作的时候了。追本溯源，其实就是关注技术提出的背景，关注原始的论文或者文章，关注作者说的话。
      6.操作起来也非常简单：翻翻资料（一般 wiki 上就有）找找历史上的文章和人物，再顺藤摸瓜翻出来历史资料就可以了，如果翻出来的是
        历史人物（幸亏互联网的历史不算悠久），你也可以试着发封邮件问问。
      7.这个过程，可以帮助我们理解一些看上去不合理的东西，有时候还可以收获一些趣闻，比如 JavaScript 之父 Brendan Eich 曾经在 
        Wikipedia 的讨论页上解释 JavaScript 最初想设计一个带有 prototype 的 scheme，结果受到管理层命令把它弄成像 Java 的
        样子（如果你再挖的深一点，甚至能找到他对某位“尖头老板”的吐槽）。
      8.根据这么一句话，我们再去看看 scheme，看看 Java，再看看一些别的基于原型的语言，我们就可以理解为什么 JavaScript 是现在
        这个样子了：函数是一等公民，却提供了 new this instanceof 等特性，甚至抄来了 Java 的 getYear 这样的 Bug。
    13.结语
      1.今天我带你探索了前端的学习路径，并提出了两个学习方法：你要试着建立自己的知识架构，除此之外，还要学会追本溯源，找到知识的源
        头。
      2.这个专栏中，我并不奢望通过短短的 40 篇专栏，事无巨细地把前端的所有知识都罗列清楚，这本身是 MDN 这样的参考手册的工作。但是，
        我希望通过这个专栏，把前端技术背后的设计原理和知识体系讲清楚，让你能对前端技术产生整体认知，这样才能够在未来汹涌而来的新技
        术中保持领先的状态。
      3.在你的认识中，前端知识的结构是怎样的？欢迎留言告诉我，我们一起讨论。
  3.列一份前端知识架构图
    1.在上一篇文章中，我们简要地总结了前端的学习路径与方法，我们提到的第一个学习方法就是：建立知识框架。那么，今天我们就一起来列一
      份前端的知识框架图。
    2.在开始列框架之前，我想先来谈谈我们的目标。实际上，我们在网上可以找到很多参考资料，比如 MDN 这样的参考手册，又比如一份语言标
      准，但是我们的课程既不是一本参考手册，也不是一份语言标准。参考手册希望做到便于查阅、便于理解和全面，语言标准的目标是严谨、无
      遗漏、无歧义。
    3.而我们的课程有什么不同呢？我认为，作为一个课程，有两个目标：一个是把无法通过查阅解决的原理和背景讲清楚，另一个是把不方便查阅
      和记忆的内容整理好。
    4.我会尽量避免像前面提到的两种文档一样逐条目罗列知识点和细节，当然，这不是在说两种文档没有价值，而是我们各有分工，参考手册和语
      言标准做的事情，我们没必要重复去做，即使做了也不一定能做得更好。
    5.在这个课程里，我希望能和你一起打造一个前端知识的框架，再把知识点做个遍历，这其中，有原理和背景的部分，我去讲解知识的原理和背
      景。如果没有的话，我们就去讲整理和记忆这部分知识的方法，这样，即使你遇见无法一下子记住的知识，也可以很容易地查阅参考手册和标
      准来解决。
    6.如果让我做一个划分，前端的知识在总体上分成基础部分和实践部分，基础部分包含了 JavaScript 语言（模块一）、CSS 和 HTML
      （模块二）以及浏览器的实现原理和 API（模块三），这三个模块涵盖了一个前端工程师所需要掌握的全部知识。
    7.学完这三个部分，你再结合基本的编程能力，就可以应对基本的前端开发工作了。实践部分（模块四）重点会介绍我在工作过程中遇到的问题
      和解决方案，希望这块内容能够帮助你和你的前端团队找到可能的发展方向和着力点。
    8.JavaScript
      javascript知识架构图.png
      1.上面是我整理的 JavaScript 知识架构图，下面我们来具体解释一下。
      2.在 JavaScript 的模块中，首先我们可以把语言按照文法、语义和运行时来拆分，这符合编程语言的一般规律：用一定的词法和语法，
        表达一定语义，从而操作运行时。
      3.接下来，我们又按照程序的一般规律，把运行时分为数据结构和算法部分：数据结构包含类型和实例（JavaScript 的类型系统就是它
        的 7 种基本类型和 7 种语言类型，实例就是它的内置对象部分）。所谓的算法，就是 JavaScript 的执行过程。
      4.类型部分中，对象比其它所有类型加起来都要更为复杂，所以我们会用较长的篇幅来讲解对象，包括它的一些历史和设计思路。
      5.执行过程我们则需要按照从大结构到小结构的角度讲解，从最顶层的程序与模块、事件循环和微任务，到函数、再到语句级的执行。我们
        从粗到细地了解执行过程。
      6.实例部分，对 JavaScript 来说类似基础库，JavaScipt 的内置对象多达 150 以上，考虑到我们即使逐次讲解也必定不如 MDN 更
        加细致全面，所以我们会从应用和机制的角度，挑选其中几个体系来讲解。
      7.文法中的语法和语义基本是一一对应关系，在 JavaScript 标准中有一份语法定义表，它同样不适合一一讲解，我们会从 JavaScript 
        语法中特别的地方，以及与日常开发比较相关的地方来重点讲解，剩下的内容和词法部分，我们会带领大家做一些数据挖掘工作，从这份表
        格中找到一些和我们日常开发息息相关的内容。
      8.语义的大部分内容我们会在运行时的讲解中透出，同时它又跟语法有对应的关系，所以我们不再单独拿出来讲解。
    9.HTML 和 CSS
      html&css知识架构图.png
      1.上面是我整理的 HTML 和 CSS 的知识架构图，我们来具体解释一下。
      2.在 HTML 的部分，我们会按照功能和语言来划分它的知识，HTML 的功能主要由标签来承担，所以我们首先会把标签做一些分类，并对
        它们分别进行讲解。
      3.我们都知道 HTML 的标签可以分为很多种，head 里面的我们称为元信息类标签，诸如 title、meta、style、link、base 这
        些，它们用来描述文档的一些基本信息。还有一类是一些诸如 section、nav 的标签，它们在视觉表现上跟 div 并没有区别，但
        是各有各的适用场景，我们把它们称作语义类标签。另外一类是 img、video、audio 之类的替换型媒体类标签，用来引入外部内
        容，平常开发中你也会经常用到。再有就是表单类的，比如 input、button。
      4.所以，基于这样的分类，我把标签分成下面几种。
        1.文档元信息：通常是出现在 head 标签中的元素，包含了描述文档自身的一些信息；
        2.语义相关：扩展了纯文本，表达文章结构、不同语言要素的标签；
        3.链接：提供到文档内和文档外的链接；
        4.替换型标签：引入声音、图片、视频等外部元素替换自身的一类标签；
        5.表单：用于填写和提交信息的一类标签；
        6.表格：表头、表尾、单元格等表格的结构。
      5.我们的重点会放在前四种标签上，表单和表格较少用到，而且基本以查阅型知识为主，这里就不拿出来讲解了。
      6.除了标签之外，我们还应该把 HTML 当作一门语言来了解下，当然，标记语言跟编程语言不太一样，没有编程语言那么严谨，所以，
        我们会简要介绍 HTML 的语法和几个重要的语言机制：实体、命名空间。
      7.最后我们会介绍下 HTML 的补充标准：ARIA，它是 HTML 的扩展，在可访问性领域，它有至关重要的作用。
      8.CSS 部分，按照惯例，我们也会从语言和功能两个角度去介绍。在语言部分，我们会从大到小介绍 CSS 的各种语法结构，比如 @rule、
        选择器、单位等等。功能部分，我们大致可以分为布局、绘制和交互类。
      9.在布局类我们介绍两个最常用的布局：正常流和弹性布局。绘制类我们则会分成图形相关的和文字相关的绘制。最后我们会介绍动画和
        其它交互。
    10.浏览器的实现原理和 API
      浏览器知识架构图.png
      1.上面是我整理的浏览器知识架构图，我们来具体看一下。
      2.浏览器部分我们会先介绍下浏览器的实现原理，这是我们深入理解 API 的基础。
      3.我们会从一般的浏览器设计出发，按照解析、构建 DOM 树、计算 CSS、渲染、合成和绘制的流程来讲解浏览器的工作原理。
      4.在 API 部分，我们会从 W3C 零散的标准中挑选几个大块的 API 来详细讲解，主要有：事件、DOM、CSSOM 几个部分，它们分别覆
        盖了交互、语义和可见效果，这是我们工作中用到的主要内容。
      5.其他的 API 怎么办呢，别着急，在最后，我会给出一份 Chrome 已经实现的 API 跟 W3C 标准的对应关系和它的生成过程，来覆盖
        其它部分。
    11.前端工程实践
      前端工程实践知识架构图.jpg
      1.最后一个模块是前端工程实践。我们在掌握了前面的基础知识之后，也就基本掌握了做一个前端工程师的底层能力。在这个模块中，我选择
        了性能、工具链、持续集成、搭建系统、架构与基础库这几个方向的前端工程实践案例，来与你一起分享我的经验。
        1.性能
          1.首先我们会谈谈性能。对任何一个前端团队而言，性能是它价值的核心指标，从早年“重构”的实践开始，前端有通过性能证明自己价值
            的传统。
          2.但是性能并非细节的堆砌，也不是默默做优化，所以，我会从团队的角度来跟你一起探讨性能的方法论和技术体系。
        2.工具链
          下一个案例是工具链。这一部分，我将会探讨企业中工具链的建设思路。对一个高效又合作良好的前端团队来说，一致性的工具链是不可
          或缺的保障，作为开发阶段的入口，工具链又可以和性能、发布、持续集成等系统链接到一起，成为团队技术管理的基础。
        3.持续集成
          接下来还会给大家介绍前端的持续集成，持续集成并非一个新概念，但是过去持续集成概念和理论都主要针对软件开发，而对前端来说，
          持续集成是一个新的课题（当然对持续集成来说，前端也是一个新课题），比如 daily build 就完全不适用前端，前端代码必须是线
          上实时可用的。这一部分内容将会针对前端的持续集成提出一些建设的思路。
        4.搭建系统
          接下来的案例是搭建系统，前端工作往往多而繁杂，针对高重复性、可模块化的业务需求，传统的人工开发不再适用，搭建系统是大部分
          大型前端团队的选择。这一部分内容我将会介绍什么是搭建系统，以及一些常见的搭建系统类型。
        5.架构与基础库
          1.最后一个部分，会给大家介绍前端架构和基础库的知识。软件架构师主要解决功能复杂性的问题，服务端架构师主要解决高流量问题，
            而前端是页面间天然解耦，分散在用户端运行的系统，但是前端架构也有自己要解决的问题。
          2.前端需求量大、专业人才稀缺，更因为前端本身运行在浏览器中，有大量兼容工作要做。所以前端架构的主要职责是兼容性、复用和
            能力扩展。这一部分文章我将会介绍前端架构工作的一些思路和切入点。
      3.上面的这些案例来自我在领导手淘前端团队时的经验，和我在阿里巴巴工作参与晋升面试时听到的案例，这些内容几乎是每一个年轻的前端
        团队成长过程中都会需要的基础设施。
    12.好了，前端的知识体系我们大致列出来了。你可能发现了，知识体系图中的每一个知识点，专栏里都有与之对应的文章，这也是我的初衷：希
      望借由讲解这 40 余个知识点，帮你建立起前端的知识框架。
        前端知识架构图.jpg
    13.讲述形式
      1.基于这份知识框架图，我们的课程主要采用两种讲述形式：一种是重点讲解的课程，一种是知识图谱型的课程。
      2.重点讲解的课程我们会从技术的背景、原理和设计出发，把知识的内容呈现出来。这种形式适用于有体系和源流的知识，比较适合系统学习
        和理解，比如 JavaScript 中的对象、CSS 的排版。
      3.知识图谱型的课程则提供一些方法，用表格或者脑图的形式来整理知识的结构。这种形式适用于零散的知识，比较适合记住大概，用到时去
        查阅，比如 JavaScript 的词法、HTML 中的所有标签、以及浏览器中的 API 就十分适合这样的讲解方式。
    14.结语
      1.今天我带你一起划分了前端的知识内容，前端的基础知识分成 JavaScript、HTML、CSS 以及浏览器四大重点模块，每个模块也分别有自
        己的技术重点。你可以在框架中，挑选你最需要的前端知识，按需学习。
      2.当然，这篇文章最重要的是，我希望能帮你建立一个理解前端的全景图。这样，任何时候，你都能够体系地思考问题，分析问题。
      3.你觉得你的划分跟我一样吗，你还有其他的想法，你觉得是否有想了解的知识不在其中，欢迎给我留言。
  4.模块一：JavaScript
    1.JavaScript类型：关于类型，有哪些你不知道的细节？
      1.你好，我是 winter。今天我们来讲讲 JavaScript 的内容，在这个部分，我首先想跟你聊一聊类型。
      2.JavaScript 类型对每个前端程序员来说，几乎都是最为熟悉的概念了。但是你真的很了解它们吗？我们不妨来看看下面的几个问题。
        1.为什么有的编程规范要求用 void 0 代替 undefined？
        2.字符串有最大长度吗？
        3.0.1 + 0.2 不是等于 0.3 么？为什么 JavaScript 里不是这样的？
        4.ES6 新加入的 Symbol 是个什么东西？
        5.为什么给对象添加的方法能用在基本类型上？
      3.如果你答起来还有些犹豫的地方，这就说明你对这部分知识点，还是有些遗漏之处的。没关系，今天我来帮你一一补上。
      4.我在前面提到过，我们的 JavaScript 模块会从运行时、文法和执行过程三个角度去剖析 JS 的知识体系，本篇我们就从运行时的角度
        去看 JavaScript 的类型系统。
          运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于 7 个类型之一。从变量、参数、返回值到表达式中间结果，
          任何 JavaScript 代码运行过程中产生的数据，都具有运行时类型。
      5.类型
        1.JavaScript 语言的每一个值都属于某一种数据类型。JavaScript 语言规定了 7 种语言类型。语言类型广泛用于变量、函数参数、
          表达式、函数返回值等场合。根据最新的语言标准，这 7 种语言类型是：
            1.Undefined；
            2.Null；
            3.Boolean；
            4.String；
            5.Number；
            6.Symbol；
            7.Object。
        2.除了 ES6 中新加入的 Symbol 类型，剩下 6 种类型都是我们日常开发中的老朋友了，但是，要想回答文章一开始的问题，我们需要
          重新认识一下这些老朋友，下面我们就来从简单到复杂，重新学习一下这些类型。
      6.Undefined、Null
        1.我们的第一个问题，为什么有的编程规范要求用 void 0 代替 undefined？现在我们就分别来看一下。
        2.Undefined 类型表示未定义，它的类型只有一个值，就是 undefined。任何变量在赋值前是 Undefined 类型、值为
          undefined，一般我们可以用全局变量 undefined（就是名为 undefined 的这个变量）来表达这个值，或者 void 运算来
          把任意一个表达式变成 undefined 值。
        3.但是呢，因为 JavaScript 的代码 undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误
          之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。
        4.Undefined 跟 Null 有一定的表意差别，Null 表示的是：“定义了但是为空”。所以，在实际编程时，我们一般不会把变量赋
          值为undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。
        5.Null 类型也只有一个值，就是 null，它的语义表示空值，与 undefined 不同，null 是 JavaScript 关键字，所以在任
          何代码中，你都可以放心用 null 关键字来获取 null 值。
      7.Boolean
        Boolean 类型有两个值， true 和 false，它用于表示逻辑意义上的真和假，同样有关键字 true 和 false 来表示两个值。
        这个类型很简单，我就不做过多介绍了。
      8.String
        1.我们来看看字符串是否有最大长度。
        2.String 用于表示文本数据。String 有最大长度是 2^53 - 1，这在一般开发中都是够用的，但是有趣的是，这个所谓最大长
          度，并不完全是你理解中的字符数。
        3.因为 String 的意义并非“字符串”，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方
          法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。
        4.Note：现行的字符集国际标准，字符是以 Unicode 的方式表示的，每一个 Unicode 的码点表示一个字符，理论上，Unicode
          的范围是无限的。UTF 是 Unicode 的编码方式，规定了码点在计算机中的表示方法，常见的有 UTF16 和 UTF8。 Unicode 
          的码点通常用 U+??? 来表示，其中 ??? 是十六进制的码点值。 0-65536（U+0000 - U+FFFF）的码点被称为基本字符区域
          （BMP）。
        5.JavaScript 中的字符串是永远无法变更的，一旦字符串构造出来，无法用任何方式改变字符串的内容，所以字符串具有值类型
          的特征。
        6.JavaScript 字符串把每个 UTF16 单元当作一个字符来处理，所以处理非 BMP（超出 U+0000 - U+FFFF 范围）的字符时，
          你应该格外小心。
        7.JavaScript 这个设计继承自 Java，最新标准中是这样解释的，这样设计是为了“性能和尽可能实现起来简单”。因为现实中很
          少用到 BMP 之外的字符。
      9.Number
        1.下面，我们来说说 Number 类型。Number 类型表示我们通常意义上的“数字”。这个数字大致对应数学中的有理数，当然，在计
          算机中，我们有一定的精度限制。
        2.JavaScript 中的 Number 类型有 18437736874454810627(即 2^64-2^53+3) 个值。
        3.JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外
          的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：
            NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字；
            Infinity，无穷大；
            -Infinity，负无穷大。
        4.另外，值得注意的是，JavaScript 中有 +0 和 -0，在加法类运算中它们没有区别，但是除法的场合则需要特别留意区分，“忘
          记检测除以 -0，而得到负无穷大”的情况经常会导致错误，而区分 +0 和 -0 的方式，正是检测 1/x 是 Infinity 还是 
          -Infinity。
        5.根据双精度浮点数的定义，Number 类型中有效的整数范围是 -0x1fffffffffffff 至 0x1fffffffffffff，所以 Number 
          无法精确表示此范围外的整数。
        6.同样根据浮点数的定义，非整数的 Number 类型无法用 ==（=== 也不行） 来比较，一段著名的代码，这也正是我们第三题的问
          题，为什么在 JavaScript 中，0.1+0.2 不能 =0.3：
          console.log( 0.1 + 0.2 == 0.3);
          这里输出的结果是 false，说明两边不相等的，这是浮点运算的特点，也是很多同学疑惑的来源，浮点数运算的精度问题导致等式
          左右的结果并不是严格相等，而是相差了个微小的值。
        7.所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用 JavaScript 提供的最小精度值：
          console.log( Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON);
          检查等式左右两边差的绝对值是否小于最小精度，才是正确的比较浮点数的方法。这段代码结果就是 true 了。
      10.Symbol
        1.Symbol 是 ES6 中引入的新类型，它是一切非字符串的对象 key 的集合，在 ES6 规范中，整个对象系统被用 Symbol 重塑。
        2.在后面的文章中，我会详细叙述 Symbol 跟对象系统。这里我们只介绍 Symbol 类型本身：它有哪些部分，它表示什么意思，以
          及如何创建 Symbol 类型。
        3.Symbol 可以具有字符串类型的描述，但是即使描述相同，Symbol 也不相等。
        4.我们创建 Symbol 的方式是使用全局的 Symbol 函数。例如：
          var mySymbol = Symbol("my symbol");
        5.一些标准中提到的 Symbol，可以在全局的 Symbol 函数的属性中找到。例如，我们可以使用 Symbol.iterator 来自定义 
          for…of 在对象上的行为：
            var o = new Object 
            o[Symbol.iterator] = function () { 
              var v = 0 
              return { 
                next: function () { 
                  return { 
                    value: v++, 
                    done: v > 10 
                  } 
                } 
              } 
            }; 
            for(var v of o) 
              console.log(v); // 0 1 2 3 ... 9
        6.代码中我们定义了 iterator 之后，用 for(var v of o) 就可以调用这个函数，然后我们可以根据函数的行为，产生一个 
          for…of 的行为。
        7.这里我们给对象 o 添加了 Symbol.iterator 属性，并且按照迭代器的要求定义了一个 0 到 10 的迭代器，之后我们就可以
          在 for of 中愉快地使用这个 o 对象啦。
        8.这些标准中被称为“众所周知”的 Symbol，也构成了语言的一类接口形式。它们允许编写与语言结合更紧密的 API。
      11.Object
        1.Object 是 JavaScript 中最复杂的类型，也是 JavaScript 的核心机制之一。Object 表示对象的意思，它是一切有形和无
          形物体的总称。
        2.下面我们来看一看，为什么给对象添加的方法能用在基本类型上？
        3.在 JavaScript 中，对象的定义是“属性的集合”。属性分为数据属性和访问器属性，二者都是 key-value 结构，key 可以是
          字符串或者 Symbol 类型。
        4.关于对象的机制，后面会有单独的一篇来讲述，这里我重点从类型的角度来介绍对象类型。
        5.提到对象，我们必须要提到一个概念：类。
        6.因为 C++ 和 Java 的成功，在这两门语言中，每个类都是一个类型，二者几乎等同，以至于很多人常常会把 JavaScript 的
          “类”与类型混淆。
        7.事实上，JavaScript 中的“类”仅仅是运行时对象的一个私有属性，而 JavaScript 中是无法自定义类型的。
        8.JavaScript 中的几个基本类型，都在对象类型中有一个“亲戚”。它们是：
          Number；
          String；
          Boolean；
          Symbol。
        9.所以，我们必须认识到 3 与 new Number(3) 是完全不同的值，它们一个是 Number 类型， 一个是对象类型。
        10.Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象，当直接调用时，它们表示强制类型
          转换。
        11.Symbol 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 Symbol 对象的构造器。
        12.JavaScript 语言设计上试图模糊对象和基本类型之间的关系，我们日常代码可以把对象的方法在基本类型上使用，比如：
            console.log("abc".charAt(0)); //a
        13.甚至我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 Symbol 原型上添加了 hello 方法，在任何 Symbol 
          类型变量都可以调用。
            Symbol.prototype.hello = () => console.log("hello"); 
            var a = Symbol("a"); 
            console.log(typeof a); //symbol，a并非对象 
            a.hello(); //hello，有效
        14.所以我们文章开头的问题，答案就是. 运算符提供了装箱操作，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调
          用对应对象的方法。
      12.类型转换
        1.讲完了基本类型，我们来介绍一个现象：类型转换。
        2.因为 JS 是弱类型语言，所以类型转换发生非常频繁，大部分我们熟悉的运算都会先进行类型转换。大部分类型转换符合人类的
          直觉，但是如果我们不去理解类型转换的严格定义，很容易造成一些代码中的判断失误。
        3.其中最为臭名昭著的是 JavaScript 中的“ == ”运算，因为试图实现跨类型的比较，它的规则复杂到几乎没人可以记住。
        4.这里我们当然也不打算讲解 == 的规则，它属于设计失误，并非语言中有价值的部分，很多实践中推荐禁止使用“ ==”，而要求
          程序员进行显式地类型转换后，用 === 比较。
        5.其它运算，如加减乘除大于小于，也都会涉及类型转换。幸好的是，实际上大部分类型转换规则是非常简单的，如下表所示：
          类型转换规则.jpg
        6.在这个里面，较为复杂的部分是 Number 和 String 之间的转换，以及对象跟基本类型之间的转换。我们分别来看一看这几种
          转换的规则。
      13.StringToNumber
        1.字符串到数字的类型转换，存在一个语法结构，类型转换支持十进制、二进制、八进制和十六进制，比如：
          30；
          0b111；
          0o13；
          0xFF。
        2.此外，JavaScript 支持的字符串语法还包括正负号科学计数法，可以使用大写或者小写的 e 来表示：
          1e3；
          -1e-2。
        3.需要注意的是，parseInt 和 parseFloat 并不使用这个转换，所以支持的语法跟这里不尽相同。
        4.在不传入第二个参数的情况下，parseInt 只支持 16 进制前缀“0x”，而且会忽略非数字字符，也不支持科学计数法。
        5.在一些古老的浏览器环境中，parseInt 还支持 0 开头的数字作为 8 进制前缀，这是很多错误的来源。所以在任何环境
          下，都建议传入 parseInt 的第二个参数，而 parseFloat 则直接把原字符串作为十进制来解析，它不会引入任何的其
          他进制。
        6.多数情况下，Number 是比 parseInt 和 parseFloat 更好的选择。
      14.NumberToString
        1.在较小的范围内，数字到字符串的转换是完全符合你直觉的十进制表示。当 Number 绝对值较大或者较小时，字符串表示
          则是使用科学计数法表示的。这个算法细节繁多，我们从感性的角度认识，它其实就是保证了产生的字符串不会过长。
        2.具体的算法，你可以去参考 JavaScript 的语言标准。由于这个部分内容，我觉得在日常开发中很少用到，所以这里我就
          不去详细地讲解了。
      15.装箱转换
        1.每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为
          对应的对象，它是类型转换中一种相当重要的种类。
        2.前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可
          以利用一个函数的 call 方法来强迫产生装箱。
        3.我们定义一个函数，函数里面只有 return this，然后我们调用函数的 call 方法到一个 Symbol 类型的值上，这样
          就会产生一个 symbolObject。
        4.我们可以用 console.log 看一下这个东西的 type of，它的值是 object，我们使用 symbolObject instanceof 
          可以看到，它是 Symbol 这个类的实例，我们找它的 constructor 也是等于 Symbol 的，所以我们无论从哪个角度看，
          它都是 Symbol 装箱过的对象：
            var symbolObject = (function(){ return this; }).call(Symbol("a"));
            console.log(typeof symbolObject); //object
            console.log(symbolObject instanceof Symbol); //true
            console.log(symbolObject.constructor == Symbol); //true
        5.装箱机制会频繁产生临时对象，在一些对性能要求较高的场景下，我们应该尽量避免对基本类型做装箱转换。
        6.使用内置的 Object 函数，我们可以在 JavaScript 代码中显式调用装箱能力。
          var symbolObject = Object(Symbol("a"));
          console.log(typeof symbolObject); //object
          console.log(symbolObject instanceof Symbol); //true
          console.log(symbolObject.constructor == Symbol); //true
        7.每一类装箱对象皆有私有的 Class 属性，这些属性可以用 Object.prototype.toString 获取：
          var symbolObject = Object(Symbol("a"));
          console.log(Object.prototype.toString.call(symbolObject)); //[object Symbol]
        8.在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此 Object.prototype.toString 是可以准确
          识别对象对应的基本类型的方法，它比 instanceof 更加准确。
        9.但需要注意的是，call 本身会产生装箱操作，所以需要配合 typeof 来区分基本类型还是对象类型。
      16.拆箱转换
        1.在 JavaScript 标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换（即，拆箱转换）。
        2.对象到 String 和 Number 的转换都遵循“先拆箱再转换”的规则。通过拆箱转换，把对象变成基本类型，再从基本类型
          转换为对应的 String 或者 Number。
        3.拆箱转换会尝试调用 valueOf 和 toString 来获得拆箱后的基本类型。如果 valueOf 和 toString 都不存在，或
          者没有返回基本类型，则会产生类型错误 TypeError。 
          var o = {
              valueOf : () => {console.log("valueOf"); return {}},
              toString : () => {console.log("toString"); return {}}
          }
          o * 2
          // valueOf
          // toString
          // TypeError
        4.我们定义了一个对象 o，o 有 valueOf 和 toString 两个方法，这两个方法都返回一个对象，然后我们进行 o*2 这
          个运算的时候，你会看见先执行了 valueOf，接下来是 toString，最后抛出了一个 TypeError，这就说明了这个拆箱
          转换失败了。
        5.到 String 的拆箱转换会优先调用 toString。我们把刚才的运算从 o*2 换成 String(o)，那么你会看到调用顺序就
          变了。        
          var o = {
              valueOf : () => {console.log("valueOf"); return {}},
              toString : () => {console.log("toString"); return {}}
          }
          String(o)
            // toString
            // valueOf
            // TypeError
        6.在 ES6 之后，还允许对象通过显式指定 @@toPrimitive Symbol 来覆盖原有的行为。
          var o = {
              valueOf : () => {console.log("valueOf"); return {}},
              toString : () => {console.log("toString"); return {}}
          }
          o[Symbol.toPrimitive] = () => {console.log("toPrimitive"); return "hello"}
          console.log(o + "")
          // toPrimitive
          // hello
      17.结语
        1.在本篇文章中，我们介绍了 JavaScript 运行时的类型系统。这里回顾一下今天讲解的知识点。
        2.除了这七种语言类型，还有一些语言的实现者更关心的规范类型。
          List 和 Record： 用于描述函数传参过程。
          Set：主要用于解释字符集等。
          Completion Record：用于描述异常、跳出等语句执行过程。
          Reference：用于描述对象属性访问、delete 等。
          Property Descriptor：用于描述对象的属性。
          Lexical Environment 和 Environment Record：用于描述变量和作用域。
          Data Block：用于描述二进制数据。
        3.有一个说法是：程序 = 算法 + 数据结构，运行时类型包含了所有 JavaScript 执行时所需要的数据结构的定义，所以我们
          要对它格外重视。
        4.最后我们留一个实践问题，如果我们不用原生的 Number 和 parseInt，用 JavaScript 代码实现 String 到 Number 
          的转换，该怎么做呢？请你把自己的代码留言给我吧！
      18.补充阅读
        1.事实上，“类型”在 JavaScript 中是一个有争议的概念。一方面，标准中规定了运行时数据类型； 另一方面，JavaScript 
          语言中提供了 typeof 这样的运算，用来返回操作数的类型，但 typeof 的运算结果，与运行时类型的规定有很多不一致的
          地方。我们可以看下表来对照一下。
            数据类型.png
        2.在表格中，多数项是对应的，但是请注意 object——Null 和 function——Object 是特例，我们理解类型的时候需要特别注
          意这个区别。
        3.从一般语言使用者的角度来看，毫无疑问，我们应该按照 typeof 的结果去理解语言的类型系统。但 JavaScript 之父本人
          也在多个场合表示过，typeof 的设计是有缺陷的，只是现在已经错过了修正它的时机。
    2.JavaScript对象：面向对象还是基于对象？
      1.与其它的语言相比，JavaScript 中的“对象”总是显得不那么合群。
      2.一些新人在学习 JavaScript 面向对象时，往往也会有疑惑：
        为什么 JavaScript（直到 ES6）有对象的概念，但是却没有像其他的语言那样，有类的概念呢；
        为什么在 JavaScript 对象里可以自由添加属性，而其他的语言却不能呢？
      3.甚至，在一些争论中，有人强调：JavaScript 并非“面向对象的语言”，而是“基于对象的语言”。这个说法一度流传甚广，而事实上，我
        至今遇到的持有这一说法的人中，无一能够回答“如何定义面向对象和基于对象”这个问题。
      4.实际上，基于对象和面向对象两个形容词都出现在了 JavaScript 标准的各个版本当中。
      5.我们可以先看看 JavaScript 标准对基于对象的定义，这个定义的具体内容是：“语言和宿主的基础设施由对象来提供，并且 
        JavaScript 程序即是一系列互相通讯的对象集合”。
      6.这里的意思根本不是表达弱化的面向对象的意思，反而是表达对象对于语言的重要性。
      7.那么，在本篇文章中，我会尝试让你去理解面向对象和 JavaScript 中的面向对象究竟是什么。
      8.什么是面向对象？
        1.我们先来说说什么是对象，因为翻译的原因，中文语境下我们很难理解“对象”的真正含义。事实上，Object（对象）在英文中，是一切
          事物的总称，这和面向对象编程的抽象思维有互通之处。
        2.中文的“对象”却没有这样的普适性，我们在学习编程的过程中，更多是把它当作一个专业名词来理解。
        3.但不论如何，我们应该认识到，对象并不是计算机领域凭空造出来的概念，它是顺着人类思维模式产生的一种抽象（于是面向对象编程也
          被认为是：更接近人类思维模式的一种编程范式）。
        4.那么，我们先来看看在人类思维模式下，对象究竟是什么。
          对象这一概念在人类的幼儿期形成，这远远早于我们编程逻辑中常用的值、过程等概念。
          在幼年期，我们总是先认识到某一个苹果能吃（这里的某一个苹果就是一个对象），继而认识到所有的苹果都可以吃（这里的所有苹果，
          就是一个类），再到后来我们才能意识到三个苹果和三个梨之间的联系，进而产生数字“3”（值）的概念。
        5.在《面向对象分析与设计》这本书中，Grady Booch 替我们做了总结，他认为，从人类的认知角度来说，对象应该是下列事物之一：
          1.一个可以触摸或者可以看见的东西；
          2.人的智力可以理解的东西；
          3.可以指导思考或行动（进行想象或施加动作）的东西。
        6.有了对象的自然定义后，我们就可以描述编程语言中的对象了。在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象，
          最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 C++、Java 等流行的编程语言。
        7.而 JavaScript 早年却选择了一个更为冷门的方式：原型（关于原型，我在下一篇文章会重点介绍，这里你留个印象就可以了）。这是
          我在前面说它不合群的原因之一。
        8.然而很不幸，因为一些公司政治原因，JavaScript 推出之时受管理层之命被要求模仿 Java，所以，JavaScript 创始人 Brendan 
          Eich 在“原型运行时”的基础上引入了 new、this 等语言特性，使之“看起来更像 Java”。
        9.在 ES6 出现之前，大量的 JavaScript 程序员试图在原型体系的基础上，把 JavaScript 变得更像是基于类的编程，进而产生了很
          多所谓的“框架”，比如 PrototypeJS、Dojo。
        10.事实上，它们成为了某种 JavaScript 的古怪方言，甚至产生了一系列互不相容的社群，显然这样做的收益是远远小于损失的。
        11.如果我们从运行时角度来谈论对象，就是在讨论 JavaScript 实际运行中的模型，这是由于任何代码执行都必定绕不开运行时的对象
          模型。
        12.不过，幸运的是，从运行时的角度看，可以不必受到这些“基于类的设施”的困扰，这是因为任何语言运行时类的概念都是被弱化的。
        13.首先我们来了解一下 JavaScript 是如何设计对象模型的。
      9.JavaScript 对象的特征
        1.在我看来，不论我们使用什么样的编程语言，我们都先应该去理解对象的本质特征（参考 Grandy Booch《面向对象分析与设计》）。
          总结来看，对象有如下几个特点。
          对象具有唯一标识性：即使完全相同的两个对象，也并非同一个对象。
          对象有状态：对象具有状态，同一对象可能处于不同状态之下。
          对象具有行为：即对象的状态，可能因为它的行为产生变迁。
        2.我们先来看第一个特征，对象具有唯一标识性。一般而言，各种语言的对象唯一标识性都是用内存地址来体现的， 对象具有唯一标识的
          内存地址，所以具有唯一的标识。
        3.所以，JavaScript 程序员都知道，任何不同的 JavaScript 对象其实是互不相等的，我们可以看下面的代码，o1 和 o2 初看是两
          个一模一样的对象，但是打印出来的结果却是 false。
            var o1 = { a: 1 };
            var o2 = { a: 1 };
            console.log(o1 == o2); // false
        4.关于对象的第二个和第三个特征“状态和行为”，不同语言会使用不同的术语来抽象描述它们，比如 C++ 中称它们为“成员变量”和
          “成员函数”，Java 中则称它们为“属性”和“方法”。
        5.在 JavaScript 中，将状态和行为统一抽象为“属性”，考虑到 JavaScript 中将函数设计成一种特殊对象（关于这点，我会在后面
          的文章中详细讲解，此处先不用细究），所以 JavaScript 中的行为和状态都能用属性来抽象。
        6.下面这段代码其实就展示了普通属性和函数作为属性的一个例子，其中 o 是对象，d 是一个属性，而函数 f 也是一个属性，尽管写法
          不太相同，但是对 JavaScript 来说，d 和 f 就是两个普通属性。
            var o = { 
                d: 1,
                f() {
                    console.log(this.d);
                }    
            };
        7.所以，总结一句话来看，在 JavaScript 中，对象的状态和行为其实都被抽象为了属性。如果你用过 Java，一定不要觉得奇怪，尽管
          设计思路有一定差别，但是二者都很好地表现了对象的基本特征：标识性、状态和行为。
        8.在实现了对象基本特征的基础上, 我认为，JavaScript 中对象独有的特色是：对象具有高度的动态性，这是因为 JavaScript 赋予
          了使用者在运行时为对象添改状态和行为的能力。
        9.我来举个例子，比如，JavaScript 允许运行时向对象添加属性，这就跟绝大多数基于类的、静态的对象设计完全不同。如果你用过 
          Java 或者其它别的语言，肯定会产生跟我一样的感受。
        10.下面这段代码就展示了运行时如何向一个对象添加属性，一开始我定义了一个对象 o，定义完成之后，再添加它的属性 b，这样操作是
          完全没问题的。
            var o = { a: 1 };
            o.b = 2;
            console.log(o.a, o.b); //1 2
        11.为了提高抽象能力，JavaScript 的属性被设计成比别的语言更加复杂的形式，它提供了数据属性和访问器属性（getter/setter）
          两类。
      10.JavaScript 对象的两类属性
        1.对 JavaScript 来说，属性并非只是简单的名称和值，JavaScript 用一组特征（attribute）来描述属性（property）。
        2.先来说第一类属性，数据属性。它比较接近于其它语言的属性概念。数据属性具有四个特征。
          value：就是属性的值。
          writable：决定属性能否被赋值。
          enumerable：决定 for in 能否枚举该属性。
          configurable：决定该属性能否被删除或者改变特征值。
        3.在大多数情况下，我们只关心数据属性的值即可。
        4.第二类属性是访问器（getter/setter）属性，它也有四个特征。
          getter：函数或 undefined，在取属性值时被调用。
          setter：函数或 undefined，在设置属性值时被调用。
          enumerable：决定 for in 能否枚举该属性。
          configurable：决定该属性能否被删除或者改变特征值。
        5.访问器属性使得属性在读和写时执行代码，它允许使用者在写和读属性时，得到完全不同的值，它可以视为一种函数的语法糖。
        6.我们通常用于定义属性的代码会产生数据属性，其中的 writable、enumerable、configurable 都默认为 true。我们可以使用
          内置函数 Object.getOwnPropertyDescripter 来查看，如以下代码所示：
            var o = { a: 1 };
            o.b = 2;
            //a和b皆为数据属性
            Object.getOwnPropertyDescriptor(o,"a") // {value: 1, writable: true, enumerable: true, configurable: true}
            Object.getOwnPropertyDescriptor(o,"b") // {value: 2, writable: true, enumerable: true, configurable: true}
        7.我们在这里使用了两种语法来定义属性，定义完属性后，我们用 JavaScript 的 API 来查看这个属性，我们可以发现，这样定义出来
          的属性都是数据属性，writeable、enumerable、configurable 都是默认值为 true。
        8.如果我们要想改变属性的特征，或者定义访问器属性，我们可以使用 Object.defineProperty，示例如下：
          var o = { a: 1 };
          Object.defineProperty(o, "b", {value: 2, writable: false, enumerable: false, configurable: true});
          //a和b都是数据属性，但特征值变化了
          Object.getOwnPropertyDescriptor(o,"a"); // {value: 1, writable: true, enumerable: true, configurable: true}
          Object.getOwnPropertyDescriptor(o,"b"); // {value: 2, writable: false, enumerable: false, configurable: true}
          o.b = 3;
          console.log(o.b); // 2
        9.这里我们使用了 Object.defineProperty 来定义属性，这样定义属性可以改变属性的 writable 和 enumerable。
        10.我们同样用 Object.getOwnPropertyDescriptor 来查看，发现确实改变了 writable 和 enumerable 特征。因为
           writable 特征为 false，所以我们重新对 b 赋值，b 的值不会发生变化。
        11.在创建对象时，也可以使用 get 和 set 关键字来创建访问器属性，代码如下所示：
            var o = { get a() { return 1 } };
            console.log(o.a); // 1
        12.访问器属性跟数据属性不同，每次访问属性都会执行 getter 或者 setter 函数。这里我们的 getter 函数返回了 1，所以 o.a 
          每次都得到 1。
        13.这样，我们就理解了，实际上 JavaScript 对象的运行时是一个“属性的集合”，属性以字符串或者 Symbol 为 key，以数据属性特
          征值或者访问器属性特征值为 value。
        14.对象是一个属性的索引结构（索引结构是一类常见的数据结构，我们可以把它理解为一个能够以比较快的速度用 key 来查找 value 
          的字典）。我们以上面的对象 o 为例，你可以想象一下“a”是 key。
          {writable:true,value:1,configurable:true,enumerable:true}是 value。我们在前面的类型课程中，已经介绍了
          Symbol 类型，能够以 Symbol 为属性名，这是 JavaScript 对象的一个特色。
        15.讲到了这里，如果你理解了对象的特征，也就不难理解我开篇提出来的问题。
        16.你甚至可以理解为什么会有“JavaScript 不是面向对象”这样的说法了。这是由于 JavaScript 的对象设计跟目前主流基于类的面向对
          象差异非常大。
        17.可事实上，这样的对象系统设计虽然特别，但是 JavaScript 提供了完全运行时的对象系统，这使得它可以模仿多数面向对象编程范式
          （下一节课我们会给你介绍 JavaScript 中两种面向对象编程的范式：基于类和基于原型），所以它也是正统的面向对象语言。
        18.JavaScript 语言标准也已经明确说明，JavaScript 是一门面向对象的语言，我想标准中能这样说，正是因为 JavaScript 的高度
          动态性的对象系统。
        19.所以，我们应该在理解其设计思想的基础上充分挖掘它的能力，而不是机械地模仿其它语言。
      11.结语
        1.要想理解 JavaScript 对象，必须清空我们脑子里“基于类的面向对象”相关的知识，回到人类对对象的朴素认知和面向对象的语言无
          关基础理论，我们就能够理解 JavaScript 面向对象设计的思路。
        2.在这篇文章中，我从对象的基本理论出发，和你理清了关于对象的一些基本概念，分析了 JavaScript 对象的设计思路。接下来又从
          运行时的角度，介绍了 JavaScript 对象的具体设计：具有高度动态性的属性集合。
        3.很多人在思考 JavaScript 对象时，会带着已有的“对象”观来看问题，最后的结果当然就是“剪不断理还乱”了。
        4.在后面的文章中，我会继续带你探索 JavaScript 对象的一些机制，看 JavaScript 如何基于这样的动态对象模型设计自己的原型
          系统，以及你熟悉的函数、类等基础设施。
        5.你还知道哪些面向对象语言，它们的面向对象系统是怎样的？请留言告诉我吧！
    3.JavaScript对象：我们真的需要模拟类吗？
      1.早期的 JavaScript 程序员一般都有过使用 JavaScript“模拟面向对象”的经历。
      2.在上一篇文章我们已经讲到，JavaScript 本身就是面向对象的，它并不需要模拟，只是它实现面向对象的方式和主流的流派不太一样，
        所以才让很多人产生了误会。
      3.那么，随着我们理解的思路继续深入，这些“模拟面向对象”，实际上做的事情就是“模拟基于类的面向对象”。
      4.尽管我认为，“类”并非面向对象的全部，但我们不应该责备社区出现这样的方案，事实上，因为一些公司的政治原因，JavaScript 推出
        之时，管理层就要求它去模仿 Java。
      5.所以，JavaScript 创始人 Brendan Eich 在“原型运行时”的基础上引入了 new、this 等语言特性，使之“看起来语法更像 Java”，
        而 Java 正是基于类的面向对象的代表语言之一。
      6.但是 JavaScript 这样的半吊子模拟，缺少了继承等关键特性，导致大家试图对它进行修补，进而产生了种种互不相容的解决方案。
      7.庆幸的是，从 ES6 开始，JavaScript 提供了 class 关键字来定义类，尽管，这样的方案仍然是基于原型运行时系统的模拟，但是它
        修正了之前的一些常见的“坑”，统一了社区的方案，这对语言的发展有着非常大的好处。
      8.实际上，我认为“基于类”并非面向对象的唯一形态，如果我们把视线从“类”移开，Brendan 当年选择的原型系统，就是一个非常优秀的
        抽象对象的形式。
      9.我们从头讲起。
      10.什么是原型？ 
        1.原型是顺应人类自然思维的产物。中文中有个成语叫做“照猫画虎”，这里的猫看起来就是虎的原型，所以，由此我们可以看出，用原型来
          描述对象的方法可以说是古已有之。
        2.我们在上一节讲解面向对象的时候提到了：在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象。
        3.最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 C++、Java 等流行的编程语言。这个流派叫做基于类的编程语言。
        4.还有一种就是基于原型的编程语言，它们利用原型来描述对象。我们的 JavaScript 就是其中代表。
        5.“基于类”的编程提倡使用一个关注分类和类之间关系开发模型。在这类语言中，总是先有类，再从类去实例化一个对象。类与类之间又可
          能会形成继承、组合等关系。类又往往与语言的类型系统整合，形成一定编译时的能力。
        6.与此相对，“基于原型”的编程看起来更为提倡程序员去关注一系列对象实例的行为，而后才去关心如何将这些对象，划分到最近的使用方
          式相似的原型对象，而不是将它们分成类。
        7.基于原型的面向对象系统通过“复制”的方式来创建新对象。一些语言的实现中，还允许复制一个空对象。这实际上就是创建一个全新的对
          象。
        8.基于原型和基于类都能够满足基本的复用和抽象需求，但是适用的场景不太相同。
        9.这就像专业人士可能喜欢在看到老虎的时候，喜欢用猫科豹属豹亚种来描述它，但是对一些不那么正式的场合，“大猫”可能更为接近直观
          的感受一些（插播一个冷知识：比起老虎来，美洲狮在历史上相当长时间都被划分为猫科猫属，所以性格也跟猫更相似，比较亲人）。
        10.我们的 JavaScript 并非第一个使用原型的语言，在它之前，self、kevo 等语言已经开始使用原型来描述对象了。
        11.事实上，Brendan 更是曾透露过，他最初的构想是一个拥有基于原型的面向对象能力的 scheme 语言（但是函数式的部分是另外的故
          事，这篇文章里，我暂时不做详细讲述）。
        12.在 JavaScript 之前，原型系统就更多与高动态性语言配合，并且多数基于原型的语言提倡运行时的原型修改，我想，这应该是 
          Brendan 选择原型系统很重要的理由。
        13.原型系统的“复制操作”有两种实现思路：
          一个是并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用；
          另一个是切实地复制对象，从此两个对象再无关联。
        14.历史上的基于原型语言因此产生了两个流派，显然，JavaScript 显然选择了前一种方式。
      11.JavaScript 的原型
        1.如果我们抛开 JavaScript 用于模拟 Java 类的复杂语法设施（如 new、Function Object、函数的 prototype 属性等），原
          型系统可以说相当简单，我可以用两条概括：
            如果所有对象都有私有字段[[prototype]]，就是对象的原型；
            读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。
        2.这个模型在 ES 的各个历史版本中并没有很大改变，但从 ES6 以来，JavaScript 提供了一系列内置函数，以便更为直接地访问操纵
          原型。三个方法分别为：
            Object.create 根据指定的原型创建新对象，原型可以是 null；
            Object.getPrototypeOf 获得一个对象的原型；
            Object.setPrototypeOf 设置一个对象的原型。
        3.利用这三个方法，我们可以完全抛开类的思维，利用原型来实现抽象和复用。我用下面的代码展示了用原型来抽象猫和虎的例子。
          var cat = { 
            say (){ 
              console.log("meow~"); 
            }, 
            jump (){ 
              console.log("jump"); 
            }
          }
          var tiger = Object.create(cat, { 
            say:{ 
              writable:true, 
              configurable:true, 
              enumerable:true, 
              value: function (){ 
                console.log("roar!"); 
              } 
            }
          })
          var anotherCat = Object.create(cat);
          anotherCat.say();
          var anotherTiger = Object.create(tiger);
          anotherTiger.say();
        4.这段代码创建了一个“猫”对象，又根据猫做了一些修改创建了虎，之后我们完全可以用 Object.create 来创建另外的猫和虎对象，我
          们可以通过“原始猫对象”和“原始虎对象”来控制所有猫和虎的行为。
        5.但是，在更早的版本中，程序员只能通过 Java 风格的类接口来操纵原型运行时，可以说非常别扭。
        6.考虑到 new 和 prototype 属性等基础设施今天仍然有效，而且被很多代码使用，学习这些知识也有助于我们理解运行时的原型工作原
          理，下面我们试着回到过去，追溯一下早年的 JavaScript 中的原型和类。
      12.早期版本中的类与原型
        1.在早期版本的 JavaScript 中，“类”的定义是一个私有属性 [[class]]，语言标准为内置类型诸如 Number、String、Date 等指
          定了[[class]]属性，以表示它们的类。语言使用者唯一可以访问[[class]]属性的方式是 Object.prototype.toString。
        2.以下代码展示了所有具有内置 class 属性的对象：
          var o = new Object; 
          var n = new Number; 
          var s = new String; 
          var b = new Boolean; 
          var d = new Date; 
          var arg = function (){ return arguments }(); 
          var r = new RegExp; 
          var f = new Function; 
          var arr = new Array; 
          var e = new Error;
          console.log([o, n, s, b, d, arg, r, f, arr, e].map(v => Object.prototype.toString.call(v)));
        3.因此，在 ES3 和之前的版本，JS 中类的概念是相当弱的，它仅仅是运行时的一个字符串属性。
        4.在 ES5 开始，[[class]] 私有属性被 Symbol.toStringTag 代替，Object.prototype.toString 的意义从命名上不再跟 
          class 相关。我们甚至可以自定义 Object.prototype.toString 的行为，以下代码展示了使用 Symbol.toStringTag 来自定义
          Object.prototype.toString 的行为：
            var o = { [Symbol.toStringTag]: "MyObject" } 
            console.log(o + "");
        5.这里创建了一个新对象，并且给它唯一的一个属性 Symbol.toStringTag，我们用字符串加法触发了 Object.prototype.toString 
          的调用，发现这个属性最终对 Object.prototype.toString 的结果产生了影响。
        6.但是，考虑到 JavaScript 语法中跟 Java 相似的部分，我们对类的讨论不能用“new 运算是针对构造器对象，而不是类”来试图回避。
        7.所以，我们仍然要把 new 理解成 JavaScript 面向对象的一部分，下面我就来讲一下 new 操作具体做了哪些事情。
        8.new 运算接受一个构造器和一组调用参数，实际上做了几件事：
          以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；
          将 this 和调用参数传给构造器，执行；
          如果构造器返回的是对象，则返回，否则返回第一步创建的对象。
        9.new 这样的行为，试图让函数对象在语法上跟类变得相似，但是，它客观上提供了两种方式，一是在构造器中添加属性，二是在构造器的
          prototype 属性上添加属性。
        10.下面代码展示了用构造器模拟类的两种方法:
          function c1 () { 
            this.p1 = 1; 
            this.p2 = function (){ 
              console.log(this.p1); 
            }
          } 
          var o1 = new c1;
          o1.p2();
          function c2 () {}
          c2.prototype.p1 = 1;
          c2.prototype.p2 = function (){ 
            console.log(this.p1);
          }
          var o2 = new c2;
          o2.p2();
        11.第一种方法是直接在构造器中修改 this，给 this 添加属性。
        12.第二种方法是修改构造器的 prototype 属性指向的对象，它是从这个构造器构造出来的所有对象的原型。
        13.没有 Object.create、Object.setPrototypeOf 的早期版本中，new 运算是唯一一个可以指定[[prototype]]的方法（当时
          的 mozilla 提供了私有属性 __proto__，但是多数环境并不支持），所以，当时已经有人试图用它来代替后来的 Object.create，
          我们甚至可以用它来实现一个 Object.create 的不完整的 polyfill，见以下代码：
            Object.create = function (prototype){ 
              var cls = function(){} 
              cls.prototype = prototype; 
              return new cls;
            }
        14.这段代码创建了一个空函数作为类，并把传入的原型挂在了它的 prototype，最后创建了一个它的实例，根据 new 的行为，这将产生
          一个以传入的第一个参数为原型的对象。
        15.这个函数无法做到与原生的 Object.create 一致，一个是不支持第二个参数，另一个是不支持 null 作为原型，所以放到今天意义
          已经不大了。
      13.ES6 中的类
        1.好在 ES6 中加入了新特性 class，new 跟 function 搭配的怪异行为终于可以退休了（虽然运行时没有改变），在任何场景，我都推
          荐使用 ES6 的语法来定义类，而令 function 回归原本的函数语义。下面我们就来看一下 ES6 中的类。
        2.ES6 中引入了 class 关键字，并且在标准中删除了所有[[class]]相关的私有属性描述，类的概念正式从属性升级成语言的基础设施，
          从此，基于类的编程方式成为了 JavaScript 的官方编程范式。
        3.我们先看下类的基本写法：
          class Rectangle { 
            constructor (height, width) { 
              this.height = height; 
              this.width = width; 
            } 
            // Getter 
            get area () { 
              return this.calcArea(); 
            } 
            // Method calcArea () { 
              return this.height * this.width; 
            }
          }
        4.在现有的类语法中，getter/setter 和 method 是兼容性最好的。
        5.我们通过 get/set 关键字来创建 getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。
        6.类的写法实际上也是由原型运行时来承载的，逻辑上 JavaScript 认为每个类是有共同原型的一组对象，类中定义的方法和属性则会被
          写在原型对象之上。
        7.此外，最重要的是，类提供了继承能力。我们来看一下下面的代码。
          class Animal { 
            constructor (name) {
              this.name = name; 
            } 
            speak () { 
              console.log(this.name + ' makes a noise.'); 
            }
          }
          class Dog extends Animal { 
            constructor(name) { 
              super(name); 
              // call the super class constructor and pass in the name parameter 
            } 
            speak () { 
              console.log(this.name + ' barks.'); 
            }
          }
          let d = new Dog('Mitzie');
          d.speak(); // Mitzie barks.
        8.以上代码创造了 Animal 类，并且通过 extends 关键字让 Dog 继承了它，展示了最终调用子类的 speak 方法获取了父类的 name。
        9.比起早期的原型模拟方式，使用 extends 关键字自动设置了 constructor，并且会自动调用父类的构造函数，这是一种更少坑的设计。
        10.所以当我们使用类的思想来设计代码时，应该尽量使用 class 来声明类，而不是用旧语法，拿函数来模拟对象。
        11.一些激进的观点认为，class 关键字和箭头运算符可以完全替代旧的 function 关键字，它更明确地区分了定义函数和定义类两种意
          图，我认为这是有一定道理的。
      14.总结
        1.在新的 ES 版本中，我们不再需要模拟类了：我们有了光明正大的新语法。而原型体系同时作为一种编程范式和运行时机制存在。
        2.我们可以自由选择原型或者类作为代码的抽象风格，但是无论我们选择哪种，理解运行时的原型系统都是很有必要的一件事。
        3.在你的工作中，是使用 class 还是仍然在用 function 来定义“类”？为什么这么做？如何把使用 function 定义类的代码改造到   
          class 的新语法？
    4.JavaScript对象：你知道全部的对象分类吗？
      1.在前面的课程中，我已经讲解了 JavaScript 对象的一些基础知识。但是，我们所讲解的对象，只是特定的一部分，并不能涵盖全部的 
        JavaScript 对象。
      2.比如说，我们不论怎样编写代码，都没法绕开 Array，实现一个跟原生的数组行为一模一样的对象，这是由于原生数组的底层实现了一个自
        动随着下标变化的 length 属性。
      3.并且，在浏览器环境中，我们也无法单纯依靠 JavaScript 代码实现 div 对象，只能靠 document.createElement 来创建。这也说
        明了 JavaScript 的对象机制并非简单的属性集合 + 原型。
      4.我们日常工作中，接触到的主要 API，几乎都是由今天所讲解的这些对象提供的。理解这些对象的性质，我们才能真正理解我们使用的 API
        的一些特性。
      5.JavaScript 中的对象分类
        1.我们可以把对象分成几类。
          宿主对象（host Objects）：由 JavaScript 宿主环境提供的对象，它们的行为完全由宿主环境决定。
          内置对象（Built-in Objects）：由 JavaScript 语言提供的对象。
            固有对象（Intrinsic Objects ）：由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。
            原生对象（Native Objects）：可以由用户通过 Array、RegExp 等内置构造器或者特殊语法创建的对象。
            普通对象（Ordinary Objects）：由{}语法、Object 构造器或者 class 关键字定义类创建的对象，它能够被原型继承。
        2.下面我会为你一一讲解普通对象之外的对象类型。
      6.宿主对象
        1.首先我们来看看宿主对象。
        2.JavaScript 宿主对象千奇百怪，但是前端最熟悉的无疑是浏览器环境中的宿主了。
        3.在浏览器环境中，我们都知道全局对象是 window，window 上又有很多属性，如 document。
        4.实际上，这个全局对象 window 上的属性，一部分来自 JavaScript 语言，一部分来自浏览器环境。
        5.JavaScript 标准中规定了全局对象属性，W3C 的各种标准中规定了 Window 对象的其它属性。
        6.宿主对象也分为固有的和用户可创建的两种，比如 document.createElement 就可以创建一些 DOM 对象。
        7.宿主也会提供一些构造器，比如我们可以使用 new Image 来创建 img 元素，这些我们会在浏览器的 API 部分详细讲解。
      7.内置对象·固有对象
        1.我们在前面说过，固有对象是由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。
        2.固有对象在任何 JavaScript 代码执行前就已经被创建出来了，它们通常扮演者类似基础库的角色。我们前面提到的“类”其实就
          是固有对象的一种。
        3.ECMA 标准为我们提供了一份固有对象表，里面含有 150+ 个固有对象。你可以通过这个链接查看。
        4.但是遗憾的是，这个表格并不完整。所以在本篇的末尾，我设计了一个小实验（小实验：获取全部 JavaScript 固有对象），你可
          以自己尝试一下，数一数一共有多少个固有对象。
      8.内置对象·原生对象
        1.我们把 JavaScript 中，能够通过语言本身的构造器创建的对象称作原生对象。在 JavaScript 标准中，提供了 30 多个构造
          器。按照我的理解，按照不同应用场景，我把原生对象分成了以下几个种类。
            原生对象种类.png
        2.通过这些构造器，我们可以用 new 运算创建新的对象，所以我们把这些对象称作原生对象。
        3.几乎所有这些构造器的能力都是无法用纯 JavaScript 代码实现的，它们也无法用 class/extend 语法来继承。
        4.这些构造器创建的对象多数使用了私有字段, 例如：
          Error: [[ErrorData]]
          Boolean: [[BooleanData]]
          Number: [[NumberData]]
          Date: [[DateValue]]
          RegExp: [[RegExpMatcher]]
          Symbol: [[SymbolData]]
          Map: [[MapData]]
        5.这些字段使得原型继承方法无法正常工作，所以，我们可以认为，所有这些原生对象都是为了特定能力或者性能，而设计出来的
          “特权对象”。
      9.用对象来模拟函数与构造器：函数对象与构造器对象
        1.我在前面介绍了对象的一般分类，在 JavaScript 中，还有一个看待对象的不同视角，这就是用对象来模拟函数和构造器。
        2.事实上，JavaScript 为这一类对象预留了私有字段机制，并规定了抽象的函数对象与构造器对象的概念。
        3.函数对象的定义是：具有[[call]]私有字段的对象，构造器对象的定义是：具有私有字段[[construct]]的对象。
        4.JavaScript 用对象模拟函数的设计代替了一般编程语言中的函数，它们可以像其它语言的函数一样被调用、传参。任何宿主只要提
          供了“具有[[call]]私有字段的对象”，就可以被 JavaScript 函数调用语法支持。
            [[call]]私有字段必须是一个引擎中定义的函数，需要接受 this 值和调用参数，并且会产生域的切换，这些内容，我将会在属
            性访问和执行过程两个章节详细讲述。
        5.我们可以这样说，任何对象只需要实现[[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能实现[[construct]]，
          它就是一个构造器对象，可以作为构造器被调用。
        6.对于为 JavaScript 提供运行环境的程序员来说，只要字段符合，我们在上文中提到的宿主对象和内置对象（如 Symbol 函数）可
          以模拟函数和构造器。
        7.当然了，用户用 function 关键字创建的函数必定同时是函数和构造器。不过，它们表现出来的行为效果却并不相同。
        8.对于宿主和内置对象来说，它们实现[[call]]（作为函数被调用）和[[construct]]（作为构造器被调用）不总是一致的。比如内
          置对象 Date 在作为构造器调用时产生新的对象，作为函数时，则产生字符串，见以下代码：
            console.log(new Date); // 1 
            console.log(Date())
        9.而浏览器宿主环境中，提供的 Image 构造器，则根本不允许被作为函数调用。
          console.log(new Image); 
          console.log(Image());//抛出错误
        10.再比如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。
        11.值得一提的是，在 ES6 之后 => 语法创建的函数仅仅是函数，它们无法被当作构造器使用，见以下代码：
          new (a => 0) // error
        12.对于用户使用 function 语法或者 Function 构造器创建的对象来说，[[call]]和[[construct]]行为总是相似的，它们执行
          同一段代码。
        13.我们看一下示例。
          function f (){ 
            return 1;
          }
          var v = f(); //把f作为函数调用
          var o = new f(); //把f作为构造器调用
        14.我们大致可以认为，它们[[construct]]的执行过程如下：
          以 Object.protoype 为原型创建一个新对象；
          以新对象为 this，执行函数的[[call]]；
          如果[[call]]的返回值是对象，那么，返回这个对象，否则返回第一步创建的新对象。
        15.这样的规则造成了个有趣的现象，如果我们的构造器返回了一个新的对象，那么 new 创建的新对象就变成了一个构造函数之外完全
          无法访问的对象，这一定程度上可以实现“私有”。
          function cls () { 
            this.a = 100; 
            return { 
              getValue:() => this.a 
            }
          }
          var o = new cls;
          o.getValue(); //100
          //a在外面永远无法访问到
      10.特殊行为的对象
        1.除了上面介绍的对象之外，在固有对象和原生对象中，有一些对象的行为跟正常对象有很大区别。
        2.它们常见的下标运算（就是使用中括号或者点来做属性访问）或者设置原型跟普通对象不同，这里我简单总结一下。
          Array：Array 的 length 属性根据最大的下标自动发生变化。
          Object.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。
          String：为了支持下标运算，String 的正整数属性访问会去字符串里查找。
          Arguments：arguments 的非负整数型下标属性跟对应的变量联动。
          模块的 namespace 对象：特殊的地方非常多，跟一般对象完全不一样，尽量只用于 import 吧。
          类型数组和数组缓冲区：跟内存块相关联，下标运算比较特殊。
          bind 后的 function：跟原来的函数相关联。
      11.结语
        1.在这篇文章中，我们介绍了一些不那么常规的对象，并且我还介绍了 JavaScript 中用对象来模拟函数和构造器的机制。
        2.这是一些不那么有规律、不那么优雅的知识，而 JavaScript 正是通过这些对象，提供了很多基础的能力。
        3.我们这次课程留一个挑战任务：不使用 new 运算符，尽可能找到获得对象的方法。
        4.例子：
          var o = {}
          var o = function(){}
        5.请把自己的答案留言给我，我们来比比看谁找到的多。
      12.小实验：获取全部 JavaScript 固有对象
        1.我们从 JavaScript 标准中可以找到全部的 JavaScript 对象定义。JavaScript 语言规定了全局对象的属性。
        2.三个值：
          Infinity、NaN、undefined。
        3.九个函数：
          eval
          isFinite
          isNaN
          parseFloat
          parseInt
          decodeURI
          decodeURIComponent
          encodeURI
          encodeURIComponent
        4.一些构造器：
          Array、Date、RegExp、Promise、Proxy、Map、WeakMap、Set、WeakSet、Function、Boolean、String、Number、
          Symbol、Object、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError、
          ArrayBuffer、SharedArrayBuffer、DataView、Typed Array、Float32Array、Float64Array、Int8Array、
          Int16Array、Int32Array、UInt8Array、UInt16Array、UInt32Array、UInt8ClampedArray。
        5.四个用于当作命名空间的对象：
          Atomics
          JSON
          Math
          Reflect
        6.我们使用广度优先搜索，查找这些对象所有的属性和 Getter/Setter，就可以获得 JavaScript 中所有的固有对象。
        7.请你试着先不看我的代码，在自己的浏览器中计算出来 JavaScript 有多少固有对象。
          var set = new Set();
          var objects = [
            eval,
            isFinite,
            isNaN,
            parseFloat,
            parseInt,
            decodeURI,
            decodeURIComponent,
            encodeURI,
            encodeURIComponent,
            Array,
            Date,
            RegExp,
            Promise,
            Proxy,
            Map,
            WeakMap,
            Set,
            WeakSet,
            Function,
            Boolean,
            String,
            Number,
            Symbol,
            Object,
            Error,
            EvalError,
            RangeError,
            ReferenceError,
            SyntaxError,
            TypeError,
            URIError,
            ArrayBuffer,
            SharedArrayBuffer,
            DataView,
            Float32Array,
            Float64Array,
            Int8Array,
            Int16Array,
            Int32Array,
            Uint8Array,
            Uint16Array,
            Uint32Array,
            Uint8ClampedArray,
            Atomics,
            JSON,
            Math,
            Reflect];
          objects.forEach(o => set.add(o));

          for(var i = 0; i < objects.length; i++) {
            var o = objects[i]
            for(var p of Object.getOwnPropertyNames(o)) {
              var d = Object.getOwnPropertyDescriptor(o, p)
              if( (d.value !== null && typeof d.value === "object") || (typeof d.value === "function"))
                if(!set.has(d.value))
                  set.add(d.value), objects.push(d.value);
              if( d.get )
                if(!set.has(d.get))
                  set.add(d.get), objects.push(d.get);
              if( d.set )
                if(!set.has(d.set))
                  set.add(d.set), objects.push(d.set);
            }
          }
    5.JavaScript执行（一）：Promise里的代码为什么比setTimeout先执行？
      1.你好，我是 winter。这一部分我们来讲一讲 JavaScript 的执行。
      2.首先我们考虑一下，如果我们是浏览器或者 Node 的开发者，我们该如何使用 JavaScript 引擎。
      3.当拿到一段 JavaScript 代码时，浏览器或者 Node 环境首先要做的就是；传递给 JavaScript 引擎，并且要求它去执行。
      4.然而，执行 JavaScript 并非一锤子买卖，宿主环境当遇到一些事件时，会继续把一段代码传递给 JavaScript 引擎去执行，此外，
        我们可能还会提供 API 给 JavaScript 引擎，比如 setTimeout 这样的 API，它会允许 JavaScript 在特定的时机执行。
      5.所以，我们首先应该形成一个感性的认知：一个 JavaScript 引擎会常驻于内存中，它等待着我们（宿主）把 JavaScript 代码或者
        函数传递给它执行。
      6.在 ES3 和更早的版本中，JavaScript 本身还没有异步执行代码的能力，这也就意味着，宿主环境传递给 JavaScript 引擎一段代码，
        引擎就把代码直接顺次执行了，这个任务也就是宿主发起的任务。
      7.但是，在 ES5 之后，JavaScript 引入了 Promise，这样，不需要浏览器的安排，JavaScript 引擎本身也可以发起任务了。
      8.由于我们这里主要讲 JavaScript 语言，那么采纳 JSC 引擎的术语，我们把宿主发起的任务称为宏观任务，把 JavaScript 引擎发起
        的任务称为微观任务。
      9.宏观和微观任务
        1.JavaScript 引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为都是一个事件循环，所以在 Node 术语中，也会把这个
          部分称为事件循环。
        2.不过，术语本身并非我们需要重点讨论的内容，我们在这里把重点放在事件循环的原理上。在底层的 C/C++ 代码中，这个事件循环是一
          个跑在独立线程中的循环，我们用伪代码来表示，大概是这样的：
            while (TRUE) { 
              r = wait(); execute(r);
            }
        3.我们可以看到，整个循环做的事情基本上就是反复“等待 - 执行”。当然，实际的代码中并没有这么简单，还有要判断循环是否结束、宏
          观任务队列等逻辑，这里为了方便你理解，我就把这些都省略掉了。
        4.这里每次的执行过程，其实都是一个宏观任务。我们可以大概理解：宏观任务的队列就相当于事件循环。
        5.在宏观任务中，JavaScript 的 Promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此，
          每个宏观任务中又包含了一个微观任务队列：
            宏任务微任务.jpg
        6.有了宏观任务和微观任务机制，我们就可以实现 JavaScript 引擎级和宿主级的任务了，例如：Promise 永远在队列尾部添加微观任
          务。setTimeout 等宿主 API，则会添加宏观任务。
        7.接下来，我们来详细介绍一下 Promise。
      10.Promise
        1.Promise 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，
          不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过 Promise 的 then 方法的回调）。
        2.Promise 的基本用法示例如下：
          function sleep (duration) { 
            return new Promise(function (resolve, reject) { 
              setTimeout(resolve, duration); 
            }) 
          } 
          sleep(1000).then( () => console.log("finished"));
        3.这段代码定义了一个函数 sleep，它的作用是等候传入参数指定的时长。
        4.Promise 的 then 回调是一个异步的执行过程，下面我们就来研究一下 Promise 函数中的执行顺序，我们来看一段代码示例：
          var r = new Promise(function(resolve, reject){
              console.log("a");
              resolve()
          });
          r.then(() => console.log("c"));
          console.log("b")
        5.我们执行这段代码后，注意输出的顺序是 a b c。在进入 console.log(“b”) 之前，毫无疑问 r 已经得到了 resolve，但是 
          Promise 的 resolve 始终是异步操作，所以 c 无法出现在 b 之前。
        6.接下来我们试试跟 setTimeout 混用的 Promise。
        7.在这段代码中，我设置了两段互不相干的异步操作：通过 setTimeout 执行 console.log(“d”)，通过 Promise 执行 
          console.log(“c”)。
            var r = new Promise(function(resolve, reject){
                console.log("a");
                resolve()
            });
            setTimeout(()=>console.log("d"), 0)
            r.then(() => console.log("c"));
            console.log("b")
        8.我们发现，不论代码顺序如何，d 必定发生在 c 之后，因为 Promise 产生的是 JavaScript 引擎内部的微任务，而 setTimeout 
          是浏览器 API，它产生宏任务。
        9.为了理解微任务始终先于宏任务，我们设计一个实验：执行一个耗时 1 秒的 Promise。
            setTimeout(()=>console.log("d"), 0)
            var r = new Promise(function(resolve, reject){
                resolve()
            });
            r.then(() => { 
                var begin = Date.now();
                while(Date.now() - begin < 1000);
                console.log("c1") 
                new Promise(function(resolve, reject){
                    resolve()
                }).then(() => console.log("c2"))
            });
        10.这里我们强制了 1 秒的执行耗时，这样，我们可以确保任务 c2 是在 d 之后被添加到任务队列。
        11.我们可以看到，即使耗时一秒的 c1 执行完毕，再 enque 的 c2，仍然先于 d 执行了，这很好地解释了微任务优先的原理。
        12.通过一系列的实验，我们可以总结一下如何分析异步执行的顺序：
          首先我们分析有多少个宏任务；
          在每个宏任务中，分析有多少个微任务；
          根据调用次序，确定宏任务中的微任务执行次序；
          根据宏任务的触发规则和调用次序，确定宏任务的执行次序；
          确定整个顺序。
        13.我们再来看一个稍微复杂的例子：
            function sleep(duration) {
                return new Promise(function(resolve, reject) {
                    console.log("b");
                    setTimeout(resolve,duration);
                })
            }
            console.log("a");
            sleep(5000).then(()=>console.log("c"));
        14.这是一段非常常用的封装方法，利用 Promise 把 setTimeout 封装成可以用于异步的函数。
        15.我们首先来看，setTimeout 把整个代码分割成了 2 个宏观任务，这里不论是 5 秒还是 0 秒，都是一样的。
        16.第一个宏观任务中，包含了先后同步执行的 console.log(“a”); 和 console.log(“b”);。
        17.setTimeout 后，第二个宏观任务执行调用了 resolve，然后 then 中的代码异步得到执行，所以调用了 console.log(“c”)，
          最终输出的顺序才是： a b c。
        18.Promise 是 JavaScript 中的一个定义，但是实际编写代码时，我们可以发现，它似乎并不比回调的方式书写更简单，但是从 ES6 
          开始，我们有了 async/await，这个语法改进跟 Promise 配合，能够有效地改善代码结构。
      11.新特性：async/await
        1.async/await 是 ES2016 新加入的特性，它提供了用 for、if 等代码结构来编写异步的方式。它的运行时基础是 Promise，面对
          这种比较新的特性，我们先来看一下基本用法。
        2.async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。
        3.async 函数是一种特殊语法，特征是在 function 关键字之前加上 async 关键字，这样，就定义了一个 async 函数，我们可以在
          其中使用 await 来等待一个 Promise。
            function sleep(duration) {
                return new Promise(function(resolve, reject) {
                    setTimeout(resolve,duration);
                })
            }
            async function foo(){
                console.log("a")
                await sleep(2000)
                console.log("b")
            }
        4.这段代码利用了我们之前定义的 sleep 函数。在异步函数 foo 中，我们调用 sleep。
        5.async 函数强大之处在于，它是可以嵌套的。我们在定义了一批原子操作的情况下，可以利用 async 函数组合出新的 async 函数。
          function sleep(duration) {
              return new Promise(function(resolve, reject) {
                  setTimeout(resolve,duration);
              })
          }
          async function foo(name){
              await sleep(2000)
              console.log(name)
          }
          async function foo2(){
              await foo("a");
              await foo("b");
          }
        6.这里 foo2 用 await 调用了两次异步函数 foo，可以看到，如果我们把 sleep 这样的异步操作放入某一个框架或者库中，使用者
          几乎不需要了解 Promise 的概念即可进行异步编程了。
        7.此外，generator/iterator 也常常被跟异步一起来讲，我们必须说明 generator/iterator 并非异步代码，只是在缺少
          async/await 的时候，一些框架（最著名的要数 co）使用这样的特性来模拟 async/await。
        8.但是 generator 并非被设计成实现异步，所以有了 async/await 之后，generator/iterator 来模拟异步的方法应该被废弃。
      12.结语
        1.在今天的文章里，我们学习了 JavaScript 执行部分的知识，首先我们学习了 JavaScript 的宏观任务和微观任务相关的知识。我们把
          宿主发起的任务称为宏观任务，把 JavaScript 引擎发起的任务称为微观任务。许多的微观任务的队列组成了宏观任务。
        2.除此之外，我们还展开介绍了用 Promise 来添加微观任务的方式，并且介绍了 async/await 这个语法的改进。
        3.最后，留给你一个小练习：我们现在要实现一个红绿灯，把一个圆形 div 按照绿色 3 秒，黄色 1 秒，红色 2 秒循环改变背景色，你会
          怎样编写这个代码呢？欢迎你留言讨论。
    6.JavaScript执行（二）：闭包和执行上下文到底是怎么回事？
      1.在上一课，我们了解了 JavaScript 执行中最粗粒度的任务：传给引擎执行的代码段。并且，我们还根据“由 JavaScript 引擎发起
        ”还是“由宿主发起”，分成了宏观任务和微观任务，接下来我们继续去看一看更细的执行粒度。
      2.一段 JavaScript 代码可能会包含函数调用的相关内容，从今天开始，我们就用两节课的时间来了解一下函数的执行。
      3.我们今天要讲的知识在网上有不同的名字，比较常见的可能有：
        闭包；
        作用域链；
        执行上下文；
        this 值。
      4.实际上，尽管它们是表示不同的意思的术语，所指向的几乎是同一部分知识，那就是函数执行过程相关的知识。我们可以简单看一下图。
        函数执行过程.png
      5.看着也许会有点晕，别着急，我会和你共同理一下它们之间的关系。
      6.当然，除了让你理解函数执行过程的知识，理清这些概念也非常重要。所以我们先来讲讲这个有点复杂的概念：闭包。
      7.闭包
        1.闭包翻译自英文单词 closure，这是个不太好翻译的词，在计算机领域，它就有三个完全不相同的意义：编译原理中，它是处理语法产
          生式的一个步骤；计算几何中，它表示包裹平面点集的凸多边形（翻译作凸包）；而在编程语言领域，它表示一种函数。
        2.闭包这个概念第一次出现在 1964 年的《The Computer Journal》上，由 P. J. Landin 在
          《The mechanical evaluation of expressions》一文中提出了 applicative expression 和 closure 的概念。
          闭包概念第一次出现.png
        3.在上世纪 60 年代，主流的编程语言是基于 lambda 演算的函数式编程语言，所以这个最初的闭包定义，使用了大量的函数式术语。一
          个不太精确的描述是“带有一系列信息的λ表达式”。对函数式语言而言，λ表达式其实就是函数。
        4.我们可以这样简单理解一下，闭包其实只是一个绑定了执行环境的函数，这个函数并不是印在书本里的一条简单的表达式，闭包与普通函
          数的区别是，它携带了执行的环境，就像人在外星中需要自带吸氧的装备一样，这个函数也带有在程序中生存的环境。
        5.这个古典的闭包定义中，闭包包含两个部分。
            环境部分
              环境
              标识符列表
            表达式部分
        6.当我们把视角放在 JavaScript 的标准中，我们发现，标准中并没有出现过 closure 这个术语，但是，我们却不难根据古典定义，
          在 JavaScript 中找到对应的闭包组成部分。
            环境部分
              环境：函数的词法环境（执行上下文的一部分）
              标识符列表：函数中用到的未声明的变量
            表达式部分：函数体
        7.至此，我们可以认为，JavaScript 中的函数完全符合闭包的定义。它的环境部分是函数词法环境部分组成，它的标识符列表是函数中
          用到的未声明变量，它的表达式部分就是函数体。
        8.这里我们容易产生一个常见的概念误区，有些人会把 JavaScript 执行上下文，或者作用域（Scope，ES3 中规定的执行上下文的一
          部分）这个概念当作闭包。
        9.实际上 JavaScript 中跟闭包对应的概念就是“函数”，可能是这个概念太过于普通，跟闭包看起来又没什么联系，所以大家才不自觉
          地把这个概念对应到了看起来更特别的“作用域”吧（其实我早年也是这么理解闭包，直到后来被朋友纠正，查了资料才改正过来）。
      8.执行上下文：执行的基础设施
        1.相比普通函数，JavaScript 函数的主要复杂性来自于它携带的“环境部分”。当然，发展到今天的 JavaScript，它所定义的环境部
          分，已经比当初经典的定义复杂了很多。
        2.JavaScript 中与闭包“环境部分”相对应的术语是“词法环境”，但是 JavaScript 函数比λ函数要复杂得多，我们还要处理 this、
          变量声明、with 等等一系列的复杂语法，λ函数中可没有这些东西，所以，在 JavaScript 的设计中，词法环境只是 JavaScript 
          执行上下文的一部分。
        3.JavaScript 标准把一段代码（包括函数），执行所需的所有信息定义为：“执行上下文”。
        4.因为这部分术语经历了比较多的版本和社区的演绎，所以定义比较混乱，这里我们先来理一下 JavaScript 中的概念。
        5.执行上下文在 ES3 中，包含三个部分。
          scope：作用域，也常常被叫做作用域链。
          variable object：变量对象，用于存储变量的对象。
          this value：this 值。
        6.在 ES5 中，我们改进了命名方式，把执行上下文最初的三个部分改为下面这个样子。
          lexical environment：词法环境，当获取变量时使用。
          variable environment：变量环境，当声明变量时使用。
          this value：this 值。
        7.在 ES2018 中，执行上下文又变成了这个样子，this 值被归入 lexical environment，但是增加了不少内容。
          lexical environment：词法环境，当获取变量或者 this 值时使用。
          variable environment：变量环境，当声明变量时使用。
          code evaluation state：用于恢复代码执行位置。
          Function：执行的任务是函数时使用，表示正在被执行的函数。
          ScriptOrModule：执行的任务是脚本或者模块时使用，表示正在被执行的代码。
          Realm：使用的基础库和内置对象实例。
          Generator：仅生成器上下文有这个属性，表示当前生成器。
        8.我们在这里介绍执行上下文的各个版本定义，是考虑到你可能会从各种网上的文章中接触这些概念，如果不把它们理清楚，我们就很难分
          辨对错。如果是我们自己使用，我建议统一使用最新的 ES2018 中规定的术语定义。
        9.尽管我们介绍了这些定义，但我并不打算按照 JavaScript 标准的思路，从实现的角度去介绍函数的执行过程，这是不容易被理解的。
        10.我想试着从代码实例出发，跟你一起推导函数执行过程中需要哪些信息，它们又对应着执行上下文中的哪些部分。
        11.比如，我们看以下的这段 JavaScript 代码：
          var b = {}
          let c = 1
          this.a = 2;
        12.要想正确执行它，我们需要知道以下信息：
          1.var 把 b 声明到哪里；
          2.b 表示哪个变量；
          3.b 的原型是哪个对象；
          4.let 把 c 声明到哪里；
          5.this 指向哪个对象。
        13.这些信息就需要执行上下文来给出了，这段代码出现在不同的位置，甚至在每次执行中，会关联到不同的执行上下文，所以，同样的代
          码会产生不一样的行为。
        14.在这两篇文章中，我会基本覆盖执行上下文的组成部分，本篇我们先讲 var 声明与赋值，let，realm 三个特性来分析上下文提供的
          信息，分析执行上下文中提供的信息。
      9.var 声明与赋值
        1.我们来分析一段代码：
          var b = 1
        2.通常我们认为它声明了 b，并且为它赋值为 1，var 声明作用域函数执行的作用域。也就是说，var 会穿透 for 、if 等语句。
        3.在只有 var，没有 let 的旧 JavaScript 时代，诞生了一个技巧，叫做：立即执行的函数表达式（IIFE），通过创建一个函数，并
          且立即执行，来构造一个新的域，从而控制 var 的范围。
        4.由于语法规定了 function 关键字开头是函数声明，所以要想让函数变成函数表达式，我们必须得加点东西，最常见的做法是加括号。
            (function(){
                var a;
                //code
            }());
            (function(){
                var a;
                //code
            })();
        5.但是，括号有个缺点，那就是如果上一行代码不写分号，括号会被解释为上一行代码最末的函数调用，产生完全不符合预期，并且难以调
          试的行为，加号等运算符也有类似的问题。所以一些推荐不加分号的代码风格规范，会要求在括号前面加上分号。
            ;(function(){
                var a;
                //code
            }())
            ;(function(){
                var a;
                //code
            })()
        6.我比较推荐的写法是使用 void 关键字。也就是下面的这种形式。
            void function(){
                var a;
                //code
            }();
        7.这有效避免了语法问题，同时，语义上 void 运算表示忽略后面表达式的值，变成 undefined，我们确实不关心 IIFE 的返回值，
          所以语义也更为合理。
        8.值得特别注意的是，有时候 var 的特性会导致声明的变量和被赋值的变量是两个 b，JavaScript 中有特例，那就是使用 with 的
          时候：
            var b;
            void function(){
                var env = {b:1};
                b = 2;
                console.log("In function b:", b);
                with(env) {
                    var b = 3;
                    console.log("In with b:", b);
                }
            }();
            console.log("Global b:", b);
        9.在这个例子中，我们利用立即执行的函数表达式（IIFE）构造了一个函数的执行环境，并且在里面使用了我们一开头的代码。
        10.可以看到，在 Global function with 三个环境中，b 的值都不一样，而在 function 环境中，并没有出现 var b，这说明
          with 内的 var b 作用到了 function 这个环境当中。
        11.var b = {} 这样一句对两个域产生了作用，从语言的角度是个非常糟糕的设计，这也是一些人坚定地反对在任何场景下使用 with 
          的原因之一。
      10.let
        1.let 是 ES6 开始引入的新的变量声明模式，比起 var 的诸多弊病，let 做了非常明确的梳理和规定。
        2.为了实现 let，JavaScript 在运行时引入了块级作用域。也就是说，在 let 出现之前，JavaScript 的 if for 等语句皆不产
          生作用域。
        3.我简单统计了下，以下语句会产生 let 使用的作用域：
          for；
          if；
          switch；
          try/catch/finally。
      11.Realm
        1.在最新的标准（9.0）中，JavaScript 引入了一个新概念 Realm，它的中文意思是“国度”“领域”“范围”。这个英文的用法就有点比
          喻的意思，几个翻译都不太适合 JavaScript 语境，所以这里就不翻译啦。
        2.我们继续来看这段代码：
          var b = {}
        3.在 ES2016 之前的版本中，标准中甚少提及{}的原型问题。但在实际的前端开发中，通过 iframe 等方式创建多 window 环境并非罕
          见的操作，所以，这才促成了新概念 Realm 的引入。
        4.Realm 中包含一组完整的内置对象，而且是复制关系。
        5.对不同 Realm 中的对象操作，会有一些需要格外注意的问题，比如 instanceOf 几乎是失效的。
        6.以下代码展示了在浏览器环境中获取来自两个 Realm 的对象，它们跟本土的 Object 做 instanceOf 时会产生差异：
            var iframe = document.createElement('iframe')
            document.documentElement.appendChild(iframe)
            iframe.src="javascript:var b = {};"
            var b1 = iframe.contentWindow.b;
            var b2 = {};
            console.log(typeof b1, typeof b2); //object object
            console.log(b1 instanceof Object, b2 instanceof Object); //false true
        7.可以看到，由于 b1、 b2 由同样的代码“ {} ”在不同的 Realm 中执行，所以表现出了不同的行为。
      12.结语
        1.在今天的课程中，我帮你梳理了一些概念：有编程语言的概念闭包，也有各个版本中的 JavaScript 标准中的概念：执行上下文、作
          用域、this 值等等。
        2.之后我们又从代码的角度，分析了一些执行上下文中所需要的信息，并从var、let、对象字面量等语法中，推导出了词法作用域、变量
          作用域、Realm的设计。
        3.最后留给你一个问题：你喜欢使用 let 还是 var？听过今天的课程，你的想法是否有改变呢？为什么？
    7.JavaScript执行（三）：你知道现在有多少种函数吗？
      1.在前一篇文章中，我们大致了解了执行上下文是什么，也知道了任何语句的执行都会依赖特定的上下文。
      2.一旦上下文被切换，整个语句的效果可能都会发生改变。那么，切换上下文的时机就显得非常重要了。
      3.在 JavaScript，切换上下文最主要的场景是函数调用。在这一课，我们就来讲讲函数调用切换上下文的事情。我们在讲函数调用之前，
        首先来认识一下函数家族。
      4.函数
        1.在 ES2018 中，函数已经是一个很复杂的体系了，我在这里整理了一下。
        2.第一种，普通函数：用 function 关键字定义的函数。
          示例：
            function foo (){ 
              // code
            }
        3.第二种，箭头函数：用 => 运算符定义的函数。
          示例:
            const foo = () => { 
              // code
            }
        4.第三种，方法：在 class 中定义的函数。
          示例：
            class C {
                foo(){
                    //code
                }
            }
        5.第四种，生成器函数：用 function * 定义的函数。
          示例：
            function* foo(){
                // code
            }
        6.第五种，类：用 class 定义的类，实际上也是函数。
          示例：
            class Foo {
                constructor(){
                    //code
                }
            }
        7.第六 / 七 / 八种，异步函数：普通函数、箭头函数和生成器函数加上 async 关键字。
          示例：
            async function foo(){
                // code
            }
            const foo = async () => {
                // code
            }
            async function foo*(){
                // code
            }
        8.ES6 以来，大量加入的新语法极大地方便了我们编程的同时，也增加了很多我们理解的心智负担。要想认识这些函数的执行上下文切换，
          我们必须要对它们行为上的区别有所了解。
        9.对普通变量而言，这些函数并没有本质区别，都是遵循了“继承定义时环境”的规则，它们的一个行为差异在于 this 关键字。
        10.那么，this 关键字是什么呢，我们一起来看一看。
      5.this 关键字的行为
        1.this 是 JavaScript 中的一个关键字，它的使用方法类似于一个变量（但是 this 跟变量的行为有很多不同，上一节课我们讲了一
          些普通变量的行为和机制，也就是 var 声明和赋值、let 的内容）。
        2.this 是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的 this 值也不同，我们看一个例子：
            function showThis(){
                console.log(this);
            }
            var o = {
                showThis: showThis
            }
            showThis(); // global
            o.showThis(); // o
        3.在这个例子中，我们定义了函数 showThis，我们把它赋值给一个对象 o 的属性，然后尝试分别使用两个引用来调用同一个函数，结果
          得到了不同的 this 值。
        4.普通函数的 this 值由“调用它所使用的引用”决定，其中奥秘就在于：我们获取函数的表达式，它实际上返回的并非函数本身，而是一个
          Reference 类型（记得我们在类型一章讲过七种标准类型吗，正是其中之一）。
        5.Reference 类型由两部分组成：一个对象和一个属性值。不难理解 o.showThis 产生的 Reference 类型，即由对象 o 和属性
          “showThis”构成。
        6.当做一些算术运算（或者其他运算时），Reference 类型会被解引用，即获取真正的值（被引用的内容）来参与运算，而类似函数调用、
          delete 等操作，都需要用到 Reference 类型中的对象。
        7.在这个例子中，Reference 类型中的对象被当作 this 值，传入了执行函数时的上下文当中。
        8.至此，我们对 this 的解释已经非常清晰了：调用函数时使用的引用，决定了函数执行时刻的 this 值。
        9.实际上从运行时的角度来看，this 跟面向对象毫无关联，它是与函数调用时使用的表达式相关。
        10.这个设计来自 JavaScript 早年，通过这样的方式，巧妙地模仿了 Java 的语法，但是仍然保持了纯粹的“无类”运行时设施。
        11.如果，我们把这个例子稍作修改，换成箭头函数，结果就不一样了：
            const showThis = () => {
                console.log(this);
            }
            var o = {
                showThis: showThis
            }
            showThis(); // global
            o.showThis(); // global
        12.我们看到，改为箭头函数后，不论用什么引用来调用它，都不影响它的 this 值。
        13.接下来我们看看“方法”，它的行为又不一样了：
            class C {
                showThis() {
                    console.log(this);
                }
            }
            var o = new C();
            var showThis = o.showThis;
            showThis(); // undefined
            o.showThis(); // o
        14.这里我们创建了一个类 C，并且实例化出对象 o，再把 o 的方法赋值给了变量 showThis。
        15.这时候，我们使用 showThis 这个引用去调用方法时，得到了 undefined。
        16.所以，在方法中，我们看到 this 的行为也不太一样，它得到了 undefined 的结果。
        17.按照我们上面的方法，不难验证出：生成器函数、异步生成器函数和异步普通函数跟普通函数行为是一致的，异步箭头函数与箭头函数
          行为是一致的。
      6.this 关键字的机制
        1.说完了 this 行为，我们再来简单谈谈在 JavaScript 内部，实现 this 这些行为的机制，让你对这部分知识有一个大概的认知。
        2.函数能够引用定义时的变量，如上文分析，函数也能记住定义时的 this，因此，函数内部必定有一个机制来保存这些信息。
        3.在 JavaScript 标准中，为函数规定了用来保存定义时上下文的私有属性[[Environment]]。
        4.当一个函数执行时，会创建一条新的执行环境记录，记录的外层词法环境（outer lexical environment）会被设置成函数的
          [[Environment]]。
        5.这个动作就是切换上下文了，我们假设有这样的代码：
            var a = 1;
            foo();
            // 在别处定义了foo：
            var b = 2;
            function foo(){
                console.log(b); // 2
                console.log(a); // error
            }
        6.这里的 foo 能够访问 b（定义时词法环境），却不能访问 a（执行时的词法环境），这就是执行上下文的切换机制了。
        7.JavaScript 用一个栈来管理执行上下文，这个栈中的每一项又包含一个链表。如下图所示：
          执行上下文栈.jpg
        8.当函数调用时，会入栈一个新的执行上下文，函数调用结束时，执行上下文被出栈。
        9.而 this 则是一个更为复杂的机制，JavaScript 标准定义了 [[thisMode]] 私有属性。
        10.[[thisMode]] 私有属性有三个取值。
          lexical：表示从上下文中找 this，这对应了箭头函数。
          global：表示当 this 为 undefined 时，取全局对象，对应了普通函数。
          strict：当严格模式时使用，this 严格按照调用时传入的值，可能为 null 或者 undefined。
        11.非常有意思的是，方法的行为跟普通函数有差异，恰恰是因为 class 设计成了默认按 strict 模式执行。
        12.我们可以用 strict 达成与上一节中方法的例子一样的效果:
            "use strict"
            function showThis(){
                console.log(this);
            }
            var o = {
                showThis: showThis
            }
            showThis(); // undefined
            o.showThis(); // o
        13.函数创建新的执行上下文中的词法环境记录时，会根据[[thisMode]]来标记新纪录的[[ThisBindingStatus]]私有属性。
        14.代码执行遇到 this 时，会逐层检查当前词法环境记录中的[[ThisBindingStatus]]，当找到有 this 的环境记录时获取 
          this 的值。
        15.这样的规则的实际效果是，嵌套的箭头函数中的代码都指向外层 this，例如：
            var o = {}
            o.foo = function foo(){
                console.log(this);
                return () => {
                    console.log(this);
                    return () => console.log(this);
                }
            }
            o.foo()()(); // o, o, o
        16.这个例子中，我们定义了三层嵌套的函数，最外层为普通函数，两层都是箭头函数。
        17.这里调用三个函数，获得的 this 值是一致的，都是对象 o。
        18.JavaScript 还提供了一系列函数的内置方法来操纵 this 值，下面我们来了解一下。
      7.操作 this 的内置函数
        1.Function.prototype.call 和 Function.prototype.apply 可以指定函数调用时传入的 this 值，示例如下：
            function foo(a, b, c){
                console.log(this);
                console.log(a, b, c);
            }
            foo.call({}, 1, 2, 3);
            foo.apply({}, [1, 2, 3]);
        2.这里 call 和 apply 作用是一样的，只是传参方式有区别。
        3.此外，还有 Function.prototype.bind 它可以生成一个绑定过的函数，这个函数的 this 值固定了参数：
            function foo(a, b, c){
                console.log(this);
                console.log(a, b, c);
            }
            foo.bind({}, 1, 2, 3)();
        4.有趣的是，call、bind 和 apply 用于不接受 this 的函数类型如箭头、class 都不会报错。
        5.这时候，它们无法实现改变 this 的能力，但是可以实现传参。
      8.结语
        1.在这一节课程中，我们认识了 ES2018 中规定的各种函数，我一共简单介绍了 8 种函数。
        2.我们围绕 this 这个中心，介绍了函数的执行上下文切换机制。同时我们还讲解了 this 中的一些相关知识。包括了操作 this 的内
          置函数。
        3.最后，留给你一个问题，你在日常开发中用过哪些函数类型呢？欢迎给我留言，我们一起讨论。
      9.补充阅读：new 与 this
        1.我们在之前的对象部分已经讲过 new 的执行过程，我们再来看一下：
          以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；
          将 this 和调用参数传给构造器，执行；
          如果构造器返回的是对象，则返回，否则返回第一步创建的对象。
        2.显然，通过 new 调用函数，跟直接调用的 this 取值有明显区别。那么我们今天讲的这些函数跟 new 搭配又会产生什么效果呢？
        3.这里我整理了一张表：
          new调用不同函数.png
        4.我们可以看到，仅普通函数和类能够跟 new 搭配使用，这倒是给我们省去了不少麻烦。
    8.JavaScript执行（四）：try里面放return，finally还会执行吗？
      1.在前面几篇文章中，我们已经了解了关于执行上下文、作用域、闭包之间的关系。
      2.今天，我们则要说一说更为细节的部分：语句。
      3.语句是任何编程语言的基础结构，与 JavaScript 对象一样，JavaScript 语句同样具有“看起来很像其它语言，但是其实一点都不一样”
        的特点。
      4.我们比较常见的语句包括变量声明、表达式、条件、循环等，这些都是大家非常熟悉的东西，对于它们的行为，我在这里就不赘述了。
      5.为了了解 JavaScript 语句有哪些特别之处，首先我们要看一个不太常见的例子，我会通过这个例子，来向你介绍 JavaScript 语句执
        行机制涉及的一种基础类型：Completion 类型。
      6.Completion 类型
        1.我们来看一个例子。在函数 foo 中，使用了一组 try 语句。我们可以先来做一个小实验，在 try 中有 return 语句，finally 
          中的内容还会执行吗？我们来看一段代码。
            function foo(){
              try{
                return 0;
              } catch(err) {

              } finally {
                console.log("a")
              }
            }
            console.log(foo());
        2.通过实际试验，我们可以看到，finally 确实执行了，而且 return 语句也生效了，foo() 返回了结果 0。
        3.虽然 return 执行了，但是函数并没有立即返回，又执行了 finally 里面的内容，这样的行为违背了很多人的直觉。
        4.如果在这个例子中，我们在 finally 中加入 return 语句，会发生什么呢？
            function foo(){
              try{
                return 0;
              } catch(err) {

              } finally {
                return 1;
              }
            }
            console.log(foo());
        5.通过实际执行，我们看到，finally 中的 return “覆盖”了 try 中的 return。在一个函数中执行了两次 return，这已经超出
          了很多人的常识，也是其它语言中不会出现的一种行为。
        6.面对如此怪异的行为，我们当然可以把它作为一个孤立的知识去记忆，但是实际上，这背后有一套机制在运作。
        7.这一机制的基础正是 JavaScript 语句执行的完成状态，我们用一个标准类型来表示：Completion Record（我在类型一节提到过，
          Completion Record 用于描述异常、跳出等语句执行过程）。
        8.Completion Record 表示一个语句执行完之后的结果，它有三个字段：
          [[type]] 表示完成的类型，有 break continue return throw 和 normal 几种类型；
          [[value]] 表示语句的返回值，如果语句没有，则是 empty；
          [[target]] 表示语句的目标，通常是一个 JavaScript 标签（标签在后文会有介绍）。
        9.JavaScript 正是依靠语句的 Completion Record 类型，方才可以在语句的复杂嵌套结构中，实现各种控制。接下来我们要来了解
          一下 JavaScript 使用 Completion Record 类型，控制语句执行的过程。
      7.首先我们来看看语句有几种分类。
        语句分类.jpg
        1.普通的语句
          1.在 JavaScript 中，我们把不带控制能力的语句称为普通语句。普通语句有下面几种。
            声明类语句
              var 声明
              const 声明
              let 声明
              函数声明
              类声明
            表达式语句
            空语句
            debugger 语句
          2.这些语句在执行时，从前到后顺次执行（我们这里先忽略 var 和函数声明的预处理机制），没有任何分支或者重复执行逻辑。
          3.普通语句执行后，会得到 [[type]] 为 normal 的 Completion Record，JavaScript 引擎遇到这样的 
            Completion Record，会继续执行下一条语句。
          4.这些语句中，只有表达式语句会产生 [[value]]，当然，从引擎控制的角度，这个 value 并没有什么用处。
          5.如果你经常使用 Chrome 自带的调试工具，可以知道，输入一个表达式，在控制台可以得到结果，但是在前面加上 var，就变成了
            undefined。
              控制台结果.png
          6.Chrome 控制台显示的正是语句的 Completion Record 的[[value]]。
        2.语句块
          1.介绍完了普通语句，我们再来介绍一个比较特殊的语句：语句块。
          2.语句块就是拿大括号括起来的一组语句，它是一种语句的复合结构，可以嵌套。
          3.语句块本身并不复杂，我们需要注意的是语句块内部的语句的 Completion Record 的[[type]] 如果不为 normal，会打断语句
            块后续的语句执行。
          4.比如我们考虑，一个[[type]]为 return 的语句，出现在一个语句块中的情况。
          5.从语句的这个 type 中，我们大概可以猜到它由哪些特定语句产生，我们就来说说最开始的例子中的 return。
          6.return 语句可能产生 return 或者 throw 类型的 Completion Record。我们来看一个例子。
          7.先给出一个内部为普通语句的语句块：
            {
              var i = 1; // normal, empty, empty
              i ++; // normal, 1, empty
              console.log(i) //normal, undefined, empty
            } // normal, undefined, empty
          8.在每一行的注释中，我给出了语句的 Completion Record。
          9.我们看到，在一个 block 中，如果每一个语句都是 normal 类型，那么它会顺次执行。接下来我们加入 return 试试看。
            {
              var i = 1; // normal, empty, empty
              return i; // return, 1, empty
              i ++; 
              console.log(i)
            } // return, 1, empty
          10.但是假如我们在 block 中插入了一条 return 语句，产生了一个非 normal 记录，那么整个 block 会成为非 normal。这个
            结构就保证了非 normal 的完成类型可以穿透复杂的语句嵌套结构，产生控制效果。
          11.接下来我们就具体讲讲控制类语句。
        3.控制型语句
          1.控制型语句带有 if、switch 关键字，它们会对不同类型的 Completion Record 产生反应。
          2.控制类语句分成两部分，一类是对其内部造成影响，如 if、switch、while/for、try。
          3.另一类是对外部造成影响如 break、continue、return、throw，这两类语句的配合，会产生控制代码执行顺序和执行逻辑的效
            果，这也是我们编程的主要工作。
          4.一般来说， for/while - break/continue 和 try - throw 这样比较符合逻辑的组合，是大家比较熟悉的，但是，实际上，
            我们需要控制语句跟 break 、continue 、return 、throw 四种类型与控制语句两两组合产生的效果。
              控制语句跟中断类型结合效果.png
          5.通过这个表，我们不难发现知识的盲点，也就是我们最初的的 case 中的 try 和 return 的组合了。
          6.因为 finally 中的内容必须保证执行，所以 try/catch 执行完毕，即使得到的结果是非 normal 型的完成记录，也必须要执
            行 finally。
          7.而当 finally 执行也得到了非 normal 记录，则会使 finally 中的记录作为整个 try 结构的结果。
        4.带标签的语句
          1.前文我重点讲了 type 在语句控制中的作用，接下来我们重点来讲一下最后一个字段：target，这涉及了 JavaScript 中的一个
            语法，带标签的语句。
          2.实际上，任何 JavaScript 语句是可以加标签的，在语句前加冒号即可：
            firstStatement: var i = 1;
          3.大部分时候，这个东西类似于注释，没有任何用处。唯一有作用的时候是：与完成记录类型中的 target 相配合，用于跳出多层循环。
              outer: while(true) {
                inner: while(true) {
                    break outer;
                }
              }
              console.log("finished")
          4.break/continue 语句如果后跟了关键字，会产生带 target 的完成记录。一旦完成记录带了 target，那么只有拥有对应 
            label 的循环语句会消费它。
      8.结语
        1.我们以 Completion Record 类型为线索，为你讲解了 JavaScript 语句执行的原理。
        2.因为 JavaScript 语句存在着嵌套关系，所以执行过程实际上主要在一个树形结构上进行， 树形结构的每一个节点执行后产生 
          Completion Record，根据语句的结构和 Completion Record，JavaScript 实现了各种分支和跳出逻辑。
        3.你遇到哪些语句中的执行的实际效果，是跟你想象的有所出入呢，你可以给我留言，我们一起讨论。
    9.JavaScript词法：为什么12.toString会报错？
      1.在前面的文章中，我们已经从运行时的角度了解过 JavaScript 的知识内容，在接下来的几节课，我们来了解一下 JavaScript 的文
        法部分。
      2.文法是编译原理中对语言的写法的一种规定，一般来说，文法分成词法和语法两种。
      3.词法规定了语言的最小语义单元：token，可以翻译成“标记”或者“词”，在我的专栏文章中，我统一把 token 翻译成词。
      4.从字符到词的整个过程是没有结构的，只要符合词的规则，就构成词，一般来说，词法设计不会包含冲突。词法分析技术上可以使用状态机
        或者正则表达式来进行，我们的课程主要是学习词法，关于它们实现的细节就不多谈了。
      5.概述
        1.我们先来看一看 JavaScript 的词法定义。JavaScript 源代码中的输入可以这样分类：
          WhiteSpace 空白字符
          LineTerminator 换行符
          Comment 注释
          Token 词
            IdentifierName 标识符名称，典型案例是我们使用的变量名，注意这里关键字也包含在内了。
            Punctuator 符号，我们使用的运算符和大括号等符号。
            NumericLiteral 数字直接量，就是我们写的数字。
            StringLiteral 字符串直接量，就是我们用单引号或者双引号引起来的直接量。
            Template 字符串模板，用反引号` 括起来的直接量。
        2.这个设计符合比较通用的编程语言设计方式，不过，JavaScript 中有一些特别之处，我下面就来讲讲特别在哪里。
        3.首先是除法和正则表达式冲突问题。我们都知道，JavaScript 不但支持除法运算符“ / ”和“ /= ”，还支持用斜杠括起来的正则表
          达式“ /abc/ ”。
        4.但是，这时候对词法分析来说，其实是没有办法处理的，所以 JavaScript 的解决方案是定义两组词法，然后靠语法分析传一个标志
          给词法分析器，让它来决定使用哪一套词法。
        5.JavaScript 词法的另一个特别设计是字符串模板，模板语法大概是这样的：
          `Hello, ${name}`
        6.理论上，“ ${ } ”内部可以放任何 JavaScript 表达式代码，而这些代码是以“ } ” 结尾的，也就是说，这部分词法不允许出现
          “ } ”运算符。
        7.是否允许“ } ”的两种情况，与除法和正则表达式的两种情况相乘就是四种词法定义，所以你在 JavaScript 标准中，可以看到四种
          定义：
            InputElementDiv；
            InputElementRegExp；
            InputElementRegExpOrTemplateTail；
            InputElementTemplateTail。
        8.为了解决这两个问题，标准中还不得不把除法、正则表达式直接量和“ } ”从 token 中单独抽出来，用词上，也把原本的 Token 改
          为 CommonToken。
        9.但是我认为，从理解的角度上出发，我们不应该受到影响，所以在本课，我们依然把它们归类到 token 来理解。
        10.对一般的语言的词法分析过程来说，都会丢弃除了 token 之外的输入，但是对 JavaScript 来说，不太一样，换行符和注释还会影
          响语法分析过程，这个我们将会在语法部分给你详细讲解（所以要实现 JavaScript 的解释器，词法分析和语法分析非常麻烦，需要来
          回传递信息）。
        11.接下来我来给你详细介绍一下。
      6.空白符号 Whitespace
        1.说起空白符号，想必给大家留下的印象就是空格，但是实际上，JavaScript 可以支持更多空白符号。
          1.<HT>(或称<TAB>)是 U+0009，是缩进 TAB 符，也就是字符串中写的 \t 。
          2.是<VT> U+000B，也就是垂直方向的 TAB 符 \v，这个字符在键盘上很难打出来，所以很少用到。
          3.<FF>是 U+000C，Form Feed，分页符，字符串直接量中写作 \f ，现代已经很少有打印源程序的事情发生了，所以这个字符在 
            JavaScript 源代码中很少用到。
          4.<SP>是 U+0020，就是最普通的空格了。
          5.<NBSP>是 U+00A0，非断行空格，它是 SP 的一个变体，在文字排版中，可以避免因为空格在此处发生断行，其它方面和普通空格
            完全一样。多数的 JavaScript 编辑环境都会把它当做普通空格（因为一般源代码编辑环境根本就不会自动折行……）。HTML 中，
            很多人喜欢用的 &nbsp; 最后生成的就是它了。
          6.<ZWNBSP>(旧称<BOM>) 是 U+FEFF，这是 ES5 新加入的空白符，是 Unicode 中的零宽非断行空格，在以 UTF 格式编码的文
            件中，常常在文件首插入一个额外的 U+FEFF，解析 UTF 文件的程序可以根据 U+FEFF 的表示方法猜测文件采用哪种 UTF 编码
            方式。这个字符也叫做“bit order mark”。
        2.此外，JavaScript 支持所有的 Unicode 中的空格分类下的空格，我们可以看下表： 
          空格字符分类.png
        3.很多公司的编码规范要求 JavaScript 源代码控制在 ASCII 范围内，那么，就只有<TAB><VT><FF><SP><NBSP>五种空白可用了。
      7.换行符 LineTerminator
        1.接下来我们来看看换行符，JavaScript 中只提供了 4 种字符作为换行符。
          <LF>
          <CR>
          <LS>
          <PS>
        2.其中，<LF> 是 U+000A，就是最正常换行符，在字符串中的\n。
        3. <CR> 是 U+000D，这个字符真正意义上的“回车”，在字符串中是\r，在一部分 Windows 风格文本编辑器中，换行是两个字符\r\n。
        4. <LS> 是 U+2028，是 Unicode 中的行分隔符。是 U+2029，是 Unicode 中的段落分隔符。
        5.大部分 LineTerminator 在被词法分析器扫描出之后，会被语法分析器丢弃，但是换行符会影响 JavaScript 的两个重要语法特性：
          自动插入分号和“no line terminator”规则。
      8.注释 Comment
        1.JavaScript 的注释分为单行注释和多行注释两种：
          /* MultiLineCommentChars */ 
          // SingleLineCommentChars
        2.多行注释中允许自由地出现MultiLineNotAsteriskChar，也就是除了*之外的所有字符。而每一个*之后，不能出现正斜杠符/。
        3.除了四种 LineTerminator 之外，所有字符都可以作为单行注释。
        4.我们需要注意，多行注释中是否包含换行符号，会对 JavaScript 语法产生影响，对于“no line terminator”规则来说，带换行的
          多行注释与换行符是等效的。
      9.标识符名称 IdentifierName
        1.IdentifierName可以以美元符“$”、下划线“_”或者 Unicode 字母开始，除了开始字符以外，IdentifierName中还可以使用
          Unicode 中的连接标记、数字、以及连接符号。
        2.IdentifierName的任意字符可以使用 JavaScript 的 Unicode 转义写法，使用 Unicode 转义写法时，没有任何字符限制。
        3.IdentifierName可以是Identifier、NullLiteral、BooleanLiteral或者keyword，在ObjectLiteral中，IdentifierName
          还可以被直接当做属性名称使用。
        4.仅当不是保留字的时候，IdentifierName会被解析为Identifier。
        5.注意 <ZWNJ> 和 <ZWJ> 是 ES5 新加入的两个格式控制字符，它们都是 0 宽的。
        6.我在前面提到了，关键字也属于这个部分，在 JavaScript 中，关键字有:
          await break case catch class const continue debugger default delete do else export extends finally 
          for function if import ininstance of new return super switch this throw try typeof var void while 
          with yield
        7.除了上述的内容之外，还有 1 个为了未来使用而保留的关键字:
          enum
        8.在严格模式下, 有一些额外的为未来使用而保留的关键字:
          implements package protected interface private public
        9.除了这些之外，NullLiteral（null）和BooleanLiteral（true false）也是保留字，不能用于Identifier。
      10.符号 Punctuator
        1.因为前面提到的除法和正则问题, / 和 /= 两个运算符被拆分为 DivPunctuator，因为前面提到的字符串模板问题，}也被独立拆
          分。加在一起，所有符号为：
            { ( ) [ ] . ... ; , < > <= >= == != === !== + - * % ** ++ -- << >> >>> & | ^ ! ~ && || ? : = += 
            -= *= %= **= <<= >>= >>>= &= |= ^= => / /= }
      11.数字直接量 NumericLiteral
        1.我们来看看今天标题提出的问题，JavaScript 规范中规定的数字直接量可以支持四种写法：十进制数、二进制整数、八进制整数和十
          六进制整数。
        2.十进制的 Number 可以带小数，小数点前后部分都可以省略，但是不能同时省略，我们看几个例子：
          .01
          12.
          12.01
        3.这都是合法的数字直接量。这里就有一个问题，也是我们标题提出的问题，我们看一段代码：
          12.toString()
        4.这时候12. 会被当做省略了小数点后面部分的数字而看成一个整体，所以我们要想让点单独成为一个 token，就要加入空格，这样写：
          12 .toString()
        5.数字直接量还支持科学计数法，例如：
          10.24E+2
          10.24e-2
          10.24e2
        6.这里 e 后面的部分，只允许使用整数。当以0x 0b 或者0o 开头时，表示特定进制的整数：
          0xFA
          0o73
          0b10000
        7.上面这几种进制都不支持小数，也不支持科学计数法。
      12.字符串直接量 StringLiteral
        1.JavaScript 中的 StringLiteral 支持单引号和双引号两种写法。
          " DoubleStringCharacters "
          ' SingleStringCharacters '
        2.单双引号的区别仅仅在于写法，在双引号字符串直接量中，双引号必须转义，在单引号字符串直接量中，单引号必须转义。字符串中其他
          必须转义的字符是\和所有换行符。
        3.JavaScript 中支持四种转义形式，还有一种虽然标准没有定义，但是大部分实现都支持的八进制转义。
        4.第一种是单字符转义。 即一个反斜杠\后面跟一个字符这种形式。
        5.有特别意义的字符包括有SingleEscapeCharacter所定义的 9 种，见下表：
            有特别意义的字符.png
        6.除了这 9 种字符、数字、x 和 u 以及所有的换行符之外，其它字符经过\转义后都是自身。
      13.正则表达式直接量 RegularExpressionLiteral
        1.正则表达式由 Body 和 Flags 两部分组成，例如：
          /RegularExpressionBody/g
        2.其中 Body 部分至少有一个字符，第一个字符不能是 *（因为 /* 跟多行注释有词法冲突）。
        3.正则表达式有自己的语法规则，在词法阶段，仅会对它做简单解析。
        4.正则表达式并非机械地见到/就停止，在正则表达式[ ]中的/就会被认为是普通字符。我们可以看一个例子：
          /[/]/.test("/");
        5.除了\、/ 和[ 三个字符之外，JavaScript 正则表达式中的字符都是普通字符。
        6.用\和一个非换行符可以组成一个转义，[ ]中也支持转义。正则表达式中的 flag 在词法阶段不会限制字符。
        7.虽然只有 ig 几个是有效的，但是任何 IdentifierPart（Identifier 中合法的字符）序列在词法阶段都会被认为是合法的。
      14.字符串模板 Template
        1.从语法结构上，Template 是个整体，其中的 ${ } 是并列关系。
        2.但是实际上，在 JavaScript 词法中，包含 ${ } 的 Template，是被拆开分析的，如：
          `a${b}c${d}e`
        3.它在 JavaScript 中被认为是：
          `a${
          b
          }c${
          d
          }e`
        4.它被拆成了五个部分：
          `a${ 这个被称为模板头
          }c${ 被称为模板中段
          }e` 被称为模板尾
          b 和 d 都是普通标识符
        5.实际上，这里的词法分析过程已经跟语法分析深度耦合了。
        6.不过我们学习的时候，大可不必按照标准和引擎工程师这样去理解，可以认为模板就是一个由反引号括起来的、可以在中间插入代码的字
          符串。
        7.模板支持添加处理函数的写法，这时模板的各段会被拆开，传递给函数当参数：
          function f(){
              console.log(arguments);
          }
          var a = "world"
          f`Hello ${a}!`; // [["Hello", "!"], world]
        8.模板字符串不需要关心大多数字符的转义，但是至少 ${ 和 ` 还是需要处理的。
        9.模板中的转义跟字符串几乎完全一样，都是使用 \。
      15.总结
        1.今天我们一起学习 JavaScript 的词法部分，这部分的内容包括了空白符号、换行符、注释、标识符名称、符号、数字直接量、字符
          串直接量、正则表达式直接量、字符串模板。掌握词法对我们平时调试代码至关重要。
        2.最后，给你留一个问题：用零宽空格和零宽连接符、零宽非连接符，写一段好玩的代码。你可以给我留言，我们一起讨论。
    10.（小实验）理解编译原理：一个四则运算的解释器
      1.在前面的课程中，我在 JavaScript 和 CSS 的部分，多次提到了编译原理相关的知识。这一部分的知识，如果我们从编译原理“龙书”
        等正规的资料中学习，就会耗费掉不少的时间，所以我在这里设计了一个小实验，帮助你快速理解编译原理相关的知识。
      2.今天的内容比较特殊，我们来做一段详细的代码实验，详细的代码我放在了文章里，如果你正在收听音频，可以点击文章查看详情。
      3.分析
        1.按照编译原理相关的知识，我们来设计一下工作，这里我们分成几个步骤。
          定义四则运算：产出四则运算的词法定义和语法定义。
          词法分析：把输入的字符串流变成 token。
          语法分析：把 token 变成抽象语法树 AST。
          解释执行：后序遍历 AST，执行得出结果。
      4.定义四则运算
        1.四则运算就是加减乘除四种运算，例如：
          1 + 2 * 3
        2.首先我们来定义词法，四则运算里面只有数字和运算符，所以定义很简单，但是我们还要注意空格和换行符，所以词法定义大概是下面
          这样的。  
          Token
            Number: 1 2 3 4 5 6 7 8 9 0 的组合
            Operator: + 、-、 *、 / 之一
          Whitespace: <SP>
          LineTerminator：<LF> <CR>
        3.这里我们对空白和换行符没有任何的处理，所以词法分析阶段会直接丢弃。
        4.接下来我们来定义语法，语法定义多数采用 BNF，但是其实大家写起来都是乱写的，比如 JavaScript 标准里面就是一种跟 BNF 类
          似的自创语法。
        5.不过语法定义的核心思想不会变，都是几种结构的组合产生一个新的结构，所以语法定义也叫语法产生式。
        6.因为加减乘除有优先级，所以我们可以认为加法是由若干个乘法再由加号或者减号连接成的：
          <Expression> ::= 
              <AdditiveExpression><EOF>
          <AdditiveExpression> ::= 
              <MultiplicativeExpression>
              |<AdditiveExpression><+><MultiplicativeExpression>
              |<AdditiveExpression><-><MultiplicativeExpression>
        7.这种 BNF 的写法类似递归的原理，你可以理解一下，它表示一个列表。为了方便，我们把普通数字也得当成乘法的一种特例了。
          <MultiplicativeExpression> ::= 
              <Number>
              |<MultiplicativeExpression><*><Number>
              |<MultiplicativeExpression></><Number>
        8.好了，这就是四则运算的定义了。
      5.词法分析：状态机
        1.词法分析部分，我们把字符流变成 token 流。词法分析有两种方案，一种是状态机，一种是正则表达式，它们是等效的，选择你喜欢
          的就好，这里我都会你介绍一下状态机。
        2.根据分析，我们可能产生四种输入元素，其中只有两种 token，我们状态机的第一个状态就是根据第一个输入字符来判断进入了哪种状
          态：
            var token = [];
            const start = char => {
                if(char === '1' 
                    || char === '2'
                    || char === '3'
                    || char === '4'
                    || char === '5'
                    || char === '6'
                    || char === '7'
                    || char === '8'
                    || char === '9'
                    || char === '0'
                ) {
                    token.push(char);
                    return inNumber;   
                }
                if(char === '+' 
                    || char === '-'
                    || char === '*'
                    || char === '/'
                ) {
                    emmitToken(char, char);
                    return start
                }
                if(char === ' ') {
                    return start;
                }
                if(char === '\r' 
                    || char === '\n'
                ) {
                    return start;
                }
            }
            const inNumber = char => {
                if(char === '1' 
                    || char === '2'
                    || char === '3'
                    || char === '4'
                    || char === '5'
                    || char === '6'
                    || char === '7'
                    || char === '8'
                    || char === '9'
                    || char === '0'
                ) {
                    token.push(char);
                    return inNumber;
                } else {
                    emmitToken("Number", token.join(""));
                    token = [];
                    return start(char); // put back char
                }
            }
        3.这个状态机非常简单，它只有两个状态，因为我们只有 Number 不是单字符的 token。
        4.这里我的状态机实现是非常经典的方式：用函数表示状态，用 if 表示状态的迁移关系，用 return 值表示下一个状态。
        5.下面我们来运行一下这个状态机试试看：
          function emmitToken(type, value) {
              console.log(value);
          }
          var input = "1024 + 2 * 256"
          var state = start;
          for(var c of input.split(''))
              state = state(c);
          state(Symbol('EOF'))
        6.运行后我们发现输出如下：
          1024
          +
          2
          *
          256
        7.这是我们想要的答案。
      6.语法分析：LL
        1.做完了词法分析，我们开始进行语法分析，LL 语法分析根据每一个产生式来写一个函数，首先我们来写好函数名：
          function AdditiveExpression( ){

          }
          function MultiplicativeExpression(){
              
          }
        2.为了便于理解，我们就不做流式处理了，实际上一般编译代码都应该支持流式处理。
        3.所以我们假设 token 已经都拿到了：
            var tokens = [{
                type:"Number",
                value: "1024"
            }, {
                type:"+"
                value: "+"
            }, {
                type:"Number",
                value: "2"
            }, {
                type:"*"
                value: "*"
            }, {
                type:"Number",
                value: "256"
            }, {
                type:"EOF"
            }];
        4.每个产生式对应着一个函数，例如：根据产生式，我们的 AdditiveExpression 需要处理三种情况：
          <AdditiveExpression> ::= 
            <MultiplicativeExpression>
            |<AdditiveExpression><+><MultiplicativeExpression>
            |<AdditiveExpression><-><MultiplicativeExpression>
        5.那么 AddititveExpression 中就要写三个 if 分支，来处理三种情况。
        6.AdditiveExpression 的写法是根传入的节点，利用产生式合成新的节点
            function AdditiveExpression(source){
                if(source[0].type === "MultiplicativeExpression") {
                    let node = {
                        type:"AdditiveExpression",
                        children:[source[0]]
                    }
                    source[0] = node;
                    return node;
                } 
                if(source[0].type === "AdditiveExpression" && source[1].type === "+") {
                    let node = {
                        type:"AdditiveExpression",
                        operator:"+",
                        children:[source.shift(), source.shift(), MultiplicativeExpression(source)]
                    }
                    source.unshift(node);
                }
                if(source[0].type === "AdditiveExpression" && source[1].type === "-") {
                    let node = {
                        type:"AdditiveExpression",
                        operator:"-",
                        children:[source.shift(), source.shift(), MultiplicativeExpression(source)]
                    }
                    source.unshift(node);
                }
            }
        7.那么下一步我们就把解析好的 token 传给我们的顶层处理函数 Expression。
          Expression(tokens);
        8.接下来，我们看 Expression 该怎么处理它。
        9.我们 Expression 收到第一个 token，是个 Number，这个时候，Expression 就傻了，这是因为产生式只告诉我们，收到了 
          AdditiveExpression 怎么办。
        10.这个时候，我们就需要对产生式的首项层层展开，根据所有可能性调用相应的处理函数，这个过程在编译原理中称为求“closure”。
          function Expression(source){
              if(source[0].type === "AdditiveExpression" && source[1] && source[1].type === "EOF" ) {
                  let node = {
                      type:"Expression",
                      children:[source.shift(), source.shift()]
                  }
                  source.unshift(node);
                  return node;
              }
              AdditiveExpression(source);
              return Expression(source);
          }
          function AdditiveExpression(source){
              if(source[0].type === "MultiplicativeExpression") {
                  let node = {
                      type:"AdditiveExpression",
                      children:[source[0]]
                  }
                  source[0] = node;
                  return AdditiveExpression(source);
              } 
              if(source[0].type === "AdditiveExpression" && source[1] && source[1].type === "+") {
                  let node = {
                      type:"AdditiveExpression",
                      operator:"+",
                      children:[]
                  }
                  node.children.push(source.shift());
                  node.children.push(source.shift());
                  MultiplicativeExpression(source);
                  node.children.push(source.shift());
                  source.unshift(node);
                  return AdditiveExpression(source);
              }
              if(source[0].type === "AdditiveExpression" && source[1] && source[1].type === "-") {
                  let node = {
                      type:"AdditiveExpression",
                      operator:"-",
                      children:[]
                  }
                  node.children.push(source.shift());
                  node.children.push(source.shift());
                  MultiplicativeExpression(source);
                  node.children.push(source.shift());
                  source.unshift(node);
                  return AdditiveExpression(source);
              }
              if(source[0].type === "AdditiveExpression")
                  return source[0];
              MultiplicativeExpression(source);
              return AdditiveExpression(source);
          }
          function MultiplicativeExpression(source){
              if(source[0].type === "Number") {
                  let node = {
                      type:"MultiplicativeExpression",
                      children:[source[0]]
                  }
                  source[0] = node;
                  return MultiplicativeExpression(source);
              } 
              if(source[0].type === "MultiplicativeExpression" && source[1] && source[1].type === "*") {
                  let node = {
                      type:"MultiplicativeExpression",
                      operator:"*",
                      children:[]
                  }
                  node.children.push(source.shift());
                  node.children.push(source.shift());
                  node.children.push(source.shift());
                  source.unshift(node);
                  return MultiplicativeExpression(source);
              }
              if(source[0].type === "MultiplicativeExpression"&& source[1] && source[1].type === "/") {
                  let node = {
                      type:"MultiplicativeExpression",
                      operator:"/",
                      children:[]
                  }
                  node.children.push(source.shift());
                  node.children.push(source.shift());
                  node.children.push(source.shift());
                  source.unshift(node);
                  return MultiplicativeExpression(source);
              }
              if(source[0].type === "MultiplicativeExpression")
                  return source[0];

              return MultiplicativeExpression(source);
          };

          var source = [{
              type:"Number",
              value: "3"
          }, {
              type:"*",
              value: "*"
          }, {
              type:"Number",
              value: "300"
          }, {
              type:"+",
              value: "+"
          }, {
              type:"Number",
              value: "2"
          }, {
              type:"*",
              value: "*"
          }, {
              type:"Number",
              value: "256"
          }, {
              type:"EOF"
          }];
          var ast = Expression(source);

          console.log(ast);
      7.解释执行
        1.得到了 AST 之后，最困难的一步我们已经解决了。这里我们就不对这颗树做任何的优化和精简了，那么接下来，直接进入执行阶段。
          我们只需要对这个树做遍历操作执行即可。
        2.我们根据不同的节点类型和其它信息，写 if 分别处理即可：
            function evaluate(node) {
                if(node.type === "Expression") {
                    return evaluate(node.children[0])
                }
                if(node.type === "AdditiveExpression") {
                    if(node.operator === '-') {
                        return evaluate(node.children[0]) - evaluate(node.children[2]);
                    }
                    if(node.operator === '+') {
                        return evaluate(node.children[0]) + evaluate(node.children[2]);
                    }
                    return evaluate(node.children[0])
                }
                if(node.type === "MultiplicativeExpression") {
                    if(node.operator === '*') {
                        return evaluate(node.children[0]) * evaluate(node.children[2]);
                    }
                    if(node.operator === '/') {
                        return evaluate(node.children[0]) / evaluate(node.children[2]);
                    }
                    return evaluate(node.children[0])
                }
                if(node.type === "Number") {
                    return Number(node.value);
                }
            }
      8.总结
        1.在这个小实验中，我们通过一个小实验学习了编译原理的基本知识，小实验的目的是帮助你理解 JavaScript 课程中涉及到的编译原
          理基本概念，它离真正的编译原理学习还有很大的差距。
        2.通过实验，我们了解了产生式、词法分析、语法分析和解释执行的过程。
        3.最后留给你一些挑战，你可以根据自己的水平选择：
          补全 emmitToken，使得我们的代码能完整工作起来。
          为四则运算加入小数。
          引入负数。
          添加括号功能。
        4.欢迎写好的同学留言给我。
    11.JavaScript语法（预备篇）：到底要不要写分号呢？ 
      1.在我们介绍 JavaScript 语法的全局结构之前，我们先要探讨一个语言风格问题：究竟要不要写分号。
      2.这是一个非常经典的口水问题，“加分号”党和“不写分号”党之间的战争，可谓是经久不息。
      3.实际上，行尾使用分号的风格来自于 Java，也来自于 C 语言和 C++，这一设计最初是为了降低编译器的工作负担。
      4.但是，从今天的角度来看，行尾使用分号其实是一种语法噪音，恰好 JavaScript 语言又提供了相对可用的分号自动补全规则，所以，
        很多 JavaScript 的程序员都是倾向于不写分号。
      5.这里要特意说一点，在今天的文章中，我并不希望去售卖自己的观点（其实我是属于“加分号”党），而是希望比较中立地给你讲清楚相关
        的知识，让你具备足够的判断力。
      6.我们首先来了解一下自动插入分号的规则。
      7.自动插入分号规则
        1.自动插入分号规则其实独立于所有的语法产生式定义，它的规则说起来非常简单，只有三条。
          要有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。
          有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。
          源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号。
        2.这样描述是比较难以理解的，我们一起看一些实际的例子进行分析：
          let a = 1
          void function(a){
              console.log(a);
          }(a);
        3.在这个例子中，第一行的结尾处有换行符，接下来 void 关键字接在 1 之后是不合法的，这命中了我们的第一条规则，因此会在 
          void 前插入换行符。
          var a = 1, b = 1, c = 1;
          a
          ++
          b
          ++
          c
        4.这也是个著名的例子，我们看第二行的 a 之后，有换行符，后面遇到了 ++ 运算符，a 后面跟 ++ 是合法的语法，但是我们看看 
          JavaScript 标准定义中，有[no LineTerminator here]这个字样，这是一个语法定义中的规则，你可以感受一下这个规则的内
          容（下一小节，我会给你详细介绍 no LineTerminator here ）：
            UpdateExpression[Yield, Await]:
                LeftHandSideExpression[?Yield, ?Await]
                LeftHandSideExpression[?Yield, ?Await][no LineTerminator here]++
                LeftHandSideExpression[?Yield, ?Await][no LineTerminator here]--
                ++UnaryExpression[?Yield, ?Await]
                --UnaryExpression[?Yield, ?Await]
        5.于是，这里 a 的后面就要插入一个分号了。所以这段代码最终的结果，b 和 c 都变成了 2，而 a 还是 1。
            (function(a){
                console.log(a);
            })()
            (function(a){
                console.log(a);
            })()
        6.这个例子是比较有实际价值的例子，这里两个 function 调用的写法被称作 IIFE（立即执行的函数表达式），是个常见技巧。
        7.这段代码意图上显然是形成两个 IIFE。
        8.我们来看第三行结束的位置，JavaScript 引擎会认为函数返回的可能是个函数，那么，在后面再跟括号形成函数调用就是合理的，因
          此这里不会自动插入分号。
        9.这是一些鼓励不写分号的编码风格会要求大家写 IIFE 时必须在行首加分号的原因。
          function f(){
              return/*
                  This is a return value.
              */1;
          }
          f();
        10.在这个例子中，return 和 1 被用注释分隔开了。
        11.根据 JavaScript 自动插入分号规则，带换行符的注释也被认为是有换行符，而恰好的是，return 也有
          [no LineTerminator here]规则的要求。所以这里会自动插入分号，f 执行的返回值是 undefined。
      8.no LineTerminator here 规则
        1.好了，到这里我们已经讲清楚了分号自动插入的规则，但是我们要想彻底掌握分号的奥秘，就必须要对 JavaScript 的语法定义做一
          些数据挖掘工作。
        2.no LineTerminator here 规则表示它所在的结构中的这一位置不能插入换行符。
        3.自动插入分号规则的第二条：有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。跟 no LineTerminator here 规
          则强相关，那么我们就找出 JavaScript 语法定义中的这些规则。
            自动插入分号规则.jpg
        4.为了方便你理解，我把产生式换成了实际的代码。
        5.下面一段代码展示了，带标签的 continue 语句，不能在 continue 后插入换行。
          outer:for(var j = 0; j < 10; j++)
              for(var i = 0; i < j; i++)
                  continue /*no LineTerminator here*/ outter
        6.break 跟 continue 是一样的，break 后也不能插入换行：
          outer:for(var j = 0; j < 10; j++)
              for(var i = 0; i < j; i++)
                  break /*no LineTerminator here*/ outter
        7.我们前面已经提到过 return 和后自增、后自减运算符。
          function f(){
              return /*no LineTerminator here*/1;
          }

          i/*no LineTerminator here*/++
          i/*no LineTerminator here*/--
        8.以及，throw 和 Exception 之间也不能插入换行符：
          throw/*no LineTerminator here*/new Exception("error")
        9.凡是 async 关键字，后面都不能插入换行符：
          async/*no LineTerminator here*/function f(){

          }
          const f = async/*no LineTerminator here*/x => x*x
        10.箭头函数的箭头前，也不能插入换行：
          const f = x/*no LineTerminator here*/=> x*x
        11.yield 之后，不能插入换行：
          function *g(){
              var i = 0;
              while(true)
                  yield/*no LineTerminator here*/i++;
          }
        12.到这里，我已经整理了所有标准中的 no LineTerminator here 规则，实际上，no LineTerminator here 规则的存在，多数
          情况是为了保证自动插入分号行为是符合预期的，但是令人遗憾的是，JavaScript 在设计的最初，遗漏了一些重要的情况，所以有一
          些不符合预期的情况出现，需要我们格外注意。
      9.不写分号需要注意的情况
        1.下面我们来看几种不写分号容易造成错误的情况，你可以稍微注意一下，避免发生同样的问题。
      10.以括号开头的语句
        1.我们在前面的案例中，已经展示了一种情况，那就是以括号开头的语句：
          (function(a){
              console.log(a);
          })()/*这里没有被自动插入分号*/
          (function(a){
              console.log(a);
          })()
        2.这段代码看似两个独立执行的函数表达式，但是其实第三组括号被理解为传参，导致抛出错误。
      11.以数组开头的语句
        1.除了括号，以数组开头的语句也十分危险：
          var a = [[]]/*这里没有被自动插入分号*/
          [3, 2, 1, 0].forEach(e => console.log(e))
        2.这段代码本意是一个变量 a 赋值，然后对一个数组执行 forEach，但是因为没有自动插入分号，被理解为下标运算符和逗号表达式，
          我这个例子展示的情况，甚至不会抛出错误，这对于代码排查问题是个噩梦。
      12.以正则表达式开头的语句
        1.正则表达式开头的语句也值得你去多注意一下。我们来看这个例子。
          var x = 1, g = {test:()=>0}, b = 1/*这里没有被自动插入分号*/
          /(a)/g.test("abc")
          console.log(RegExp.$1)
        2.这段代码本意是声明三个变量，然后测试一个字符串中是否含有字母 a，但是因为没有自动插入分号，正则的第一个斜杠被理解成了除
          号，后面的意思就都变了。
        3.注意，我构造的这个例子跟上面的例子一样，同样不会抛错，凡是这一类情况，都非常致命。
      13.以 Template 开头的语句
        1.以 Template 开头的语句比较少见，但是跟正则配合时，仍然不是不可能出现：
          var f = function(){
            return "";
          }
          var g = f/*这里没有被自动插入分号*/
          `Template`.match(/(a)/);
          console.log(RegExp.$1)
        2.这段代码本意是声明函数 f，然后赋值给 g，再测试 Template 中是否含有字母 a。但是因为没有自动插入分号，函数 f 被认为跟
          Template 一体的，进而被莫名其妙地执行了一次。
      14.总结
        1.这一节课，我们讨论了要不要加分号的问题。
        2.首先我们介绍了自动插入分号机制，又对 JavaScript 语法中的 no line terminator 规则做了个整理，最后，我挑选了几种情
          况，为你介绍了不写分号需要注意的一些常见的错误。
        3.最后留给你一个问题，请找一些开源项目，看看它们的编码规范是否要求加分号，欢迎留言讨论。
    12.JavaScript语法（一）：在script标签写export为什么会抛错？
      1.你好，我是 winter，今天我们进入到语法部分的学习。在讲解具体的语法结构之前，这一堂课我首先要给你介绍一下 JavaScript 语
        法的一些基本规则。
      2.脚本和模块
        1.首先，JavaScript 有两种源文件，一种叫做脚本，一种叫做模块。这个区分是在 ES6 引入了模块机制开始的，在 ES5 和之前的版
          本中，就只有一种源文件类型（就只有脚本）。
        2.脚本是可以由浏览器或者 node 环境引入执行的，而模块只能由 JavaScript 代码用 import 引入执行。
        3.从概念上，我们可以认为脚本具有主动性的 JavaScript 代码段，是控制宿主完成一定任务的代码；而模块是被动性的 JavaScript 
          代码段，是等待被调用的库。
        4.我们对标准中的语法产生式做一些对比，不难发现，实际上模块和脚本之间的区别仅仅在于是否包含 import 和 export。
        5.脚本是一种兼容之前的版本的定义，在这个模式下，没有 import 就不需要处理加载“.js”文件问题。
        6.现代浏览器可以支持用 script 标签引入模块或者脚本，如果要引入模块，必须给 script 标签添加 type=“module”。如果引入脚
          本，则不需要 type。
            <script type="module" src="xxxxx.js"></script>
        7.这样，就回答了我们标题中的问题，script 标签如果不加type=“module”，默认认为我们加载的文件是脚本而非模块，如果我们在脚
          本中写了 export，当然会抛错。
        8.脚本中可以包含语句。模块中可以包含三种内容：import 声明，export 声明和语句。普通语句我们会在下一课专门给你讲解，下面
          我们就来讲讲 import 声明和 export 声明。
            脚本和模块.jpg
      3.import 声明
        1.我们首先来介绍一下 import 声明，import 声明有两种用法，一个是直接 import 一个模块，另一个是带 from 的 import，它
          能引入模块里的一些信息。
            import "mod"; //引入一个模块
            import v from "mod";  //把模块默认的导出值放入变量v
        2.直接 import 一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。
        3.带 from 的 import 意思是引入模块中的一部分信息，可以把它们变成本地的变量。
        4.带 from 的 import 细分又有三种用法，我们可以分别看下例子：
          import x from "./a.js" 引入模块中导出的默认值。
          import {a as x, modify} from "./a.js"; 引入模块中的变量。
          import * as x from "./a.js" 把模块中所有的变量以类似对象属性的方式引入。
        5.第一种方式还可以跟后两种组合使用。
          import d, {a as x, modify} from "./a.js"
          import d, * as x from "./a.js"
        6.语法要求不带 as 的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。
        7.我们看一个例子，假设有两个模块 a 和 b。我们在模块 a 中声明了变量和一个修改变量的函数，并且把它们导出。我们用 b 模块导
          入了变量和修改变量的函数。
        8.模块 a：
          export var a = 1;
          export function modify(){
              a = 2;
          }
        9.模块 b：
          import {a, modify} from "./a.js";
          console.log(a);
          modify();
          console.log(a);
        10.当我们调用修改变量的函数后，b 模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量只是改变了名字，它仍然
          与原来的变量是同一个。
      4.export 声明
        1.我们再来说说 export 声明。与 import 相对，export 声明承担的是导出的任务。
        2.模块中导出变量的方式有两种，一种是独立使用 export 声明，另一种是直接在声明型语句前添加 export 关键字。
        3.独立使用 export 声明就是一个 export 关键字加上变量名列表，例如：
          export {a, b, c};
        4.我们也可以直接在声明型语句前添加 export 关键字，这里的 export 可以加在任何声明性质的语句之前，整理如下：
          var
          function (含 async 和 generator)
          class
          let
          const
        5.export 还有一种特殊的用法，就是跟 default 联合使用。export default 表示导出一个默认变量值，它可以用于 function 
          和 class。这里导出的变量是没有名称的，可以使用import x from "./a.js"这样的语法，在模块中引入。
        6.export default 还支持一种语法，后面跟一个表达式，例如：
          var a = {};
          export default a;
        7.但是，这里的行为跟导出变量是不一致的，这里导出的是值，导出的就是普通变量 a 的值，以后 a 的变化与导出的值就无关了，修改
          变量 a，不会使得其他模块中引入的 default 值发生改变。
        8.在 import 语句前无法加入 export，但是我们可以直接使用 export from 语法。
          export a from "a.js"
        9.JavaScript 引擎除了执行脚本和模块之外，还可以执行函数。而函数体跟脚本和模块有一定的相似之处，所以接下来，给你讲讲函数
          体的相关知识。
      5.函数体
        1.执行函数的行为通常是在 JavaScript 代码执行时，注册宿主环境的某些事件触发的，而执行的过程，就是执行函数体（函数的花括
          号中间的部分）。
        2.我们先看一个例子，感性地理解一下：
          setTimeout(function(){
              console.log("go go go");
          }, 10000)
        3.这段代码通过 setTimeout 函数注册了一个函数给宿主，当一定时间之后，宿主就会执行这个函数。
        4.你还记得吗，我们前面已经在运行时这部分讲过，宿主会为这样的函数创建宏任务。
        5.当我们学习了语法之后，我们可以认为，宏任务中可能会执行的代码包括“脚本 (script)”“模块（module）”和“函数体
          （function body）”。正因为这样的相似性，我们把函数体也放到本课来讲解。
        6.函数体其实也是一个语句的列表。跟脚本和模块比起来，函数体中的语句列表中多了 return 语句可以用。
        7.函数体实际上有四种，下面，我来分别介绍一下。
        8.普通函数体，例如：
          function foo(){
              //Function body
          }
        9.异步函数体，例如：
          async function foo(){
              //Function body
          }
        10.生成器函数体，例如：
          function *foo(){
              //Function body
          }
        11.异步生成器函数体，例如：
          async function *foo(){
              //Function body
          }
        12.上面四种函数体的区别在于：能否使用 await 或者 yield 语句。
        13.关于函数体、模块和脚本能使用的语句，我整理了一个表格，你可以参考一下：
          函数体模块脚本能使用的语句.jpg
        14.讲完了三种语法结构，我再来介绍两个 JavaScript 语法的全局机制：预处理和指令序言。
        15.这两个机制对于我们解释一些 JavaScript 的语法现象非常重要。不理解预处理机制我们就无法理解 var 等声明类语句的行为，而
          不理解指令序言，我们就无法解释严格模式。
      6.预处理
        1.JavaScript 执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理 var、函数声明、class、const 和 
          let 这些语句，以确定其中变量的意义。
        2.因为一些历史包袱，这一部分内容非常复杂，首先我们看一下 var 声明。
      7.var 声明
        1.var 声明永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。
        2.我们还是从实例来进行学习。
          var a = 1;
          function foo() {
              console.log(a);
              var a = 2;
          }
          foo();
        3.这段代码声明了一个脚本级别的 a，又声明了 foo 函数体级别的 a，我们注意到，函数体级的var出现在 console.log 语句之后。
        4.但是预处理过程在执行之前，所以有函数体级的变量 a，就不会去访问外层作用域中的变量 a 了，而函数体级的变量 a 此时还没有赋
          值，所以是 undefined。我们再看一个情况：
            var a = 1;
            function foo() {
                console.log(a);
                if(false) {
                    var a = 2;
                }
            }
            foo();
        5.这段代码比上一段代码在var a = 2之外多了一段 if，我们知道 if(false) 中的代码永远不会被执行，但是预处理阶段并不管这个，
          var 的作用能够穿透一切语句结构，它只认脚本、模块和函数体三种语法结构。所以这里结果跟前一段代码完全一样，我们会得到
          undefined。
        6.我们看下一个例子，我们在运行时部分讲过类似的例子。
          var a = 1;
          function foo() {
              var o= {a:3}
              with(o) {
                  var a = 2;
              }
              console.log(o.a);
              console.log(a);
          }
          foo();
        7.在这个例子中，我们引入了 with 语句，我们用 with(o) 创建了一个作用域，并把 o 对象加入词法环境，在其中使用了var a = 2;
          语句。
        8.在预处理阶段，只认var中声明的变量，所以同样为 foo 的作用域创建了 a 这个变量，但是没有赋值。
        9.在执行阶段，当执行到var a = 2时，作用域变成了 with 语句内，这时候的 a 被认为访问到了对象 o 的属性 a，所以最终执行的
          结果，我们得到了 2 和 undefined。
        10.这个行为是 JavaScript 公认的设计失误之一，一个语句中的 a 在预处理阶段和执行阶段被当做两个不同的变量，严重违背了直觉，
          但是今天，在 JavaScript 设计原则“don’t break the web”之下，已经无法修正了，所以你需要特别注意。
        11.因为早年 JavaScript 没有 let 和 const，只能用 var，又因为 var 除了脚本和函数体都会穿透，人民群众发明了“立即执行的
          函数表达式（IIFE）”这一用法，用来产生作用域，例如：
            for(var i = 0; i < 20; i ++) {
                void function(i){
                    var div = document.createElement("div");
                    div.innerHTML = i;
                    div.onclick = function(){
                        console.log(i);
                    }
                    document.body.appendChild(div);
                }(i);
            }
        12.这段代码非常经典，常常在实际开发中见到，也经常被用作面试题，为文档添加了 20 个 div 元素，并且绑定了点击事件，打印它们
          的序号。
        13.我们通过 IIFE 在循环内构造了作用域，每次循环都产生一个新的环境记录，这样，每个 div 都能访问到环境中的 i。
        14.如果我们不用 IIFE：
          for(var i = 0; i < 20; i ++) {
              var div = document.createElement("div");
              div.innerHTML = i;
              div.onclick = function(){
                  console.log(i);
              }
              document.body.appendChild(div);
          }
        15.这段代码的结果将会是点每个 div 都打印 20，因为全局只有一个 i，执行完循环后，i 变成了 20。
      8.function 声明
        1.function 声明的行为原本跟 var 非常相似，但是在最新的 JavaScript 标准中，对它进行了一定的修改，这让情况变得更加复杂了。
        2.在全局（脚本、模块和函数体），function 声明表现跟 var 相似，不同之处在于，function 声明不但在作用域中加入变量，还会
          给它赋值。
        3.我们看一下 function 声明的例子：
          console.log(foo);
          function foo(){

          }
        4.这里声明了函数 foo，在声明之前，我们用 console.log 打印函数 foo，我们可以发现，已经是函数 foo 的值了。
        5.function 声明出现在 if 等语句中的情况有点复杂，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不
          再被提前赋值：
          console.log(foo);
          if(true) {
              function foo(){

              }
          }
        6.这段代码得到 undefined。如果没有函数声明，则会抛出错误。
        7.这说明 function 在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，赋值行为发生在了执行阶段。
        8.出现在 if 等语句中的 function，在 if 创建的作用域中仍然会被提前，产生赋值效果，我们会在下一节课继续讨论。
      9.class 声明
        1.class 声明在全局的行为跟 function 和 var 都不一样。
        2.在 class 声明之前使用 class 名，会抛错：
          console.log(c);
          class c{

          }
        3.这段代码我们试图在 class 前打印变量 c，我们得到了个错误，这个行为很像是 class 没有预处理，但是实际上并非如此。
        4.我们看个复杂一点的例子：
          var c = 1;
          function foo(){
              console.log(c);
              class c {}
          }
          foo();
        5.这个例子中，我们把 class 放进了一个函数体中，在外层作用域中有变量 c。然后试图在 class 之前打印 c。
        6.执行后，我们看到，仍然抛出了错误，如果去掉 class 声明，则会正常打印出 1，也就是说，出现在后面的 class 声明影响了前面
          语句的结果。
        7.这说明，class 声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。
        8.class 的声明作用不会穿透 if 等语句结构，所以只有写在全局环境才会有声明作用，这部分我们将会在下一节课讲解。
        9.这样的 class 设计比 function 和 var 更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。
        10.按照现代语言设计的评价标准，及早抛错是好事，它能够帮助我们尽量在开发阶段就发现代码的可能问题。
      10.指令序言机制
        1.脚本和模块都支持一种特别的语法，叫做指令序言（Directive Prologs）。
        2.这里的指令序言最早是为了 use strict 设计的，它规定了一种给 JavaScript 代码添加元信息的方式。
          "use strict";
          function f(){
              console.log(this);
          };
          f.call(null);
        3.这段代码展示了严格模式的用法，我这里定义了函数 f，f 中打印 this 值，然后用 call 的方法调用 f，传入 null 作为 this 
          值，我们可以看到最终结果是 null 原封不动地被当做 this 值打印了出来，这是严格模式的特征。
        4.如果我们去掉严格模式的指令需要，打印的结果将会变成 global。
        5."use strict"是 JavaScript 标准中规定的唯一一种指令序言，但是设计指令序言的目的是，留给 JavaScript 的引擎和实现者
          一些统一的表达方式，在静态扫描时指定 JavaScript 代码的一些特性。
        6.例如，假设我们要设计一种声明本文件不需要进行 lint 检查的指令，我们可以这样设计：
          "no lint";
          "use strict";
          function doSth(){
              //......
          }
          //......
        7.JavaScript 的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。
        8.我们看两个例子：
          function doSth(){
              //......
          }
          "use strict";
          var a = 1;
          //......
        9.这个例子中，"use strict"没有出现在最前，所以不是指令序言。
          'use strict';
          function doSth(){
              //......
          }
          var a = 1;
          //......
        10.这个例子中，'use strict'是单引号，这不妨碍它仍然是指令序言。
      11.结语
        1.今天，我们一起进入了 JavaScript 的语法部分，在开始学习之前，我先介绍了一部分语法的基本规则。
        2.我们首先介绍了 JavaScript 语法的全局结构，JavaScript 有两种源文件，一种叫做脚本，一种叫做模块。介绍完脚本和模块的基
          础概念，我们再来把它们往下分，脚本中可以包含语句。模块中可以包含三种内容：import 声明，export 声明和语句。
        3.最后，我介绍了两个 JavaScript 语法的全局机制：预处理和指令序言。
        4.最后，给你留一个小任务，我们试着用 babel，分析一段 JavaScript 的模块代码，并且找出它中间的所有 export 的变量。
    13.JavaScript语法（二）：你知道哪些JavaScript语句？
      1.我们在上一节课中已经讲过了 JavaScript 语法的顶层设计，接下来我们进入到更具体的内容。
      2.JavaScript 遵循了一般编程语言的“语句 - 表达式”结构，多数编程语言都是这样设计的。我们在上节课讲的脚本，或者模块都是由语句
        列表构成的，这一节课，我们就来一起了解一下语句。
      3.在 JavaScript 标准中，把语句分成了两种：声明和语句，不过，这里的区分逻辑比较奇怪，所以，这里我还是按照自己的思路给你整理
        一下。
      4.普通语句：
        普通语句.png
      5.声明型语句：
        声明型语句.jpg
      6.我们根据上面的分类，来遍历学习一下这些语句。
      7.语句块
        1.我们可以这样去简单理解，语句块就是一对大括号。
          {
              var x, y;
              x = 10;
              y = 20;
          }
        2.语句块的意义和好处在于：让我们可以把多行语句视为同一行语句，这样，if、for 等语句定义起来就比较简单了。不过，我们需要注
          意的是，语句块会产生作用域，我们看一个例子：
          {
              let x = 1;
          }
          console.log(x); // 报错
        3.这里我们的 let 声明，仅仅对语句块作用域生效，于是我们在语句块外试图访问语句块内的变量 x 就会报错。
      8.空语句
        1.空语句就是一个独立的分号，实际上没什么大用。我们来看一下：   
          ;
        2.空语句的存在仅仅是从语言设计完备性的角度考虑，允许插入多个分号而不抛出错误。
      9.if 语句
        1.if 语句是条件语句。我想，对多数人来说，if 语句都是熟悉的老朋友了，也没有什么特别需要注意的用法，但是为了我们课程的完备
          性，这里还是要讲一下。
        2.if 语句示例如下：
          if(a < b)
              console.log(a);
        3.if 语句的作用是，在满足条件时执行它的内容语句，这个语句可以是一个语句块，这样就可以实现有条件地执行多个语句了。
        4.if 语句还有 else 结构，用于不满足条件时执行，一种常见的用法是，利用语句的嵌套能力，把 if 和 else 连写成多分支条件判断：
          if(a < 10) {
              //...
          } else if(a < 20) {
              //...
          } else if(a < 30) {
              //...
          } else {
              //...
          }
        5.这段代码表示四个互斥的分支，分别在满足 a<10、a<20、a<30 和其它情况时执行。
      10.switch 语句
        1.switch 语句继承自 Java，Java 中的 switch 语句继承自 C 和 C++，原本 switch 语句是跳转的变形，所以我们如果要用它来
          实现分支，必须要加上 break。
        2.其实 switch 原本的设计是类似 goto 的思维。我们看一个例子：
          switch(num) {
          case 1:
              print(1);
          case 2:
              print 2;
          case 3:
              print 3;
          }
        3.这段代码当 num 为 1 时输出 1 2 3，当 num 为 2 时输出 2 3，当 num 为 3 时输出 3。如果我们要把它变成分支型，则需要
          在每个 case 后加上 break。
          switch(num) {
          case 1:
              print 1;
              break;
          case 2:
              print 2;
              break;
          case 3:
              print 3;
              break;
          }
        4.在 C 时代，switch 生成的汇编代码性能是略优于 if else 的，但是对 JavaScript 来说，则无本质区别。我个人的看法是，现
          在 switch 已经完全没有必要使用了，应该用 if else 结构代替。
      11.循环语句
        1.循环语句应该也是你所熟悉的语句了，这里我们把重点放在一些新用法上。
      12.while 循环和 do while 循环
        1.这两个都是历史悠久的 JavaScript 语法了，示例大概如下：
          let a = 100
          while(a--) {
              console.log("*");
          }

          let a = 101;
          do {
              console.log(a);
          } while(a < 100)
        2.注意，这里 do while 循环无论如何至少会执行一次。
      13.普通 for 循环
        1.首先我们来看看普通的 for 循环。
          for(i = 0; i < 100; i++)
              console.log(i);

          for(var i = 0; i < 100; i++)
              console.log(i);

          for(let i = 0; i < 100; i++)
              console.log(i);

          var j = 0;
          for(const i = 0; j < 100; j++)
              console.log(i);
        2.这里为了配合新语法，加入了允许 let 和 const，实际上，const 在这里是非常奇葩的东西，因为这里声明和初始化的变量，按惯
          例是用于控制循环的，但是它如果是 const 就没法改了。
        3.我想，这一点可能是从保持 let 和 const 一致性的角度考虑的吧。
      14.for in 循环
        1.for in 循环枚举对象的属性，这里体现了属性的 enumerable 特征。
          let o = { a: 10, b: 20}
          Object.defineProperty(o, "c", {enumerable:false, value:30})

          for(let p in o)
              console.log(p);
        2.这段代码中，我们定义了一个对象 o，给它添加了不可枚举的属性 c，之后我们用 for in 循环枚举它的属性，我们会发现，输出时
          得到的只有 a 和 b。
        3.如果我们定义 c 这个属性时，enumerable 为 true，则 for in 循环中也能枚举到它。
      15.for of 循环和 for await of 循环
        1.for of 循环是非常棒的语法特性。
        2.我们先看下基本用法，它可以用于数组：
          for(let e of [1, 2, 3, 4, 5])
              console.log(e);
        3.但是实际上，它背后的机制是 iterator 机制。
        4.我们可以给任何一个对象添加 iterator，使它可以用于 for of 语句，看下示例：
          let o = {  
              [Symbol.iterator]:() => ({
                  _value: 0,
                  next(){
                      if(this._value == 10)
                          return {
                              done: true
                          }
                      else return {
                          value: this._value++,
                          done: false
                      };
                  }
              })
          }
          for(let e of o)
              console.log(e);
        5.这段代码展示了如何为一个对象添加 iterator。但是，在实际操作中，我们一般不需要这样定义 iterator，我们可以使用 
          generator function。
          function* foo(){
              yield 0;
              yield 1;
              yield 2;
              yield 3;
          }
          for(let e of foo())
              console.log(e);
        6.这段代码展示了 generator function 和 foo 的配合。
        7.此外，JavaScript 还为异步生成器函数配备了异步的 for of，我们来看一个例子：
          function sleep(duration) {
              return new Promise(function(resolve, reject) {
                  setTimeout(resolve,duration);
              })
          }
          async function* foo(){
              i = 0;
              while(true) {
                  await sleep(1000);
                  yield i++;
              }
                  
          }
          for await(let e of foo())
              console.log(e);
        8.这段代码定义了一个异步生成器函数，异步生成器函数每隔一秒生成一个数字，这是一个无限的生成器。
        9.接下来，我们使用 for await of 来访问这个异步生成器函数的结果，我们可以看到，这形成了一个每隔一秒打印一个数字的无限循环。
        10.但是因为我们这个循环是异步的，并且有时间延迟，所以，这个无限循环的代码可以用于显示时钟等有意义的操作。
      16.return
        1.return 语句用于函数中，它终止函数的执行，并且指定函数的返回值，这是大家非常熟悉语句了，也没有什么特殊之处。
          function squre(x){
              return x * x;
          }
        2.这段代码展示了 return 的基本用法。它后面可以跟一个表达式，计算结果就是函数返回值。
      17.break 语句和 continue 语句
        1.break 语句用于跳出循环语句或者 switch 语句，continue 语句用于结束本次循环并继续循环。
        2.这两个语句都属于控制型语句，用法也比较相似，所以我们就一起讲了。需要注意的是，它们都有带标签的用法。
          outer:for(let i = 0; i < 100; i++)
              inner:for(let j = 0; j < 100; j++)
                  if( i == 50 && j == 50)
                      break outer;
          outer:for(let i = 0; i < 100; i++)
              inner:for(let j = 0; j < 100; j++)
                  if( i >= 50 && j == 50)
                      continue outer;
        3.带标签的 break 和 continue 可以控制自己被外层的哪个语句结构消费，这可以跳出复杂的语句结构。
      18.with 语句
        1.with 语句是个非常巧妙的设计，但它把 JavaScript 的变量引用关系变得不可分析，所以一般都认为这种语句都属于糟粕。
        2.但是历史无法改写，现在已经无法去除 with 了。我们来了解一下它的基本用法即可。
          let o = {a:1, b:2}
          with(o){
              console.log(a, b);
          }
        3.with 语句把对象的属性在它内部的作用域内变成变量。
      19.try 语句和 throw 语句
        1.try 语句和 throw 语句用于处理异常。它们是配合使用的，所以我们就放在一起讲了。在大型应用中，异常机制非常重要。
          try {
              throw new Error("error");
          } catch(e) {
              console.log(e);
          } finally {
              console.log("finally");
          }
        2.一般来说，throw 用于抛出异常，但是单纯从语言的角度，我们可以抛出任何值，也不一定是异常逻辑，但是为了保证语义清晰，不建
          议用 throw 表达任何非异常逻辑。
        3.try 语句用于捕获异常，用 throw 抛出的异常，可以在 try 语句的结构中被处理掉：try 部分用于标识捕获异常的代码段，catch 
          部分则用于捕获异常后做一些处理，而 finally 则是用于执行后做一些必须执行的清理工作。
        4.catch 结构会创建一个局部的作用域，并且把一个变量写入其中，需要注意，在这个作用域，不能再声明变量 e 了，否则会出错。
        5.在 catch 中重新抛出错误的情况非常常见，在设计比较底层的函数时，常常会这样做，保证抛出的错误能被理解。
        6.finally 语句一般用于释放资源，它一定会被执行，我们在前面的课程中已经讨论过一些 finally 的特征，即使在 try 中出现了
          return，finally 中的语句也一定要被执行。
      20.debugger 语句
        1.debugger 语句的作用是：通知调试器在此断点。在没有调试器挂载时，它不产生任何效果。
        2.介绍完普通语句，我们再来看看声明型语句。声明型语句跟普通语句最大区别就是声明型语句响应预处理过程，普通语句只有执行过程。
      21.var
        1.var 声明语句是古典的 JavaScript 中声明变量的方式。而现在，在绝大多数情况下，let 和 const 都是更好的选择。
        2.我们在上一节课已经讲解了 var 声明对全局作用域的影响，它是一种预处理机制。
        3.如果我们仍然想要使用 var，我的个人建议是，把它当做一种“保障变量是局部”的逻辑，遵循以下三条规则：
          声明同时必定初始化；
          尽可能在离使用的位置近处声明；
          不要在意重复声明。
        4.例如：
          var x = 1, y = 2;
          doSth(x, y);

          for(var x = 0; x < 10; x++)
              doSth2(x);
        5.这个例子中，两次声明了变量 x，完成了两段逻辑，这两个 x 意义上可能不一定相关，这样，不论我们把代码复制粘贴在哪里，都不
          会出错。
        6.当然，更好的办法是使用 let 改造，我们看看如何改造：
          {
              let x = 1, y = 2;
              doSth(x, y);
          }

          for(let x = 0; x < 10; x++)
              doSth2(x);
        7.这里我用代码块限制了第一个 x 的作用域，这样就更难发生变量命名冲突引起的错误了。
      22.let 和 const
        1.et 和 const 是都是变量的声明，它们的特性非常相似，所以我们放在一起讲了。let 和 const 是新设计的语法，所以没有什么硬
          伤，非常地符合直觉。let 和 const 的作用范围是 if、for 等结构型语句。
        2.我们看下基本用法：
          const a = 2;
          if(true){
              const a = 1;
              console.log(a);
          }
          console.log(a);
        3.这里的代码先在全局声明了变量 a，接下来又在 if 内声明了 a，if 内构成了一个独立的作用域。
        4.const 和 let 语句在重复声明时会抛错，这能够有效地避免变量名无意中冲突：
          let a = 2
          const a = 1;
        5.这段代码中，先用 let 声明了 a，接下来又试图使用 const 声明变量 a，这时，就会产生错误。
        6.let 和 const 声明虽然看上去是执行到了才会生效，但是实际上，它们还是会被预处理。如果当前作用域内有声明，就无法访问到外
          部的变量。我们来看这段代码：
          const a = 2;
          if(true){
              console.log(a); //抛错
              const a = 1;   
          }
        7.这里在 if 的作用域中，变量 a 声明执行到之前，我们访问了变量 a，这时会抛出一个错误，这说明 const 声明仍然是有预处理机
          制的。
        8.在执行到 const 语句前，我们的 JavaScript 引擎就已经知道后面的代码将会声明变量 a，从而不允许我们访问外层作用域中的 a。
      23.class 声明
        1.我们在之前的课程中，已经了解过 class 相关的用法。这里我们再从语法的角度来看一遍：
          class a {

          }
        2.class 最基本的用法只需要 class 关键字、名称和一对大括号。它的声明特征跟 const 和 let 类似，都是作用于块级作用域，预
          处理阶段则会屏蔽外部变量。
          const a = 2;
          if(true){
              console.log(a); //抛错
              class a {

              }
          }
        3.class 内部，可以使用 constructor 关键字来定义构造函数。还能定义 getter/setter 和方法。
          class Rectangle {
            constructor(height, width) {
              this.height = height;
              this.width = width;
            }
            // Getter
            get area() {
              return this.calcArea();
            }
            // Method
            calcArea() {
              return this.height * this.width;
            }
          }
        4.这个例子来自 MDN，它展示了构造函数、getter 和方法的定义。
        5.以目前的兼容性，class 中的属性只能写在构造函数中，相关标准正在 TC39 讨论。
        6.需要注意，class 默认内部的函数定义都是 strict 模式的。
      24.函数声明
        1.函数声明使用 function 关键字。
        2.在上一节课中，我们已经讨论过函数声明对全局作用域的影响了。这一节课，我们来看看函数声明具体的内容，我们先看一下函数声明的
          几种类型。
          function foo(){

          }
          function* foo(){
              yield 1;
              yield 2;
              yield 3;
          }
          async function foo(){
              await sleep(3000);
              
          }
          async function* foo(){
              await sleep(3000);
              yield 1;
          }
        3.带 * 的函数是 generator，我们在前面的部分已经见过它了。生成器函数可以理解为返回一个序列的函数，它的底层是 iterator
          机制。
        4.async 函数是可以暂停执行，等待异步操作的函数，它的底层是 Promise 机制。异步生成器函数则是二者的结合。
        5.函数的参数，可以只写形参名，现在还可以写默认参数和指定多个参数，看下例子：
          function foo(a = 1, ...other) { 
            console.log(a, other)
          }
        6.这个形式可以代替一些对参数的处理代码，表意会更加清楚。
      25.结语
        1.今天我们一起学习了语句家族，语句分成了普通语句和声明型语句。
        2.普通语句部分，建议你把重点放在循环语句上面。声明型语句我觉得都很重要，尤其是它们的行为。熟练掌握了它们，我们就可以在工作
          中去综合运用它们，从而减少代码中的错误。新特性大多可以帮助我们发现代码中的错误。
        3.最后留一个小作业，请你找出所有具有 Symbol.iterator 的原生对象，并且看看它们的 for of 遍历行为。
    14.JavaScript语法（三）：什么是表达式语句？
      1.不知道你有没有注意到，我们在语句部分，讲到了很多种语句类型，但是，其实最终产生执行效果的语句不多。
      2.事实上，真正能干活的就只有表达式语句，其它语句的作用都是产生各种结构，来控制表达式语句执行，或者改变表达式语句的意义。
      3.今天的课程，我们就深入到表达式语句中来学习一下。
      4.什么是表达式语句
        1.表达式语句实际上就是一个表达式，它是由运算符连接变量或者直接量构成的（关于直接量我们在下一节详细讲解）。
        2.一般来说，我们的表达式语句要么是函数调用，要么是赋值，要么是自增、自减，否则表达式计算的结果没有任何意义。
        3.但是从语法上，并没有这样的限制，任何合法的表达式都可以当做表达式语句使用。比如我们看下面的例子。
          a + b;
        4.这句代码计算了 a 和 b 相加的值，但是不会显示出来，也不会产生任何执行效果（除非 a 和 b 是 getter），但是不妨碍它符合
          语法也能够被执行。
        5.下面我们就一起来了解下都有哪些表达式，我们从粒度最小到粒度最大了解一下。
      5.PrimaryExpression 主要表达式
        1.首先我们来给你讲解一下表达式的原子项：Primary Expression。它是表达式的最小单位，它所涉及的语法结构也是优先级最高的。
        2.Primary Expression 包含了各种“直接量”，直接量就是直接用某种语法写出来的具有特定类型的值。我们已经知道，在运行时有各
          种值，比如数字 123，字符串 Hello world，所以通俗地讲，直接量就是在代码中把它们写出来的语法。
        3.我们在类型部分，已经介绍过一些基本类型的直接量。比如，我们当时用 null 关键字获取 null 值，这个用法就是 null 直接量，
          这里我们仅仅把它们简单回顾一下：
          "abc";
          123;
          null;
          true;
          false;
        4.除这些之外，JavaScript 还能够直接量的形式定义对象，针对函数、类、数组、正则表达式等特殊对象类型，JavaScript 提供了
          语法层面的支持。
          ({});
          (function(){});
          (class{ });
          [];
          /abc/g;
        5.需要注意，在语法层面，function、{ 和 class 开头的表达式语句与声明语句有语法冲突，所以，我们要想使用这样的表达式，必
          须加上括号来回避语法冲突。
        6.在 JavaScript 标准中，这些结构有的被称作直接量（Literal），有的被称作表达式（**Expression），在我看来，把它们都理
          解成直接量比较合适。
        7.Primary Expression 还可以是 this 或者变量，在语法上，把变量称作“标识符引用”。
          this;
          myVar;
        8.任何表达式加上圆括号，都被认为是 Primary Expression，这个机制使得圆括号成为改变运算优先顺序的手段。
          (a + b);  
        9.这就是 Primary Expression 的几种形式了，接下来，我们讲讲由 Primary Expression 构成的更复杂的表达式：
          Member Expression。
      6.MemberExpression 成员表达式
        1.Member Expression 通常是用于访问对象成员的。它有几种形式：
          a.b;
          a["b"];
          new.target;
          super.b;
        2.前面两种用法都很好理解，就是用标识符的属性访问和用字符串的属性访问。而 new.target 是个新加入的语法，用于判断函数是否
          是被 new 调用，super 则是构造函数中，用于访问父类的属性的语法。
        3.从名字就可以看出，Member Expression 最初设计是为了属性访问的，不过从语法结构需要，以下两种在 JavaScript 标准中当做 
          Member Expression：
          f`a${b}c`;
        4.这是一个是带函数的模板，这个带函数名的模板表示把模板的各个部分算好后传递给一个函数。
          new Cls();
        5.另一个是带参数列表的 new 运算，注意，不带参数列表的 new 运算优先级更低，不属于 Member Expression。
        6.实际上，这两种被放入 Member Expression，仅仅意味着它们跟属性运算属于同一优先级，没有任何语义上的关联。接下来我们看看 
          Member Expression 能组成什么。
      7.NewExpression NEW 表达式
        1.这种非常简单，Member Expression 加上 new 就是 New Expression（当然，不加 new 也可以构成 New Expression，
          JavaScript 中默认独立的高优先级表达式都可以构成低优先级表达式）。
        2.注意，这里的 New Expression 特指没有参数列表的表达式。我们看个稍微复杂的例子：
          new new Cls(1);
        3.直观看上去，它可能有两种意思：
          new (new Cls(1));

          new (new Cls)(1);
        4.实际上，它等价于第一种。我们可以用以下代码来验证：
          class Cls{
            constructor(n){
              console.log("cls", n);
              return class {
                constructor(n) {
                  console.log("returned", n);
                }
              }
            }
          }
          new (new Cls(1));
        5.这段代码最后得到了下面这样的结果。
          cls 1
          returned undefined
        6.这里就说明了，1 被当做调用 Cls 时的参数传入了。
      8.CallExpression 函数调用表达式
        1.除了 New Expression，Member Expression 还能构成 Call Expression。它的基本形式是 Member Expression 后加一
          个括号里的参数列表，或者我们可以用上 super 关键字代替 Member Expression。
          a.b(c);
          super();
        2.这看起来很简单，但是它有一些变体。比如：
          a.b(c)(d)(e);
          a.b(c)[3];
          a.b(c).d;
          a.b(c)`xyz`;
        3.这些变体的形态，跟 Member Expression 几乎是一一对应的。实际上，我们可以理解为，Member Expression 中的某一子结构
          具有函数调用，那么整个表达式就成为了一个 Call Expression。
        4.而 Call Expression 就失去了比 New Expression 优先级高的特性，这是一个主要的区分。
      9.LeftHandSideExpression 左值表达式
        1.接下来，我们需要理解一个概念：New Expression 和 Call Expression 统称 LeftHandSideExpression，左值表达式。
        2.我们直观地讲，左值表达式就是可以放到等号左边的表达式。JavaScript 语法则是下面这样。
          a() = b;
        3.这样的用法其实是符合语法的，只是，原生的 JavaScript 函数，返回的值都不能被赋值。因此多数时候，我们看到的赋值将会是 
          Call Expression 的其它形式，如：
          a().c = b;
        4.另外，根据 JavaScript 运行时的设计，不排除某些宿主会提供返回引用类型的函数，这时候，赋值就是有效的了。
        5.左值表达式最经典的用法是用于构成赋值表达式，但是其实如果你翻一翻 JavaScript 标准，你会发现它出现在各种场合，凡是需要
          “可以被修改的变量”的位置，都能见到它的身影。
        6.那么接下来我们就讲讲 AssignmentExpression 赋值表达式。
      10.AssignmentExpression 赋值表达式
        1.AssignmentExpression 赋值表达式也有多种形态，最基本的当然是使用等号赋值：
          a = b
        2.这里需要理解的一个稍微复杂的概念是，这个等号是可以嵌套的：
          a = b = c = d
        3.这样的连续赋值，是右结合的，它等价于下面这种：
          a = (b = (c = d))
        4.也就是说，先把 d 的结果赋值给 c，再把整个表达式的结果赋值给 b，再赋值给 a。
        5.当然，这并非一个很好的代码风格，我们讲解语法是为了让你理解这样的用法，而不是推荐你这样写代码。
        6.赋值表达式的使用，还可以结合一些运算符，例如：
          a += b;
        7.相当于
          a = a + b;
        8.能有这样用的运算符有下面这几种：
          *=、/=、%=、+=、-=、<<=、>>=、>>>=、&=、^=、|=、**=
        9.我想你已经注意到了，赋值表达式的等号左边和右边能用的表达式类型不一样，在这一课，我们已经关注完了表达式的左边部分
          （左值表达式）的语法结构，下一节课，我们将会给你重点讲解表达式的右边部分。
      11.Expression 表达式
        1.赋值表达式可以构成 Expression 表达式的一部分。在 JavaScript 中，表达式就是用逗号运算符连接的赋值表达式。
        2.在 JavaScript 中，比赋值运算优先级更低的就是逗号运算符了。我们可以把逗号可以理解为一种小型的分号。
          a = b, b = 1, null;
        3.逗号分隔的表达式会顺次执行，就像不同的表达式语句一样。“整个表达式的结果”就是“最后一个逗号后的表达式结果”。比如我们文中
          的例子，整个“a = b, b = 1, null;”表达式的结果就是“，”后面的null。
        4.在很多场合，都不允许使用带逗号的表达式，比如我们在前面课程中提到，export 后只能跟赋值表达式，意思就是表达式中不能含有
          逗号。
      12.结语
        1.这节课我们开始讲解了运算符和表达式的一些相关知识，这节课上，我们已经学习了赋值表达式和赋值表达式的左边部分。下节课，我
          们将会讲一讲赋值表达式的右边部分。
        2.最后给你留一个作业，把今天讲到的所有运算符按优先级排列成一个表格，下节课我们会补完剩下的部分。
    15.JavaScript语法（四）：新加入的**运算符，哪里有些不一样呢？
      1.上一节课我们已经给你介绍了表达式的一些结构，其中关于赋值表达式，我们讲完了它的左边部分，而留下了它右边部分，那么，我们这节
        课一起来详细讲解。
      2.在一些通用的计算机语言设计理论中，能够出现在赋值表达式右边的叫做：右值表达式（RightHandSideExpression），而在 
        JavaScript 标准中，规定了在等号右边表达式叫做条件表达式（ConditionalExpression），不过，在 JavaScript 标准中，从
        未出现过右值表达式字样。
      3.JavaScript 标准也规定了左值表达式同时都是条件表达式（也就是右值表达式），此外，左值表达式也可以通过跟一定的运算符组合，
        逐级构成更复杂的结构，直到成为右值表达式。
      4.关于这块的知识，我们有时会看到按照运算符来组织的讲解形式。
      5.这样讲解形式是因为：对运算符来说的“优先级”，如果从我们语法的角度来看，那就是“表达式的结构”。讲“乘法运算的优先级高于加法”，
        从语法的角度看就是“乘法表达式和加号运算符构成加法表达式”。
      6.对于右值表达式来说，我们可以理解为以左值表达式为最小单位开始构成的，接下来我们就来看看左值表达式是如何一步步构成更为复杂的
        语法结构。
      7.更新表达式 UpdateExpression
        1.左值表达式搭配 ++ -- 运算符，可以形成更新表达式。
          -- a;
          ++ a;
          a --
          a ++
        2.更新表达式会改变一个左值表达式的值。分为前后自增，前后自减一共四种。
        3.我们要注意一下，这里在 ES2018 中，跟早期版本有所不同，前后自增自减运算被放到了同一优先级。
      8.一元运算表达式 UnaryExpression
        1.更新表达式搭配一元运算符，可以形成一元运算表达式，我们看下例子：
          delete a.b;
          void a;
          typeof a;
          - a;
          ~ a;
          ! a;
          await a;
        2.它的特点就是一个更新表达式搭配了一个一元运算符。
      9.乘方表达式 ExponentiationExpression
        1.乘方表达式也是由更新表达式构成的。它使用**号。
          ++i ** 30
          2 ** 30 //正确
          -2 ** 30 //报错
        2.我们看一下例子，-2 这样的一元运算表达式，是不可以放入乘方表达式的，如果需要表达类似的逻辑，必须加括号。
        3.这里我们需要注意一下结合性，** 运算是右结合的，这跟其它正常的运算符（也就是左结合运算符）都不一样。
        4.我们来看一个例子。
          4 ** 3 ** 2
        5.事实上，它是这样被运算的：
          4 ** (3 ** 2)
        6.而不是这样被运算的：
          (4 ** 3) ** 2
        7.我们来实际在代码中执行一下试试。最终结果是 262144， 而不是 4096。
      10.乘法表达式 MultiplicativeExpression
        1.到这里，我们进入了比较熟悉的表达式类型，乘方表达式可以构成乘法表达式，用乘号或者除号、取余符号连接就可以了，我们看看例
          子：
          x * 2;
        2.乘法表达式有三种运算符：
          *
          /
          %
        3.它们分别表示乘、除和取余。它们的优先级是一样的，所以统一放在乘法运算表达式中。
      11.加法表达式 AdditiveExpression
        1.加法表达式是由乘法表达式用加号或者减号连接构成的。我们看下例子:
          a + b * c
        2.加法表达式有加号和减号两种运算符。
          + 
          -
        3.这就是我们小学学的加法和减法的意思了。不过要注意，加号还能表示字符串连接，这也比较符合一般的直觉。
      12.移位表达式 ShiftExpression
        1.移位表达式由加法表达式构成，移位是一种位运算，分成三种：
          << 向左移位
          >> 向右移位
          >>> 无符号向右移位
        2.移位运算把操作数看做二进制表示的整数，然后移动特定位数。所以左移 n 位相当于乘以 2 的 n 次方，右移 n 位相当于除以 2 
          取整 n 次。
        3.普通移位会保持正负数。无符号移位会把减号视为符号位 1，同时参与移位：
          -1 >>> 1
        4.这个会得到 2147483647，也就是 2 的 31 次方，跟负数的二进制表示法相关，这里就不详细讲解了。
        5.在 JavaScript 中，二进制操作整数并不能提高性能，移位运算这里也仅仅作为一种数学运算存在，这些运算存在的意义也仅仅是照
          顾 C 系语言用户的习惯了。
      13.关系表达式 RelationalExpression
        1.移位表达式可以构成关系表达式，这里的关系表达式就是大于、小于、大于等于、小于等于等运算符号连接，统称为关系运算。
          <=
          >=
          <
          >
          instanceof 
          in
        2.需要注意，这里的 <= 和 >= 关系运算，完全是针对数字的，所以 <= 并不等价于 < 或 ==。例如：
          null <= undefined
          //false
          null == undefined
          //true
        3.请你务必不要用数学上的定义去理解这些运算符。
      14.相等表达式 EqualityExpression
        1.在语法上，相等表达式是由关系表达式用相等比较运算符（如 ==）连接构成的。所以我们可以像下面这段代码一样使用，而不需要加
          括号。
          a instanceof "object" == true
        2.相等表达式由四种运算符和关系表达式构成，我们来看一下运算符：
          ==
          !=
          ===
          !==
        3.相等表达式又包含一个 JavaScript 中著名的设计失误，那就是 == 的行为。
        4.一些编程规范甚至要求完全避免使用 == 运算，我觉得这样规定是比较合理的，但是这里我还是尽量解释一下 == 的行为。
        5.虽然标准中写的==十分复杂，但是归根结底，类型不同的变量比较时==运算只有三条规则：
          undefined 与 null 相等；
          字符串和 bool 都转为数字再比较；
          对象转换成 primitive 类型再比较。
        6.这样我们就可以理解一些不太符合直觉的例子了，比如：
          false == '0' true
          true == 'true' false
          [] == 0 true
          [] == false true
          new Boolean('false') == false false
        7.这里不太符合直觉的有两点：
          一个是即使字符串与 boolean 比较，也都要转换成数字；
          另一个是对象如果转换成了 primitive 类型跟等号另一边类型恰好相同，则不需要转换成数字。
        8.此外，== 的行为也经常跟 if 的行为（转换为 boolean）混淆。总之，我建议，仅在确认 == 发生在 Number 和 String 类型
          之间时使用，比如：
          document.getElementsByTagName('input')[0].value == 100
        9.在这个例子中，等号左边必然是 string，右边的直接量必然是 number，这样使用 == 就没有问题了。
      15.位运算表达式
        1.位运算表达式含有三种：
          按位与表达式 BitwiseANDExpression
          按位异或表达式 BitwiseANDExpression
          按位或表达式 BitwiseORExpression。
        2.位运算表达式关系比较紧密，我们这里放到一起来讲。
        3.按位与表达式由按位与运算符（&）连接按位异或表达式构成，按位与表达式把操作数视为二进制整数，然后把两个操作数按位做与运算。
        4.按位异或表达式由按位异或运算符（^）连接按位与表达式构成，按位异或表达式把操作数视为二进制整数，然后把两个操作数按位做异
          或运算。异或两位相同时得 0，两位不同时得 1。
        5.异或运算有个特征，那就是两次异或运算相当于取消。所以有一个异或运算的小技巧，就是用异或运算来交换两个整数的值。
          let a = 102, b = 324;
          a = a ^ b;
          b = a ^ b;
          a = a ^ b;
          console.log(a, b);
        6.按位或表达式由按位或运算符（|）连接相等表达式构成，按位或表达式把操作数视为二进制整数，然后把两个操作数按位做或运算。
        7.按位或运算常常被用在一种叫做 Bitmask 的技术上。Bitmask 相当于使用一个整数来当做多个布尔型变量，现在已经不太提倡了。
          不过一些比较老的 API 还是会这样设计，比如我们在 DOM 课程中，提到过的 Iterator API，我们看下例子：
          var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, false);
          var node;
          while(node = iterator.nextNode())
          {
              console.log(node);
          }
        8.这里的第二个参数就是使用了 Bitmask 技术，所以必须配合位运算表达式才能方便地传参。
      16.逻辑与表达式和逻辑或表达式
        1.逻辑与表达式由按位或表达式经过逻辑与运算符连接构成，逻辑或表达式则由逻辑与表达式经逻辑或运算符连接构成。
        2.这里需要注意的是，这两种表达式都不会做类型转换，所以尽管是逻辑运算，但是最终的结果可能是其它类型。
        3.比如：
          false || 1;
        4.这句将会得到结果 1。
          false && undefined;
        5.这句将会得到 undefined。
        6.另外还有一点，就是逻辑表达式具有短路的特性，例如：
          true || foo();
        7.这里的 foo 将不会被执行，这种中断后面表达式执行的特性就叫做短路。
      17.条件表达式 ConditionalExpression
        1.条件表达式由逻辑或表达式和条件运算符构成，条件运算符又称三目运算符，它有三个部分，由两个运算符?和:配合使用。
          condition ? branch1 : branch2
        2.这里需要注意，条件表达式也像逻辑表达式一样，可能忽略后面表达式的计算。这一点跟 C 语言的条件表达式是不一样的。
        3.条件表达式实际上就是 JavaScript 中的右值表达式了 RightHandSideExpression，是可以放到赋值运算后面的表达式。
      18.总结
        1.今天我们讲解了表达式的右边部分，讲到了包括更新表达式、一元运算表达式、乘方表达式、乘法表达式、移位表达式等 14 种表达式。
          至此为止，我们已经讲全了表达式。你如果有不熟悉的地方，可以随时回头查阅。
        2.留一个小任务，我们试着总结下 JavaScript 中所有的运算符优先级和结合性。例如：
          运算符优先级和结合性.jpg
  5.模块二：HTML和CSS
    1.HTML语义：div和span不是够用了吗？
    2.HTML语义：如何运用语义类标签来呈现Wiki网页？
    3.CSS语法：除了属性和选择器，你还需要知道这些带@的规则
    4.HTML元信息类标签：你知道head里一共能写哪几种标签吗？
    5.CSS 选择器：如何选中svg里的a元素？
    6.CSS选择器：伪元素是怎么回事儿？
    7.HTML链接：除了a标签，还有哪些标签叫链接？
    8.CSS排版：从毕升开始，我们就开始用正常流了
    9.HTML替换型元素：为什么link一个CSS要用href，而引入js要用src呢？
    10.HTML小实验：用代码分析HTML标准
    11.CSS Flex排版：为什么垂直居中这么难？
    12.CSS动画与交互：为什么动画要用贝塞尔曲线这么奇怪的东西？
    13.HTML语言：DTD到底是什么？
    14.CSS渲染：CSS是如何绘制颜色的？
    15.CSS小实验：动手做，用代码挖掘CSS属性
    16.HTML·ARIA：可访问性是只给盲人用的特性么？
  6.模块三：浏览器实现原理与API
    1.浏览器：一个浏览器是如何工作的？（阶段一）
      1.对于前端开发来说，我们平时与浏览器打交道的时间是最多的。可浏览器对前端同学来说更多像一个神秘黑盒子的存在。我们仅仅知道它
        能做什么，而不知道它是如何做到的。
      2.在我面试和接触过的前端开发者中，70% 的前端同学对这部分的知识内容只能达到“一知半解”的程度。甚至还有一部分同学会质疑这部分
        知识是否重要：这与我们的工作相关吗，学多了会不会偏移前端工作的方向？
      3.事实上，我们这里所需要了解的浏览器工作原理只是它的大致过程，这部分浏览器工作原理不但是前端面试的常考知识点，它还会辅助你的
        实际工作，学习浏览器的内部工作原理和个中缘由，对于我们做性能优化、排查错误都有很大的好处。
      4.在我们的课程中，我也会控制浏览器相关知识的粒度，把它保持在“给前端工程师了解浏览器”的水准，而不是详细到“给浏览器开发工程师
        实现浏览器”的水准。
      5.那么，我们今天开始，来共同思考一下。一个浏览器到底是如何工作的。
      6.实际上，对浏览器的实现者来说，他们做的事情，就是把一个 URL 变成一个屏幕上显示的网页。
      7.这个过程是这样的：
        1.浏览器首先使用 HTTP 协议或者 HTTPS 协议，向服务端请求页面；
        2.把请求回来的 HTML 代码经过解析，构建成 DOM 树；
        3.计算 DOM 树上的 CSS 属性；
        4.最后根据 CSS 属性对元素逐个进行渲染，得到内存中的位图；
        5.一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；
        6.合成之后，再绘制到界面上。
          浏览器工作原理.jpg
        7.我们在开始详细介绍之前，要建立一个感性认识。我们从 HTTP 请求回来开始，这个过程并非一般想象中的一步做完再做下一步，而是
          一条流水线。
        8.从 HTTP 请求回来，就产生了流式的数据，后续的 DOM 树构建、CSS 计算、渲染、合成、绘制，都是尽可能地流式处理前一步的产出：
          即不需要等到上一步骤完全结束，就开始处理上一步的输出，这样我们在浏览网页时，才会看到逐步出现的页面。
        9.首先我们来介绍下网络通讯的部分。
      8.HTTP 协议
        1.浏览器首先要做的事就是根据 URL 把数据取回来，取回数据使用的是 HTTP 协议，实际上这个过程之前还有 DNS 查询，不过这里就
          不详细展开了。
        2.我先来了解下 HTTP 的标准。
        3.HTTP 标准由 IETF 组织制定，跟它相关的标准主要有两份：
          HTTP1.1 https://tools.ietf.org/html/rfc2616
          HTTP1.1 https://tools.ietf.org/html/rfc7234
        4.HTTP 协议是基于 TCP 协议出现的，对 TCP 协议来说，TCP 协议是一条双向的通讯通道，HTTP 在 TCP 的基础上，规定了 
          Request-Response 的模式。这个模式决定了通讯必定是由浏览器端首先发起的。
        5.大部分情况下，浏览器的实现者只需要用一个 TCP 库，甚至一个现成的 HTTP 库就可以搞定浏览器的网络通讯部分。HTTP 是纯粹的
          文本协议，它是规定了使用 TCP 协议来传输文本格式的一个应用层协议。
        6.下面，我们试着用一个纯粹的 TCP 客户端来手工实现 HTTP 一下：
      9.实验
        1.我们的实验需要使用 telnet 客户端，这个客户端是一个纯粹的 TCP 连接工具（安装方法）。
        2.首先我们运行 telnet，连接到极客时间主机，在命令行里输入以下内容：
          telnet time.geekbang.org 80
        3.这个时候，TCP 连接已经建立，我们输入以下字符作为请求：
          GET / HTTP/1.1
          Host: time.geekbang.org
        4.按下两次回车，我们收到了服务端的回复：
          HTTP/1.1 301 Moved Permanently
          Date: Fri, 25 Jan 2019 13:28:12 GMT
          Content-Type: text/html
          Content-Length: 182
          Connection: keep-alive
          Location: https://time.geekbang.org/
          Strict-Transport-Security: max-age=15768000

          <html>
          <head><title>301 Moved Permanently</title></head>
          <body bgcolor="white">
          <center><h1>301 Moved Permanently</h1></center>
          <hr><center>openresty</center>
          </body>
          </html>
        5.这就是一次完整的 HTTP 请求的过程了，我们可以看到，在 TCP 通道中传输的，完全是文本。
        6.在请求部分，第一行被称作 request line，它分为三个部分，HTTP Method，也就是请求的“方法”，请求的路径和请求的协议和
          版本。
        7.在响应部分，第一行被称作 response line，它也分为三个部分，协议和版本、状态码和状态文本。
        8.紧随在 request line 或者 response line 之后，是请求头 / 响应头，这些头由若干行组成，每行是用冒号分隔的名称和值。
        9.在头之后，以一个空行（两个换行符）为分隔，是请求体 / 响应体，请求体可能包含文件或者表单数据，响应体则是 HTML 代码。
      10.HTTP 协议格式
        1.根据上面的分析，我们可以知道 HTTP 协议，大概可以划分成如下部分。
          http协议格式.jpg
        2.我们简单看一下，在这些部分中，path 是请求的路径完全由服务端来定义，没有很多的特别内容；而 version 几乎都是固定字符串；
          response body 是我们最熟悉的 HTML，我在后面会有专门的课程介绍，这里也就不多讲了。
        3.下面我们就来逐个给你介绍其它部分。
      11.HTTP Method（方法）
        1.我们首先来介绍一下 request line 里面的方法部分。这里的方法跟我们编程中的方法意义类似，表示我们此次 HTTP 请求希望执行的
          操作类型。方法有以下几种定义：
          GET
          POST
          HEAD
          PUT
          DELETE
          CONNECT
          OPTIONS
          TRACE
        2.浏览器通过地址栏访问页面都是 GET 方法。表单提交产生 POST 方法。
        3.HEAD 则是跟 GET 类似，只返回请求头，多数由 JavaScript 发起
        4.PUT 和 DELETE 分别表示添加资源和删除资源，但是实际上这只是语义上的一种约定，并没有强约束。
        5.CONNECT 现在多用于 HTTPS 和 WebSocket。
        6.OPTIONS 和 TRACE 一般用于调试，多数线上服务都不支持。
      12.HTTP Status code（状态码）和 Status text（状态文本）
        1.接下来我们看看 response line 的状态码和状态文本。常见的状态码有以下几种。
          1xx：临时回应，表示客户端请继续。
          2xx：请求成功。
            200：请求成功。
          3xx: 表示请求的目标有变化，希望客户端进一步处理。
            301&302：永久性与临时性跳转。
            304：跟客户端缓存没有更新。
          4xx：客户端请求错误。
            403：无权限。
            404：表示请求的页面不存在。
            418：It’s a teapot. 这是一个彩蛋，来自 ietf 的一个愚人节玩笑。（超文本咖啡壶控制协议）
          5xx：服务端请求错误。
            500：服务端错误。
            503：服务端暂时性错误，可以一会再试。
        2.对我们前端来说，1xx 系列的状态码是非常陌生的，原因是 1xx 的状态被浏览器 HTTP 库直接处理掉了，不会让上层应用知晓。
        3.2xx 系列的状态最熟悉的就是 200，这通常是网页请求成功的标志，也是大家最喜欢的状态码。
        4.3xx 系列比较复杂，301 和 302 两个状态表示当前资源已经被转移，只不过一个是永久性转移，一个是临时性转移。实际上 301 
          更接近于一种报错，提示客户端下次别来了。
        5.304 又是一个每个前端必知必会的状态，产生这个状态的前提是：客户端本地已经有缓存的版本，并且在 Request 中告诉了服务端，
          当服务端通过时间或者 tag，发现没有更新的时候，就会返回一个不含 body 的 304 状态。
      13.HTTP Head (HTTP 头)
        1.HTTP 头可以看作一个键值对。原则上，HTTP 头也是一种数据，我们可以自由定义 HTTP 头和值。不过在 HTTP 规范中，规定了一
          些特殊的 HTTP 头，我们现在就来了解一下它们。
        2.在 HTTP 标准中，有完整的请求 / 响应头规定，这里我们挑几个重点的说一下：
        3.我们先来看看 Request Header。
          httpRequestHeader.png
        4.接下来看一下 Response Header。
          httpResponseHeader.png
        5.这里仅仅列出了我认为比较常见的 HTTP 头，这些头是我认为前端工程师应该做到不需要查阅，看到就可以知道意思的 HTTP 头。完
          整的列表还是请你参考我给出的 rfc2616 标准。
      14.HTTP Request Body
        1.HTTP 请求的 body 主要用于提交表单场景。实际上，HTTP 请求的 body 是比较自由的，只要浏览器端发送的 body 服务端认可就
          可以了。一些常见的 body 格式是：
          application/json
          application/x-www-form-urlencoded
          multipart/form-data
          text/xml
        2.我们使用 HTML 的 form 标签提交产生的 HTML 请求，默认会产生 application/x-www-form-urlencoded 的数据格式，当有
          文件上传时，则会使用 multipart/form-data。
      15.HTTPS
        1.在 HTTP 协议的基础上，HTTPS 和 HTTP2 规定了更复杂的内容，但是它基本保持了 HTTP 的设计思想，即：使用上的 
          Request-Response 模式。
        2.我们首先来了解下 HTTPS。HTTPS 有两个作用，一是确定请求的目标服务端身份，二是保证传输的数据不会被网络中间节点窃听或者
          篡改。
        3.HTTPS 的标准也是由 RFC 规定的，你可以查看它的详情链接：
          https://tools.ietf.org/html/rfc2818
        4.HTTPS 是使用加密通道来传输 HTTP 的内容。但是 HTTPS 首先与服务端建立一条 TLS 加密通道。TLS 构建于 TCP 协议之上，它
          实际上是对传输的内容做一次加密，所以从传输内容上看，HTTPS 跟 HTTP 没有任何区别。
      16.HTTP 2
        1.HTTP 2 是 HTTP 1.1 的升级版本，你可以查看它的详情链接。
          https://tools.ietf.org/html/rfc7540
        2.HTTP 2.0 最大的改进有两点，一是支持服务端推送，二是支持 TCP 连接复用。
        3.服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来  
          的并行度不高，从而导致的性能问题。
        4.TCP 连接复用，则使用同一个 TCP 连接来传输多个 HTTP 请求，避免了 TCP 连接建立时的三次握手开销，和初建 TCP 连接时传输
          窗口小的问题。
        5.Note: 其实很多优化涉及更下层的协议。IP 层的分包情况，和物理层的建连时间是需要被考虑的。
      17.结语
        1.在这一节内容中，我们一起学习了浏览器的第一步工作，也就是“浏览器首先使用 HTTP 协议或 HTTPS 协议，向服务端请求页面”的
          这一过程。
        2.在这个过程中，掌握 HTTP 协议是重中之重。我从一个小实验开始，带你体验了一次完整的 HTTP 请求过程。我们一起先分析了 HTTP 
          协议的结构。接下来，我分别介绍了 HTTP 方法、HTTP 状态码和状态文本、HTTP Head 和 HTTP Request Body 几个重点需要注
          意的部分。
        3.最后，我还介绍了 HTTPS 和 HTTP 2 这两个补充版本，以便你可以更好地熟悉并理解新的特性。
        4.你在工作中，是否已经开始使用 HTTPS 和 HTTP 2 协议了呢？用到了它们的哪些特性，请留言告诉我吧。
    2.浏览器：一个浏览器是如何工作的？（阶段二）
      1.你好，我是 winter，今天我们继续来看浏览器的相关内容。
      2.我在上一篇文章中，简要介绍了浏览器的工作大致可以分为 6 个阶段，我们昨天讲完了第一个阶段，也就是通讯的部分：浏览器使用 HTTP 
        协议或者 HTTPS 协议，向服务端请求页面的过程。
      3.今天我们主要来看两个过程：如何解析请求回来的 HTML 代码，DOM 树又是如何构建的。
        解析HTML代码DOM树构建.png
      4.解析代码
        1.我们在前面讲到了 HTTP 的构成，但是我们有一部分没有详细讲解，那就是 Response 的 body 部分，这正是因为 HTTP 的 
          Response 的 body，就要交给我们今天学习的内容去处理了。
        2.HTML 的结构不算太复杂，我们日常开发需要的 90% 的“词”（指编译原理的术语 token，表示最小的有意义的单元），种类大约只有
          标签开始、属性、标签结束、注释、CDATA 节点几种。
        3.实际上有点麻烦的是，由于 HTML 跟 SGML 的千丝万缕的联系，我们需要做不少容错处理。“<?”和“<%”什么的也是必须要支持好的，
          报了错也不能吭声。
      5. 1. 词（token）是如何被拆分的
        1.首先我们来看看一个非常标准的标签，会被如何拆分：
          <p class="a">text text text</p>
        2.如果我们从最小有意义单元的定义来拆分，第一个词（token）是什么呢？显然，作为一个词（token），整个 p 标签肯定是过大了
          （它甚至可以嵌套）。
        3.那么，只用 p 标签的开头是不是合适吗？我们考虑到起始标签也是会包含属性的，最小的意义单元其实是“<p“，所以“<p”就是我们的
          第一个词（token）。
        4.我们继续拆分，可以把这段代码依次拆成词（token）：
          <p “标签开始”的开始；
          class=“a” 属性；
          > “标签开始”的结束；
          text text text 文本；
          </p> 标签结束。
        5.这是一段最简单的例子，类似的还有什么呢？现在我们可以来来看看这些词（token）长成啥样子：
          解析代码词token.png
        6.根据这样的分析，现在我们讲讲浏览器是如何用代码实现，我们设想，代码开始从 HTTP 协议收到的字符流读取字符。
        7.在接受第一个字符之前，我们完全无法判断这是哪一个词（token），不过，随着我们接受的字符越来越多，拼出其他的内容可能性就
          越来越少。
        8.比如，假设我们接受了一个字符“ < ” 我们一下子就知道这不是一个文本节点啦。
        9.之后我们再读一个字符，比如就是 x，那么我们一下子就知道这不是注释和 CDATA 了，接下来我们就一直读，直到遇到“>”或者空格，
          这样就得到了一个完整的词（token）了。
        10.实际上，我们每读入一个字符，其实都要做一次决策，而且这些决定是跟“当前状态”有关的。在这样的条件下，浏览器工程师要想实现
          把字符流解析成词（token），最常见的方案就是使用状态机。
      6. 2. 状态机
        1.绝大多数语言的词法部分都是用状态机实现的。那么我们来把部分词（token）的解析画成一个状态机看看： 
          词的解析状态机.png
        2.当然了，我们这里的分析比较粗略，真正完整的 HTML 词法状态机，比我们描述的要复杂的多。更详细的内容，你可以参考HTML 官方
          文档https://html.spec.whatwg.org/multipage/parsing.html#tokenization，HTML 官方文档规定了 80 个状态
          （顺便一说，HTML 是我见过唯一一个标准中规定了状态机实现的语言，对大部分语言来说，状态机是一种实现而非定义）。
        3.这里我们为了理解原理，用这个简单的状态机就足够说明问题了。
        4.状态机的初始状态，我们仅仅区分 “< ”和 “非 <”：
          如果获得的是一个非 < 字符，那么可以认为进入了一个文本节点；
          如果获得的是一个 < 字符，那么进入一个标签状态。
        5.不过当我们在标签状态时，则会面临着一些可能性。
          比如下一个字符是“ ! ” ，那么很可能是进入了注释节点或者 CDATA 节点。
          如果下一个字符是 “/ ”，那么可以确定进入了一个结束标签。
          如果下一个字符是字母，那么可以确定进入了一个开始标签。
          如果我们要完整处理各种 HTML 标准中定义的东西，那么还要考虑“ ? ”“% ”等内容。
        6.我们可以看到，用状态机做词法分析，其实正是把每个词的“特征字符”逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，
          形成一个联通图结构。
        7.由于状态机设计属于编译原理的基本知识，这里我们仅作一个简要的介绍。
        8.接下来就是代码实现的事情了，在 C/C++ 和 JavaScript 中，实现状态机的方式大同小异：我们把每个函数当做一个状态，参数是
          接受的字符，返回值是下一个状态函数。（这里我希望再次强调下，状态机真的是一种没有办法封装的东西，所以我们永远不要试图封
          装状态机。）
        9.为了方便理解和试验，我们这里用 JavaScript 来讲解，图上的 data 状态大概就像下面这样的：
          var data = function(c){
              if(c=="&") {
                  return characterReferenceInData;
              }
              if(c=="<") {
                  return tagOpen;
              }
              else if(c=="\0") {
                  error();
                  emitToken(c);
                  return data;
              }
              else if(c==EOF) {
                  emitToken(EOF);
                  return data;
              }
              else {
                  emitToken(c);
                  return data;
              }
          };
          var tagOpenState = function tagOpenState(c){
              if(c=="/") {
                  return endTagOpenState;
              }
              if(c.match(/[A-Z]/)) {
                  token = new StartTagToken();
                  token.name = c.toLowerCase();
                  return tagNameState;
              }
              if(c.match(/[a-z]/)) {
                  token = new StartTagToken();
                  token.name = c;
                  return tagNameState;
              }
              if(c=="?") {
                  return bogusCommentState;
              }
              else {
                  error();
                  return dataState;
              }
          };
          //……
        10.这段代码给出了状态机的两个状态示例：data 即为初始状态，tagOpenState 是接受了一个“ < ” 字符，来判断标签类型的状态。
        11.这里的状态机，每一个状态是一个函数，通过“if else”来区分下一个字符做状态迁移。这里所谓的状态迁移，就是当前状态函数返
          回下一个状态函数。
        12.这样，我们的状态迁移代码非常的简单：
          var state = data;
          var char
          while(char = getInput())
              state = state(char);
        13.这段代码的关键一句是“ state = state(char) ”，不论我们用何种方式来读取字符串流，我们都可以通过 state 来处理输入的
          字符流，这里用循环是一个示例，真实场景中，可能是来自 TCP 的输出流。
        13.状态函数通过代码中的 emitToken 函数来输出解析好的 token（词），我们只需要覆盖 emitToken，即可指定对解析结果的处理
          方式。
        14.词法分析器接受字符的方式很简单，就像下面这样：
          function HTMLLexicalParser(){
              //状态函数们……
              function data() {
                  // ……
              }
              function tagOpen() {
                  // ……
              }
              // ……
              var state = data;
              this.receiveInput = function(char) {
                  state = state(char);
              }
          }
        15.至此，我们就把字符流拆成了词（token）了。
      7.构建 DOM 树
        1.接下来我们要把这些简单的词变成 DOM 树，这个过程我们是使用栈来实现的，任何语言几乎都有栈，为了给你跑着玩，我们还是用 
          JavaScript 来实现吧，毕竟 JavaScript 中的栈只要用数组就好了。
          function HTMLSyntaticalParser(){
              var stack = [new HTMLDocument];
              this.receiveInput = function(token) {
                  //……
              }
              this.getOutput = function(){
                  return stack[0];
              }
          }
        2.我们这样来设计 HTML 的语法分析器，receiveInput 负责接收词法部分产生的词（token），通常可以由 emitToken 来调用。
        3.在接收的同时，即开始构建 DOM 树，所以我们的主要构建 DOM 树的算法，就写在 receiveInput 当中。当接收完所有输入，栈顶
          就是最后的根节点，我们 DOM 树的产出，就是这个 stack 的第一项。
        4.为了构建 DOM 树，我们需要一个 Node 类，接下来我们所有的节点都会是这个 Node 类的实例。
        5.在完全符合标准的浏览器中，不一样的 HTML 节点对应了不同的 Node 的子类，我们为了简化，就不完整实现这个继承体系了。我们
          仅仅把 Node 分为 Element 和 Text（如果是基于类的 OOP 的话，我们还需要抽象工厂来创建对象），
          function Element(){
              this.childNodes = [];
          }
          function Text(value){
              this.value = value || "";
          }
        6.前面我们的词（token）中，以下两个是需要成对匹配的：
          tag start
          tag end
        7.根据一些编译原理中常见的技巧，我们使用的栈正是用于匹配开始和结束标签的方案。
        8.对于 Text 节点，我们则需要把相邻的 Text 节点合并起来，我们的做法是当词（token）入栈时，检查栈顶是否是 Text 节点，如
          果是的话就合并 Text 节点。
        9.同样我们来看看直观的解析过程：
          <html maaa=a >
              <head>
                  <title>cool</title>
              </head>
              <body>
                  <img src="a" />
              </body>
          </html>
        10.通过这个栈，我们可以构建 DOM 树：
          栈顶元素就是当前节点；
          遇到属性，就添加到当前节点；
          遇到文本节点，如果当前节点是文本节点，则跟文本节点合并，否则入栈成为当前节点的子节点；
          遇到注释节点，作为当前节点的子节点；
          遇到 tag start 就入栈一个节点，当前节点就是这个节点的父节点；
          遇到 tag end 就出栈一个节点（还可以检查是否匹配）。
        11.我在文章里面放了一个视频，你可以点击查看用栈构造 DOM 树的全过程。
        12.当我们的源代码完全遵循 XHTML（这是一种比较严谨的 HTML 语法）时，这非常简单问题，然而 HTML 具有很强的容错能力，奥妙
          在于当 tag end 跟栈顶的 start tag 不匹配的时候如何处理。
        13.于是，这又有一个极其复杂的规则，幸好 W3C 又一次很贴心地把全部规则都整理地很好，我们只要翻译成对应的代码就好了，以下这
          个网站呈现了全部规则。你可以点击查看。
          http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction
      8.结语
        1.好了，总结一下。在今天的文章中，我带你继续探索了浏览器的工作原理，我们主要研究了解析代码和构建 DOM 树两个步骤。在解析代
          码的环节里，我们一起详细地分析了一个词（token）被拆分的过程，并且给出了实现它所需要的一个简单的状态机。
        2.在构建 DOM 树的环节中，基本思路是使用栈来构建 DOM 树为了方便你动手实践，我用 JavaScript 实现了这一过程。
        3.今天给你留的题目是：在语法和词法的代码，我已经给出了大体的结构，请你试着把内容补充完整吧。
    3.浏览器：一个浏览器是如何工作的？（阶段三）
      1.在上一节课中，我已经讲了浏览器的 DOM 构建过程，但是这个构建的 DOM，实际上信息是不全的，它只有节点和属性，不包含任何的样
        式信息。
      2.我们这一节课就来讲讲：浏览器是如何把 CSS 规则应用到节点上，并给这棵朴素的 DOM 树添加上 CSS 属性的。
      3.整体过程
        1.首先我们还是要感性地理解一下这个过程。
        2.首先 CSS 选择器这个名称，可能会给你带来一定的误解，觉得好像 CSS 规则是 DOM 树构建好了以后，再进行选择并给它添加样式
          的。实际上，这个过程并不是这样的。
        3.我们回忆一下我们在浏览器第一节课讲的内容，浏览器会尽量流式处理整个过程。我们上一节课构建 DOM 的过程是：从父到子，从先
          到后，一个一个节点构造，并且挂载到 DOM 树上的，那么这个过程中，我们是否能同步把 CSS 属性计算出来呢？
        4.答案是肯定的。
        5.在这个过程中，我们依次拿到上一步构造好的元素，去检查它匹配到了哪些规则，再根据规则的优先级，做覆盖和调整。所以，从这个
          角度看，所谓的选择器，应该被理解成“匹配器”才更合适。
        6.我在 CSS 语法部分，已经总结了选择器的各种符号，这里再把它列出来，我们回顾一下。
          空格: 后代，选中它的子节点和所有子节点的后代节点。
          >: 子代，选中它的子节点。
          +：直接后继选择器，选中它的下一个相邻节点。
          ~：后继，选中它之后所有的相邻节点。
          ||：列，选中表格中的一列。
        7.关于选择器的知识，我会在 CSS 的部分继续讲解。这里我们主要介绍浏览器是如何实现这些规则的。
        8.不知道你有没有发现，这里的选择器有个特点，那就是选择器的出现顺序，必定跟构建 DOM 树的顺序一致。这是一个 CSS 设计的原
          则，即保证选择器在 DOM 树构建到当前节点时，已经可以准确判断是否匹配，不需要后续节点信息。
        9.也就是说，未来也不可能会出现“父元素选择器”这种东西，因为父元素选择器要求根据当前节点的子节点，来判断当前节点是否被选中，
          而父节点会先于子节点构建。
        10.理解了 CSS 构建的大概过程，我们下面来看看具体的操作。
        11.首先，我们必须把 CSS 规则做一下处理。作为一门语言，CSS 需要先经过词法分析和语法分析，变成计算机能够理解的结构。
        12.这部分具体的做法属于编译原理的内容，这里就不做赘述了。我们这里假设 CSS 已经被解析成了一棵可用的抽象语法树。
        13.我们在之前的 CSS 课程中已经介绍过 compound-selector 的概念，一个 compound-selector 是检查一个元素的规则，而一
          个复合型选择器，则是由数个 compound-selector 通过前面讲的符号连接起来的。
      4.后代选择器 “空格”
        1.我们先来分析一下后代选择器，我们来一起看一个例子：
          a#b .cls {
              width: 100px;
          }
        2.可以把一个 CSS 选择器按照 compound-selector 来拆成数段，每当满足一段条件的时候，就前进一段。
        3.比如，在上面的例子中，当我们找到了匹配 a#b 的元素时，我们才会开始检查它所有的子代是否匹配 .cls。
        4.除了前进一段的情况，我们还需要处理后退的情况，比如，我们这样一段代码：
          <a id=b>
              <span>1<span>
              <span class=cls>2<span>
          </a>
          <span class=cls>3<span>
        5.当遇到 时，必须使得规则 a#b .cls 回退一步，这样第三个 span 才不会被选中。后代选择器的作用范围是父节点的所有子节点，
          因此规则是在匹配到本标签的结束标签时回退。
      5.后继选择器“ ~ ”
        1.接下来我们看下后继选择器，跟后代选择器不同的地方是，后继选择器只作用于一层，我们来看一个例子：
          .cls~* {
              border:solid 1px green;
          }
          <div>
          <span>1<span>
          <span class=cls>2<span>
          <span>
              3
              <span>4</span>
          <span>
          <span>5</span>
          </div>
        2.这里 .cls 选中了 span 2 然后 span 3 是它的后继，但是 span 3 的子节点 span 4 并不应该被选中，而 span 5 也是它
          的后继，因此应该被选中。
        3.按照 DOM 树的构造顺序，4 在 3 和 5 中间，我们就没有办法像前面讲的后代选择器一样通过激活或者关闭规则来实现匹配。
        4.但是这里有个非常方便的思路，就是给选择器的激活，带上一个条件：父元素。
        5.注意，这里后继选择器，当前半段的 .cls 匹配成功时，后续 * 所匹配的所有元素的父元素都已经确定了（后继节点和当前节点父元
          素相同是充分必要条件）。在我们的例子中，那个 div 就是后继节点的父元素。
      6.子代选择器“ >”
        1.我们继续看，子代选择器是如何实现的。
        2.实际上，有了前面讲的父元素这个约束思路，我们很容易实现子代选择器。区别仅仅是拿当前节点作为父元素，还是拿当前节点的父元
          素作为父元素。
          div>.cls {
              border:solid 1px green;
          }
          <div>
          <span>1<span>
          <span class=cls>2<span>
          <span>
              3
              <span>4</span>
          <span>
          <span>5</span>
          </div>
        3.我们看这段代码，当 DOM 树构造到 div 时，匹配了 CSS 规则的第一段，因为是子代选择器，我们激活后面的 .cls 选择条件，并
          且指定父元素必须是当前 div。于是后续的构建 DOM 树构建过程中，span 2 就被选中了。
      7.直接后继选择器“ +”
        1.直接后继选择器的实现是上述中最为简单的了，因为它只对唯一一个元素生效，所以不需要像前面几种一样反复激活和关闭规则。
        2.一个最简单的思路是，我们可以把它当作检查元素自身的选择器来处理。即我们把 #id+.cls 都当做检查某一个元素的选择器。
        3.另外的一种思路是：给后继选择器加上一个 flag，使它匹配一次后失效。你可以尝试一下，告诉我结果。
      8.列选择器“ || ”
        1.列选择器比较特别，它是专门针对表格的选择器，跟表格的模型建立相关，我们这里不详细讲了。
      9.其它
        1.我们不要忘记，CSS 选择器还支持逗号分隔，表示“或”的关系。这里最简单的实现是把逗号视为两条规则的一种简易写法。
        2.比如：
          a#b, .cls {

          }
        3.我们当作两条规则来处理：
          a#b {

          }
          .cls {

          }  
        4.还有一个情况，就是选择器可能有重合，这样，我们可以使用树形结构来进行一些合并，来提高效率：
          #a .cls {

          }

          #a span {

          }
          #a>span {

          }
        5.这里实际上可以把选择器构造成一棵树：
          #a
            < 空格 >.cls
            < 空格 >span
            >span
        6.需要注意的是，这里的树，必须要带上连接符。
      10.结语
        1.这一节我们讲解了 CSS 计算的过程。CSS 计算是把 CSS 规则应用到 DOM 树上，为 DOM 结构添加显示相关属性的过程。在这一
          节中，我们主要介绍了选择器的几种复合结构应该如何实现。
        2.在这一步骤之后，我们得到了一棵带有 CSS 属性的树，为我们后续打下了基础。
        3.最后留一个问题，你认为 CSS 语法解析成什么结构，最适合我们进行 CSS 计算。
    4.浏览器：一个浏览器是如何工作的？（阶段四）
      1.我们书接上文。浏览器进行到这一步，我们已经给 DOM 元素添加了用于展现的 CSS 属性，接下来，浏览器的工作就是确定每一个元素
        的位置了。我们的基本原则仍然不变，就是尽可能流式地处理上一步骤的输出。
      2.在构建 DOM 树和计算 CSS 属性这两个步骤，我们的产出都是一个一个的元素，但是在排版这个步骤中，有些情况下，我们就没法做到
        这样了。
      3.尤其是表格相关排版、Flex 排版和 Grid 排版，它们有一个显著的特点，那就是子元素之间具有关联性。
      4.基本概念
        1.首先我们先来介绍一些基本概念，使你可以感性地认识一下我们平常说的各种术语。
        2.“排版”这个概念最初来自活字印刷，是指我们把一个一个的铅字根据文章顺序，放入板框当中的步骤，排版的意思是确定每一个字的
          位置。
        3.在现代浏览器中，仍然借用了这个概念，但是排版的内容更加复杂，包括文字、图片、图形、表格等等，我们把浏览器确定它们位置的
          过程，叫作排版。
        4.浏览器最基本的排版方案是正常流排版，它包含了顺次排布和折行等规则，这是一个跟我们提到的印刷排版类似的排版方案，也跟我们
          平时书写文字的方式一致，所以我们把它叫做正常流。
        5.浏览器的文字排版遵循公认的文字排版规范，文字排版是一个复杂的系统，它规定了行模型和文字在行模型中的排布。行模型规定了行
          顶、行底、文字区域、基线等对齐方式。（你还记得小时候写英语的英语本吗？英语本上的四条线就是一个简单的行模型。）
        6.此外，浏览器支持不同语言，因为不同语言的书写顺序不一致，所以浏览器的文本排版还支持双向文字系统。
        7.浏览器又可以支持元素和文字的混排，元素被定义为占据长方形的区域，还允许边框、边距和留白，这个就是所谓的盒模型。
        8.在正常流的基础上，浏览器还支持两类元素：绝对定位元素和浮动元素。
          1.绝对定位元素把自身从正常流抽出，直接由 top 和 left 等属性确定自身的位置，不参加排版计算，也不影响其它元素。绝对定
            位元素由 position 属性控制。
          2.浮动元素则是使得自己在正常流的位置向左或者向右移动到边界，并且占据一块排版空间。浮动元素由 float 属性控制。
        9.除了正常流，浏览器还支持其它排版方式，比如现在非常常用的 Flex 排版，这些排版方式由外部元素的 display 属性来控制（注
          意，display 同时还控制元素在正常流中属于 inline 等级还是 block 等级）。
      5.正常流文字排版
        1.我们会在 CSS 部分详细介绍正常流排版的行为，我们这里主要介绍浏览器中的正常流。正常流是唯一一个文字和盒混排的排版方式，
          我们先从文字来讲起。
        2.要想理解正常流，我们首先要回忆一下自己如何在纸上写文章。
        3.首先，纸是有固定宽度的，虽然纸有固定高度，但是我们可以通过下一页纸的方式来接续，因此我们不存在写不下的场景。
        4.我们书写文字的时候，是从左到右依次书写，每一个字跟上一个字都不重叠，文字之间有一定间距，当写满一行时，我们换到下一行去
          继续写。
        5.书写中文时，文字的上、下、中轴线都对齐，书写英文时，不同字母的高度不同，但是有一条基线对齐。
        6.实际上浏览器环境也很类似。但是因为浏览器支持改变排版方向，不一定是从左到右从上到下，所以我们把文字依次书写的延伸方向称
          为主轴或者主方向，换行延伸的方向，跟主轴垂直交叉，称为交叉轴或者交叉方向。
        7.我们一般会从某个字体文件中获取某个特定文字的相关信息。我们获取到的信息大概类似下面：
          文字相关信息横行版本.png
        8.纵向版本：
          文字相关信息纵向版本.png
        9.这两张图片来自著名开源字体解析库 freetype，实际上，各个库对字体的理解大同小异，我们注意一下，advance 代表每一个文字
          排布后在主轴上的前进距离，它跟文字的宽 / 高不相等，是字体中最重要的属性。
        10.除了字体提供的字形本身包含的信息，文字排版还受到一些 CSS 属性影响，如 line-height、letter-spacing、
          word-spacing 等。
        11.在正常流的文字排版中，多数元素被当作长方形盒来排版，而只有 display 为 inline 的元素，是被拆成文本来排版的（还有一
          种 run-in 元素，它有时作为盒，有时作为文字，不太常用，这里不详细讲了）。
        12.display 值为 inline 的元素中的文字排版时会被直接排入文字流中，inline 元素主轴方向的 margin 属性和 border 属性
          （例如主轴为横向时的 margin-left 和 margin-right）也会被计算进排版前进距离当中。
        13.注意，当没有强制指定文字书写方向时，在左到右文字中插入右到左向文字，会形成一个双向文字盒，反之亦然。
        14.这样，即使没有元素包裹，混合书写方向的文字也可以形成一个盒结构，我们在排版时，遇到这样的双向文字盒，会先排完盒内再排
          盒外。
      6.正常流中的盒
        1.在正常流中，display 不为 inline 的元素或者伪元素，会以盒的形式跟文字一起排版。多数 display 属性都可以分成两部分：
          内部的排版和是否 inline，带有 inline- 前缀的盒，被称作行内级盒。
        2.根据盒模型，一个盒具有 margin、border、padding、width/height 等属性，它在主轴方向占据的空间是由对应方向的这几个
          属性之和决定的，而 vertical-align 属性决定了盒在交叉轴方向的位置，同时也会影响实际行高。
        3.所以，浏览器对行的排版，一般是先行内布局，再确定行的位置，根据行的位置计算出行内盒和文字的排版位置。
        4.块级盒比较简单，它总是单独占据一整行，计算出交叉轴方向的高度即可。
      7.绝对定位元素  
        1.position 属性为 absolute 的元素，我们需要根据它的包含块来确定位置，这是完全跟正常流无关的一种独立排版模式，逐层找到
          其父级的 position 非 static 元素即可。
      8.浮动元素排版
        1.loat 元素非常特别，浏览器对 float 的处理是先排入正常流，再移动到排版宽度的最左 / 最右（这里实际上是主轴的最前和最后）。
        2.移动之后，float 元素占据了一块排版的空间，因此，在数行之内，主轴方向的排版距离发生了变化，直到交叉轴方向的尺寸超过了浮
          动元素的交叉轴尺寸范围，主轴排版尺寸才会恢复。float 元素排布完成后，float 元素所在的行需要重新确定位置。
      9.其它的排版
        1.CSS 的每一种排版都有一个很复杂的规定，实际实现形式也各不相同。比如如 Flex 排版，支持了 flex 属性，flex 属性将每一行
          排版后的剩余空间平均分配给主轴方向的 width/height 属性。浏览器支持的每一种排版方式，都是按照对应的标准来实现的。
      10.结束
        1.这一部分，我们以正常流为主，介绍了浏览器的排版基本概念及一些算法。这里，我主要介绍了正常流中的文字排版、正常流中的盒、绝
          对定位元素、浮动元素排版这几种情况。最后，我还简单介绍了一下 Flex 排版。这属于进阶版的排版方式了，你可以了解一下。
        2.你平时喜欢使用方式排版呢，欢迎留言告诉我。
    5.浏览器：一个浏览器是如何工作的？（阶段五）
      1.你好，我是 winter。我们的浏览器系列已经进行到最后一篇。
      2.在之前的几篇文章中，我们已经经历了把 URL 变成字符流，把字符流变成词（token）流，把词（token）流构造成 DOM 树，把不含样
        式信息的 DOM 树应用 CSS 规则，变成包含样式信息的 DOM 树，并且根据样式信息，计算了每个元素的位置和大小。
      3.那么，我们最后的步骤，就是根据这些样式信息和大小信息，为每个元素在内存中渲染它的图形，并且把它绘制到对应的位置。
      4.渲染
        1.首先我们来谈谈渲染这个词，渲染也是个外来词，它是英文词 render 的翻译，render 这个词在英文里面，有“导致”“变成”的意思，
          也有“粉刷墙壁”的意思。
        2.在计算机图形学领域里，英文 render 这个词是一个简写，它是特指把模型变成位图的过程。我们把 render 翻译成“渲染”，是个非
          常有意思的翻译，中文里“渲染”这个词是一种绘画技法，是指沾清水把墨涂开的意思。
        3.所以，render 翻译成“渲染”，我认为是非常高明的，对 render 这个过程，用国画的渲染手法来概括，是颇有神似的。
        4.我们现在的一些框架，也会把“从数据变成 HTML 代码的过程”称为 render，其实我觉得这是非常具有误导性的，我个人是非常不喜欢
          这种命名方式，当然了，所谓“文无第一”，在自然语言的范围里，我们很难彻底否定这种用法的合理性。
        5.不过，在本篇文章中，我们可以约定一下，本文中出现的“渲染”一词，统一指的是它在图形学的意义，也就是把模型变成位图的过程。
        6.这里的位图就是在内存里建立一张二维表格，把一张图片的每个像素对应的颜色保存进去（位图信息也是 DOM 树中占据浏览器内存最多
          的信息，我们在做内存占用优化时，主要就是考虑这一部分）。
        7.浏览器中渲染这个过程，就是把每一个元素对应的盒变成位图。这里的元素包括 HTML 元素和伪元素，一个元素可能对应多个盒（比如 
          inline 元素，可能会分成多行）。每一个盒对应着一张位图。
        8.这个渲染过程是非常复杂的，但是总体来说，可以分成两个大类：图形和文字。
        9.盒的背景、边框、SVG 元素、阴影等特性，都是需要绘制的图形类。这就像我们实现 HTTP 协议必须要基于 TCP 库一样，这一部分，
          我们需要一个底层库来支持。
        10.一般的操作系统会提供一个底层库，比如在 Android 中，有大名鼎鼎的 Skia，而 Windows 平台则有 GDI，一般的浏览器会做一
          个兼容层来处理掉平台差异。
        11.这些盒的特性如何绘制，每一个都有对应的标准规定，而每一个的实现都可以作为一个独立的课题来研究，当年圆角 + 虚线边框，可
          是难倒了各个浏览器的工程师。考虑到这些知识互相都比较独立，对前端工程师来说也不是特别重要的细节，我们这里就不详细探究了。
        12.盒中的文字，也需要用底层库来支持，叫做字体库。字体库提供读取字体文件的基本能力，它能根据字符的码点抽取出字形。
        13.字形分为像素字形和矢量字形两种。通常的字体，会在 6px 8px 等小尺寸提供像素字形，比较大的尺寸则提供矢量字形。矢量字形
          本身就需要经过渲染才能继续渲染到元素的位图上去。目前最常用的字体库是 Freetype，这是一个 C++ 编写的开源的字体库。
        14.在最普遍的情况下，渲染过程生成的位图尺寸跟它在上一步排版时占据的尺寸相同。
        15.但是理想和现实是有差距的，很多属性会影响渲染位图的大小，比如阴影，它可能非常巨大，或者渲染到非常遥远的位置，所以为了优
          化，浏览器实际的实现中会把阴影作为一个独立的盒来处理。
        16.注意，我们这里讲的渲染过程，是不会把子元素绘制到渲染的位图上的，这样，当父子元素的相对位置发生变化时，可以保证渲染的结
          果能够最大程度被缓存，减少重新渲染。
      5.合成
        1.合成是英文术语 compositing 的翻译，这个过程实际上是一个性能考量，它并非实现浏览器的必要一环。
        2.我们上一小节中讲到，渲染过程不会把子元素渲染到位图上面，合成的过程，就是为一些元素创建一个“合成后的位图”（我们把它称为
          合成层），把一部分子元素渲染到合成的位图上面。
        3.看到这句话，我想你一定会问问题，到底是为哪些元素创建合成后的位图，把哪些子元素渲染到合成的位图上面呢？
        4.这就是我们要讲的合成的策略。我们前面讲了，合成是一个性能考量，那么合成的目标就是提高性能，根据这个目标，我们建立的原则
          就是最大限度减少绘制次数原则。
        5.我们举一个极端的例子。如果我们把所有元素都进行合成，比如我们为根元素 HTML 创建一个合成后的位图，把所有子元素都进行合成，
          那么会发生什么呢？
        6.那就是，一旦我们用 JavaScript 或者别的什么方式，改变了任何一个 CSS 属性，这份合成后的位图就失效了，我们需要重新绘制
          所有的元素。
        7.那么如果我们所有的元素都不合成，会怎样呢？结果就是，相当于每次我们都必须要重新绘制所有的元素，这也不是对性能友好的选择。
        8.那么好的合成策略是什么呢，好的合成策略是“猜测”可能变化的元素，把它排除到合成之外。
        9.我们来举个例子：  
          <div id="a">
              <div id="b">...</div>
              <div id="c" style="transform:translate(0,0)"></div>
          </div>
        10.假设我们的合成策略能够把 a、b 两个 div 合成，而不把 c 合成，那么，当我执行以下代码时：
          document.getElementById("c").style.transform = "translate(100px, 0)";
        11.我们绘制的时候，就可以只需要绘制 a 和 b 合成好的位图和 c，从而减少了绘制次数。这里需要注意的是，在实际场景中，我们的 
          b 可能有很多复杂的子元素，所以当合成命中时，性能提升收益非常之高。
        12.目前，主流浏览器一般根据 position、transform 等属性来决定合成策略，来“猜测”这些元素未来可能发生变化。
        13.但是，这样的猜测准确性有限，所以新的 CSS 标准中，规定了 will-change 属性，可以由业务代码来提示浏览器的合成策略，灵
          活运用这样的特性，可以大大提升合成策略的效果。
      6.绘制
        1.绘制是把“位图最终绘制到屏幕上，变成肉眼可见的图像”的过程，不过，一般来说，浏览器并不需要用代码来处理这个过程，浏览器只
          需要把最终要显示的位图交给操作系统即可。
        2.一般最终位图位于显存中，也有一些情况下，浏览器只需要把内存中的一张位图提交给操作系统或者驱动就可以了，这取决于浏览器运
          行的环境。不过无论如何，我们把任何位图合成到这个“最终位图”的操作称为绘制。
        3.这个过程听上去非常简单，这是因为在前面两个小节中，我们已经得到了每个元素的位图，并且对它们部分进行了合成，那么绘制过程，
          实际上就是按照 z-index 把它们依次绘制到屏幕上。
        4.然而如果在实际中这样做，会带来极其糟糕的性能。
        5.有一个一度非常流行于前端群体的说法，讲做 CSS 性能优化，应该尽量避免“重排”和“重绘”，前者讲的是我们上一课的排版行为，后
          者模糊地指向了我们本课程三小节讲的三个步骤，而实际上，这个说法大体不能算错，却不够准确。
        6.因为，实际上，“绘制”发生的频率比我们想象中要高得多。我们考虑一个情况：鼠标划过浏览器显示区域。这个过程中，鼠标的每次移
          动，都造成了重新绘制，如果我们不重新绘制，就会产生大量的鼠标残影。
        7.这个时候，限制绘制的面积就很重要了。如果鼠标某次位置恰巧遮盖了某个较小的元素，我们完全可以重新绘制这个元素来完成我们的
          目标，当然，简单想想就知道，这种事情不可能总是发生的。
        8.计算机图形学中，我们使用的方案就是“脏矩形”算法，也就是把屏幕均匀地分成若干矩形区域。
        9.当鼠标移动、元素移动或者其它导致需要重绘的场景发生时，我们只重新绘制它所影响到的几个矩形区域就够了。比矩形区域更小的影
          响最多只会涉及 4 个矩形，大型元素则覆盖多个矩形。
        10.设置合适的矩形区域大小，可以很好地控制绘制时的消耗。设置过大的矩形会造成绘制面积增大，而设置过小的矩形则会造成计算复杂。
        11.我们重新绘制脏矩形区域时，把所有与矩形区域有交集的合成层（位图）的交集部分绘制即可。
      7.结语
        1.在这一节课程中，我们讲解了浏览器中的位图操作部分，这包括了渲染、合成和绘制三个部分。渲染过程把元素变成位图，合成把一部
          分位图变成合成层，最终的绘制过程把合成层显示到屏幕上。
        2.当绘制完成时，就完成了浏览器的最终任务，把一个 URL 最后变成了一个可以看的网页图像。当然了，我们对每一个部分的讲解，都
          省略了大量的细节，比如我们今天讲到的绘制，就有意地无视了滚动区域。
        3.尽管如此，对浏览器工作原理的感性认识，仍然可以帮助我们理解很多前端技术的设计和应用技巧，浏览器的工作原理和性能部分非常
          强相关，我们在实践部分的性能优化部分，会再次跟你做一些探讨。
        4.实际上，如果你认真阅读浏览器系列的课程，是可以用 JavaScript 实现一个玩具浏览器的，我非常希望学习课程的同学中能有人这
          样做，一旦你做到了，收益会非常大。这就是我今天留给你的课外作业，你可以尝试一下。
    6.浏览器DOM：你知道HTML的节点有哪几种吗？
      1.今天我们进入浏览器 API 的学习, 这一节课，我们来学习一下 DOM API。
      2.DOM API 是最早被设计出来的一批 API，也是用途最广的 API，所以早年的技术社区，常常用 DOM 来泛指浏览器中所有的 API。不
        过今天这里我们要介绍的 DOM，指的就是狭义的文档对象模型。
      3.DOM API 介绍
        1.首先我们先来讲一讲什么叫做文档对象模型。
        2.顾名思义，文档对象模型是用来描述文档，这里的文档，是特指 HTML 文档（也用于 XML 文档，但是本课不讨论 XML）。同时它又
          是一个“对象模型”，这意味着它使用的是对象这样的概念来描述 HTML 文档。
        3.说起 HTML 文档，这是大家最熟悉的东西了，我们都知道，HTML 文档是一个由标签嵌套而成的树形结构，因此，DOM 也是使用树形
          的对象模型来描述一个 HTML 文档。
        4.DOM API 大致会包含 4 个部分。
          节点：DOM 树形结构中的节点相关 API。
          事件：触发和监听事件相关 API。
          Range：操作文字范围相关 API。
          遍历：遍历 DOM 需要的 API。
        5.事件相关 API 和事件模型，我们会用单独的课程讲解，所以我们本篇文章重点会为你介绍节点和遍历相关 API。
        6.DOM API 数量很多，我希望给你提供一个理解 DOM API 设计的思路，避免单靠机械的方式去死记硬背。
      4.节点
        1.DOM 的树形结构所有的节点有统一的接口 Node，我们按照继承关系，给你介绍一下节点的类型。
          DOM节点类型.png
        2.在这些节点中，除了 Document 和 DocumentFrangment，都有与之对应的 HTML 写法，我们可以看一下。
          Element: <tagname>...</tagname>
          Text: text
          Comment: <!-- comments -->
          DocumentType: <!Doctype html>
          ProcessingInstruction: <?a 1?>
        3.我们在编写 HTML 代码并且运行后，就会在内存中得到这样一棵 DOM 树，HTML 的写法会被转化成对应的文档模型，而我们则可以
          通过 JavaScript 等语言去访问这个文档模型。
        4.这里我们每天都需要用到，要重点掌握的是：Document、Element、Text 节点。
        5.DocumentFragment 也非常有用，它常常被用来高性能地批量添加节点。因为 Comment、DocumentType 和 
          ProcessingInstruction 很少需要运行时去修改和操作，所以有所了解即可。
      5.Node
        1.Node 是 DOM 树继承关系的根节点，它定义了 DOM 节点在 DOM 树上的操作，首先，Node 提供了一组属性，来表示它在 DOM 树
          中的关系，它们是：
          parentNode
          childNodes
          firstChild
          lastChild
          nextSibling
          previousSibling
        2.从命名上，我们可以很清晰地看出，这一组属性提供了前、后、父、子关系，有了这几个属性，我们可以很方便地根据相对位置获取元
          素。当然，Node 中也提供了操作 DOM 树的 API，主要有下面几种。
          appendChild
          insertBefore
          removeChild
          replaceChild
        3.这个命名跟上面一样，我们基本可以知道 API 的作用。这几个 API 的设计可以说是饱受诟病。其中最主要的批评是它不对称——只有
          before，没有 after，而 jQuery 等框架都对其做了补充。
        4.实际上，appendChild 和 insertBefore 的这个设计，是一个“最小原则”的设计，这两个 API 是满足插入任意位置的必要 API，
          而 insertAfter，则可以由这两个 API 实现出来。
        5.我个人其实不太喜欢这个设计，对我而言，insertAt(pos) 更符合审美一些。当然，不论喜不喜欢，这个标准已经确定，我们还是必
          须要掌握它。
        6.这里从设计的角度还想要谈一点，那就是，所有这几个修改型的 API，全都是在父元素上操作的，比如我们要想实现“删除一个元素的
          上一个元素”，必须要先用 parentNode 获取其父元素。
        7.这样的设计是符合面向对象的基本原则的。还记得我们在 JavaScript 对象部分讲的对象基本特征吗？“拥有哪些子元素”是父元素的
          一种状态，所以修改状态，应该是父元素的行为。这个设计我认为是 DOM API 中好的部分。
        8.到此为止，Node 提供的 API 已经可以很方便（大概吧）地对树进行增、删、遍历等操作了。
        9.除此之外，Node 还提供了一些高级 API，我们来认识一下它们。
          compareDocumentPosition 是一个用于比较两个节点中关系的函数。
          contains 检查一个节点是否包含另一个节点的函数。
          isEqualNode 检查两个节点是否完全相同。
          isSameNode 检查两个节点是否是同一个节点，实际上在 JavaScript 中可以用“===”。
          cloneNode 复制一个节点，如果传入参数 true，则会连同子元素做深拷贝。
        10.DOM 标准规定了节点必须从文档的 create 方法创建出来，不能够使用原生的 JavaScript 的 new 运算。于是 document 对
          象有这些方法。
          createElement
          createTextNode
          createCDATASection
          createComment
          createProcessingInstruction
          createDocumentFragment
          createDocumentType
        11.上面的这些方法都是用于创建对应的节点类型。你可以自己尝试一下。
      6.Element 与 Attribute
        1.Node 提供了树形结构上节点相关的操作。而大部分时候，我们比较关注的是元素。Element 表示元素，它是 Node 的子类。
        2.元素对应了 HTML 中的标签，它既有子节点，又有属性。所以 Element 子类中，有一系列操作属性的方法。
        3.我们需要注意，对 DOM 而言，Attribute 和 Property 是完全不同的含义，只有特性场景下，两者才会互相关联（这里在后面我
          会详细讲解，今天的文章里我就不展开了）。
        4.首先，我们可以把元素的 Attribute 当作字符串来看待，这样就有以下的 API：
          getAttribute
          setAttribute
          removeAttribute
          hasAttribute
        5.如果你追求极致的性能，还可以把 Attribute 当作节点：
          getAttributeNode
          setAttributeNode
        6.此外，如果你喜欢 property 一样的访问 attribute，还可以使用 attributes 对象，比如 
          document.body.attributes.class = “a” 等效于 document.body.setAttribute(“class”, “a”)。
      7.查找元素
        1.document 节点提供了查找元素的能力。比如有下面的几种。
          querySelector
          querySelectorAll
          getElementById
          getElementsByName
          getElementsByTagName
          getElementsByClassName
        2.我们需要注意，getElementById、getElementsByName、getElementsByTagName、getElementsByClassName，这几个 
          API 的性能高于 querySelector。
        3.而 getElementsByName、getElementsByTagName、getElementsByClassName 获取的集合并非数组，而是一个能够动态更
          新的集合。
        4.我们看一个例子：
          var collection = document.getElementsByClassName('winter');
          console.log(collection.length);
          var winter = document.createElement('div');
          winter.setAttribute('class', 'winter')
          document.documentElement.appendChild(winter)
          console.log(collection.length);
        5.在这段代码中，我们先获取了页面的 className 为 winter 的元素集合，不出意外的话，应该是空。
        6.我们通过 console.log 可以看到集合的大小为 0。之后我们添加了一个 class 为 winter 的 div，这时候我们再看集合，可
          以发现，集合中出现了新添加的元素。
        7.这说明浏览器内部是有高速的索引机制，来动态更新这样的集合的。所以，尽管 querySelector 系列的 API 非常强大，我们还是
          应该尽量使用 getElement 系列的 API。
      8.遍历
        1.前面已经提到过，通过 Node 的相关属性，我们可以用 JavaScript 遍历整个树。实际上，DOM API 中还提供了 NodeIterator 
          和 TreeWalker 来遍历树。
        2.比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。
        3.NodeIterator 的基本用法示例如下：
          var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, false);
          var node;
          while(node = iterator.nextNode())
          {
              console.log(node);
          }
        4.这个 API 的设计非常老派，这么讲的原因主要有两点，一是循环并没有类似“hasNext”这样的方法，而是直接以 nextNode 返回
          null 来标志结束，二是第二个参数是掩码，这两个设计都是传统 C 语言里比较常见的用法。
        5.放到今天看，这个迭代器无法匹配 JavaScript 的迭代器语法，而且 JavaScript 位运算并不高效，掩码的设计就徒增复杂性了。
        6.这里请你注意一下这个例子中的处理方法，通常掩码型参数，我们都是用按位或运算来叠加。而针对这种返回 null 表示结束的迭代
          器，我使用了在 while 循环条件中赋值，来保证循环次数和调用 next 次数严格一致（但这样写可能违反了某些编码规范）。
        7.我们再来看一下 TreeWalker 的用法。
          var walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, null, false)
          var node;
          while(node = walker.nextNode())
          {
              if(node.tagName === "p")
                  node.nextSibling();
              console.log(node);
          }
        8.比起 NodeIterator，TreeWalker 多了在 DOM 树上自由移动当前节点的能力，一般来说，这种 API 用于“跳过”某些节点，或
          者重复遍历某些节点。
        9.总的来说，我个人不太喜欢 TreeWalker 和 NodeIterator 这两个 API，建议需要遍历 DOM 的时候，直接使用递归和 Node 
          的属性。
      9.Range
        1.Range API 是一个比较专业的领域，如果不做富文本编辑类的业务，不需要太深入。这里我们就仅介绍概念和给出基本用法的示例，
          你只要掌握即可。
        2.Range API 表示一个 HTML 上的范围，这个范围是以文字为最小单位的，所以 Range 不一定包含完整的节点，它可能是 Text 
          节点中的一段，也可以是头尾两个 Text 的一部分加上中间的元素。
        3.我们通过 Range API 可以比节点 API 更精确地操作 DOM 树，凡是 节点 API 能做到的，Range API 都可以做到，而且可以做
          到更高性能，但是 Range API 使用起来比较麻烦，所以在实际项目中，并不常用，只有做底层框架和富文本编辑对它有强需求。
        4.创建 Range 一般是通过设置它的起止来实现，我们可以看一个例子：
          var range = new Range(),
              firstText = p.childNodes[1],
              secondText = em.firstChild
          range.setStart(firstText, 9) // do not forget the leading space
          range.setEnd(secondText, 4)
        5.此外，通过 Range 也可以从用户选中区域创建，这样的 Range 用于处理用户选中区域:
          var range = document.getSelection().getRangeAt(0);
        6.更改 Range 选中区段内容的方式主要是取出和插入，分别由 extractContents 和 insertNode 来实现。
          var fragment = range.extractContents()
          range.insertNode(document.createTextNode("aaaa"))
        7.最后我们看一个完整的例子。
          var range = new Range(),
              firstText = p.childNodes[1],
              secondText = em.firstChild
          range.setStart(firstText, 9) // do not forget the leading space
          range.setEnd(secondText, 4)

          var fragment = range.extractContents()
          range.insertNode(document.createTextNode("aaaa"))
        8.这个例子展示了如何使用 range 来取出元素和在特定位置添加新元素。
      10.总结
        1.在今天的文章中，我们一起了解了 DOM API 的内容。DOM API 大致会包含 4 个部分。
          节点：DOM 树形结构中的节点相关 API。
          事件：触发和监听事件相关 API。
          Range：操作文字范围相关 API。
          遍历：遍历 DOM 需要的 API。
        2.DOM API 中还提供了 NodeIterator 和 TreeWalker 来遍历树。比起直接用属性来遍历，NodeIterator 和 TreeWalker 提
          供了过滤功能，还可以把属性节点也包含在遍历之内。
        3.除此之外，我们还谈到了 Range 的一些基础知识点，这里你掌握即可。
        4.最后，我给你留了一个题目，请你用 DOM API 来实现遍历整个 DOM 树，把所有的元素的 tagName 打印出来。
      11.补充阅读：命名空间
        1.我们本课介绍的所有 API，特意忽略了命名空间。
        2.在 HTML 场景中，需要考虑命名空间的场景不多。最主要的场景是 SVG。创建元素和属性相关的 API 都有带命名空间的版本：
          document
            createElementNS
            createAttributeNS
          Element
            getAttributeNS
            setAttributeNS
            getAttributeNodeNS
            setAttributeNodeNS
            removeAttributeNS
            hasAttributeNS
            attributes.setNamedItemNS
            attributes.getNamedItemNS
            attributes.removeNamedItemNS
        3.若要创建 Document 或者 Doctype，也必须要考虑命名空间问题。DOM 要求从 document.implementation 来创建。
          document.implementation.createDocument
          document.implementation.createDocumentType
        4.除此之外，还提供了一个快捷方式，你也可以动手尝试一下。
          document.implementation.createHTMLDocument
    7.浏览器CSSOM：如何获取一个元素的准确位置
      1.在前面的课程中，我们已经学习了 DOM 相关的 API，狭义的 DOM API 仅仅包含 DOM 树形结构相关的内容。今天，我们再来学习一
        类新的 API：CSSOM。
      2.我想，你在最初接触浏览器 API 的时候，应该都有跟我类似的想法：“好想要 element.width、element.height 这样的 API 啊”。
      3.这样的 API 可以直接获取元素的显示相关信息，它们是非常符合人的第一印象直觉的设计，但是，偏偏 DOM API 中没有这样的内容。
      4.随着学习的深入，我才知道，这样的设计是有背后的逻辑的，正如 HTML 和 CSS 分别承担了语义和表现的分工，DOM 和 CSSOM 也有
        语义和表现的分工。
      5.DOM 中的所有的属性都是用来表现语义的属性，CSSOM 的则都是表现的属性，width 和 height 这类显示相关的属性，都属于我们今
        天要讲的 CSSOM。
      6.顾名思义，CSSOM 是 CSS 的对象模型，在 W3C 标准中，它包含两个部分：描述样式表和规则等 CSS 的模型部分（CSSOM），和跟元
        素视图相关的 View 部分（CSSOM View）。
      7.在实际使用中，CSSOM View 比 CSSOM 更常用一些，因为我们很少需要用代码去动态地管理样式表。
      8.在今天的文章中，我来分别为你介绍这两部分的 API。
      9.CSSOM
        1.首先我们来介绍下 CSS 中样式表的模型，也就是 CSSOM 的本体。
        2.我们通常创建样式表也都是使用 HTML 标签来做到的，我们用 style 标签和 link 标签创建样式表，例如：
          <style title="Hello">
          a {
            color:red;
          }
          </style>
          <link rel="stylesheet" title="x" href="data:text/css,p%7Bcolor:blue%7D">
        3.我们创建好样式表后，还有可能要对它进行一些操作。如果我们以 DOM 的角度去理解的话，这些标签在 DOM 中是一个节点，它们有
          节点的内容、属性，这两个标签中，CSS 代码有的在属性、有的在子节点。这两个标签也遵循 DOM 节点的操作规则，所以可以使用 
          DOM API 去访问。
        4.但是，这样做的后果是我们需要去写很多分支逻辑，并且，要想解析 CSS 代码结构也不是一件简单的事情，所以，这种情况下，我们
          直接使用 CSSOM API 去操作它们生成的样式表，这是一个更好的选择。
        5.我们首先了解一下 CSSOM API 的基本用法，一般来说，我们需要先获取文档中所有的样式表：
          document.styleSheets
        6.document 的 styleSheets 属性表示文档中的所有样式表，这是一个只读的列表，我们可以用方括号运算符下标访问样式表，也可
          以使用 item 方法来访问，它有 length 属性表示文档中的样式表数量。
        7.样式表只能使用 style 标签或者 link 标签创建（对 XML 来说，还可以使用，咱们暂且不表）。
        8.我们虽然无法用 CSSOM API 来创建样式表，但是我们可以修改样式表中的内容。
          document.styleSheets[0].insertRule("p { color:pink; }", 0)
          document.styleSheets[0].removeRule(0)
        9.更进一步，我们可以获取样式表中特定的规则（Rule），并且对它进行一定的操作，具体来说，就是使用它的 cssRules 属性来实现：
          document.styleSheets[0].cssRules
        10.这里取到的规则列表，同样是支持 item、length 和下标运算。
        11.不过，这里的 Rules 可就没那么简单了，它可能是 CSS 的 at-rule，也可能是普通的样式规则。不同的 rule 类型，具有不同
          的属性。
        12.我们在 CSS 语法部分，已经为你整理过 at-rule 的完整列表，多数 at-rule 都对应着一个 rule 类型：
          CSSStyleRule
          CSSCharsetRule
          CSSImportRule
          CSSMediaRule
          CSSFontFaceRule
          CSSPageRule
          CSSNamespaceRule
          CSSKeyframesRule
          CSSKeyframeRule
          CSSSupportsRule
        13.具体的规则支持的属性，建议你可以用到的时候，再去查阅 MDN 或者 W3C 的文档，在我们的文章中，仅为你详细介绍最常用的 
          CSSStyleRule。
        14.CSSStyleRule 有两个属性：selectorText 和 style，分别表示一个规则的选择器部分和样式部分。
        15.selector 部分是一个字符串，这里显然偷懒了没有设计进一步的选择器模型，我们按照选择器语法设置即可。
        16.style 部分是一个样式表，它跟我们元素的 style 属性是一样的类型，所以我们可以像修改内联样式一样，直接改变属性修改规
          则中的具体 CSS 属性定义，也可以使用 cssText 这样的工具属性。
        17.此外，CSSOM 还提供了一个非常重要的方法，来获取一个元素最终经过 CSS 计算得到的属性：
          window.getComputedStyle(elt, pseudoElt);
        18.其中第一个参数就是我们要获取属性的元素，第二个参数是可选的，用于选择伪元素。
        19.好了，到此为止，我们可以使用 CSSOM API 自由地修改页面已经生效的样式表了。接下来，我们来一起关注一下视图的问题。
      10.CSSOM View
        1.CSSOM View 这一部分的 API，可以视为 DOM API 的扩展，它在原本的 Element 接口上，添加了显示相关的功能，这些功能，
          又可以分成三个部分：窗口部分，滚动部分和布局部分，下面我来分别带你了解一下。
      11.窗口 API
        1.窗口 API 用于操作浏览器窗口的位置、尺寸等。
          moveTo(x, y) 窗口移动到屏幕的特定坐标；
          moveBy(x, y) 窗口移动特定距离；
          resizeTo(x, y) 改变窗口大小到特定尺寸；
          resizeBy(x, y) 改变窗口大小特定尺寸。
        2.此外，窗口 API 还规定了 window.open() 的第三个参数：
          window.open("about:blank", "_blank" ,"width=100,height=100,left=100,right=100" )  
        3.一些浏览器出于安全考虑没有实现，也不适用于移动端浏览器，这部分你仅需简单了解即可。下面我们来了解一下滚动 API。
      12.滚动 API
        1.要想理解滚动，首先我们必须要建立一个概念，在 PC 时代，浏览器可视区域的滚动和内部元素的滚动关系是比较模糊的，但是在移
          动端越来越重要的今天，两者必须分开看待，两者的性能和行为都有区别。
      13.视口滚动 API
        1.可视区域（视口）滚动行为由 window 对象上的一组 API 控制，我们先来了解一下：
          scrollX 是视口的属性，表示 X 方向上的当前滚动距离，有别名 pageXOffset；
          scrollY 是视口的属性，表示 Y 方向上的当前滚动距离，有别名 pageYOffset；
          scroll(x, y) 使得页面滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}；
          scrollBy(x, y) 使得页面滚动特定的距离，支持传入配置型参数 {top, left}。
        2.通过这些属性和方法，我们可以读取视口的滚动位置和操纵视口滚动。不过，要想监听视口滚动事件，我们需要在 document 对象上
          绑定事件监听函数：
          document.addEventListener("scroll", function(event){
            //......
          })
        3.视口滚动 API 是页面的顶层容器的滚动，大部分移动端浏览器都会采用一些性能优化，它和元素滚动不完全一样，请大家一定建立这
          个区分的意识。
      14.元素滚动 API
        1.接下来我们来认识一下元素滚动 API，在 Element 类（参见 DOM 部分），为了支持滚动，加入了以下 API。
          scrollTop 元素的属性，表示 Y 方向上的当前滚动距离。
          scrollLeft 元素的属性，表示 X 方向上的当前滚动距离。
          scrollWidth 元素的属性，表示元素内部的滚动内容的宽度，一般来说会大于等于元素宽度。
          scrollHeight 元素的属性，表示元素内部的滚动内容的高度，一般来说会大于等于元素高度。
          scroll(x, y) 使得元素滚动到特定的位置，有别名 scrollTo，支持传入配置型参数 {top, left}。
          scrollBy(x, y) 使得元素滚动到特定的位置，支持传入配置型参数 {top, left}。
          scrollIntoView(arg) 滚动元素所在的父元素，使得元素滚动到可见区域，可以通过 arg 来指定滚到中间、开始或者就近。
        2.除此之外，可滚动的元素也支持 scroll 事件，我们在元素上监听它的事件即可：
          element.addEventListener("scroll", function(event){
            //......
          })
        3.这里你需要注意一点，元素部分的 API 设计与视口滚动命名风格上略有差异，你在使用的时候不要记混。
      15.布局 API
        1.最后我们来介绍一下布局 API，这是整个 CSSOM 中最常用到的部分，我们同样要分成全局 API 和元素上的 API。
      16.全局尺寸信息
        1.window 对象上提供了一些全局的尺寸信息，它是通过属性来提供的，我们一起来了解一下来这些属性。
          window对象上全局的尺寸信息.png
          window.innerHeight, window.innerWidth 这两个属性表示视口的大小。
          window.outerWidth, window.outerHeight 这两个属性表示浏览器窗口占据的大小，很多浏览器没有实现，一般来说这两个属性无关紧要。
          window.devicePixelRatio 这个属性非常重要，表示物理像素和 CSS 像素单位的倍率关系，Retina 屏这个值是 2，后来也出现了一些 3 倍的 Android 屏。
          window.screen （屏幕尺寸相关的信息）
            window.screen.width, window.screen.height 设备的屏幕尺寸。
            window.screen.availWidth, window.screen.availHeight 设备屏幕的可渲染区域尺寸，一些 Android 机器会把屏幕的一部分预留做固定按钮，所以有这两个属性，实际上一般浏览器不会实现的这么细致。
            window.screen.colorDepth, window.screen.pixelDepth 这两个属性是固定值 24，应该是为了以后预留。
        2.虽然 window 有这么多相关信息，在我看来，我们主要使用的是 innerHeight、innerWidth 和 devicePixelRatio 三个属性，
          因为我们前端开发工作只需要跟视口打交道，其它信息大概了解即可。
      17.元素的布局信息
        1.最后我们来到了本节课一开始提到的问题，我们是否能够取到一个元素的宽（width）和高（height）呢？
        2.实际上，我们首先应该从脑中消除“元素有宽高”这样的概念，我们课程中已经多次提到了，有些元素可能产生多个盒，事实上，只有盒
          有宽和高，元素是没有的。
        3.所以我们获取宽高的对象应该是“盒”，于是 CSSOM View 为 Element 类添加了两个方法：
          getClientRects();
          getBoundingClientRect()。
        4.getClientRects 会返回一个列表，里面包含元素对应的每一个盒所占据的客户端矩形区域，这里每一个矩形区域可以用 x, y, 
          width, height 来获取它的位置和尺寸。
        5.getBoundingClientRect ，这个 API 的设计更接近我们脑海中的元素盒的概念，它返回元素对应的所有盒的包裹的矩形区域，需
          要注意，这个 API 获取的区域会包括当 overflow 为 visible 时的子元素区域。
        6.根据实际的精确度需要，我们可以选择何时使用这两个 API。
        7.这两个 API 获取的矩形区域都是相对于视口的坐标，这意味着，这些区域都是受滚动影响的。
        8.如果我们要获取相对坐标，或者包含滚动区域的坐标，需要一点小技巧：
          var offsetX = document.documentElement.getBoundingClientRect().x - element.getBoundingClientRect().x;
        9.如这段代码所示，我们只需要获取文档跟节点的位置，再相减即可得到它们的坐标。
        10.这两个 API 的兼容性非常好，定义又非常清晰，建议你如果是用 JavaScript 实现视觉效果时，尽量使用这两个 API。
      18.结语
        1.今天我们一起学习了 CSSOM 这一类型的 API。我们首先就说到了，就像 HTML 和 CSS 分别承担了语义和表现的分工，DOM 和 
          CSSOM 也有语义和表现的分工。
        2.CSSOM 是 CSS 的对象模型，在 W3C 标准中，它包含两个部分：描述样式表和规则等 CSS 的模型部分（CSSOM），和跟元素视图相
          关的 View 部分（CSSOM View）。
        3.最后留给你一个问题，写好欢迎留言来讨论，请找一个网页，用我们今天讲的 API，把页面上的所有盒的轮廓画到一个 canvas 元素上。
    8.浏览器事件：为什么会有捕获过程和冒泡过程？
      1.你好，我是 winter。这一节课，我们进入了浏览器的部分，一起来学习一下事件。
      2.事件概述
        1.在开始接触具体的 API 之前，我们要先了解一下事件。一般来说，事件来自输入设备，我们平时的个人设备上，输入设备有三种：
          键盘；
          鼠标；
          触摸屏。
        2.这其中，触摸屏和鼠标又有一定的共性，它们被称作 pointer 设备，所谓 pointer 设备，是指它的输入最终会被抽象成屏幕上面的
          一个点。但是触摸屏和鼠标又有一定区别，它们的精度、反应时间和支持的点的数量都不一样。
        3.我们现代的 UI 系统，都源自 WIMP 系统。WIMP 即 Window Icon Menu Pointer 四个要素，它最初由施乐公司研发，后来被微
          软和苹果两家公司应用在了自己的操作系统上（关于这个还有一段有趣的故事，我附在文末了）。
        4.WIMP 是如此成功，以至于今天很多的前端工程师会有一个观点，认为我们能够“点击一个按钮”，实际上并非如此，我们只能够点击鼠标
          上的按钮或者触摸屏，是操作系统和浏览器把这个信息对应到了一个逻辑上的按钮，再使得它的视图对点击事件有反应。这就引出了我们
          第一个要讲解的机制：捕获与冒泡。
      3.捕获与冒泡
        1.很多文章会讲到捕获过程是从外向内，冒泡过程是从内向外，但是这里我希望讲清楚，为什么会有捕获过程和冒泡过程。
        2.我们刚提到，实际上点击事件来自触摸屏或者鼠标，鼠标点击并没有位置信息，但是一般操作系统会根据位移的累积计算出来，跟触摸屏
          一样，提供一个坐标给浏览器。
        3.那么，把这个坐标转换为具体的元素上事件的过程，就是捕获过程了。而冒泡过程，则是符合人类理解逻辑的：当你按电视机开关时，你
          也按到了电视机。
        4.所以我们可以认为，捕获是计算机处理事件的逻辑，而冒泡是人类处理事件的逻辑。
        5.以下代码展示了事件传播顺序：
          <body>
            <input id="i"/>
          </body>

          document.body.addEventListener("mousedown", () => {
            console.log("key1")
          }, true)

          document.getElementById("i").addEventListener("mousedown", () => {
            console.log("key2")
          }, true)

          document.body.addEventListener("mousedown", () => {
            console.log("key11")
          }, false)

          document.getElementById("i").addEventListener("mousedown", () => {
            console.log("key22")
          }, false)
        6.我们监听了 body 和一个 body 的子元素上的鼠标按下事件，捕获和冒泡分别监听，可以看到，最终产生的顺序是：
          “key1”
          “key2”
          “key22”
          “key11”
        7.这是捕获和冒泡发生的完整顺序。
        8.在一个事件发生时，捕获过程跟冒泡过程总是先后发生，跟你是否监听毫无关联。
        9.在我们实际监听事件时，我建议这样使用冒泡和捕获机制：默认使用冒泡模式，当开发组件时，遇到需要父元素控制子元素的行为，可以
          使用捕获机制。
        10.理解了冒泡和捕获的过程，我们再看监听事件的 API，就非常容易理解了。
        11.addEventListener 有三个参数：
          事件名称；
          事件处理函数；
          捕获还是冒泡。
        12.事件处理函数不一定是函数，也可以是个 JavaScript 具有 handleEvent 方法的对象，看下例子：
          var o = {
            handleEvent: event => console.log(event)
          }
          document.body.addEventListener("keydown", o, false);
        13.第三个参数不一定是 bool 值，也可以是个对象，它提供了更多选项。
          once：只执行一次。
          passive：承诺此事件监听不会调用 preventDefault，这有助于性能。
          useCapture：是否捕获（否则冒泡）。
        14.实际使用，在现代浏览器中，还可以不传第三个参数，我建议默认不传第三个参数，因为我认为冒泡是符合正常的人类心智模型的，大
          部分业务开发者不需要关心捕获过程。除非你是组件或者库的使用者，那就总是需要关心冒泡和捕获了。
      4.焦点
        1.我们讲完了 pointer 事件是由坐标控制，而我们还没有讲到键盘事件。
        2.键盘事件是由焦点系统控制的，一般来说，操作系统也会提供一套焦点系统，但是现代浏览器一般都选择在自己的系统内覆盖原本的焦点
          系统。
        3.焦点系统也是视障用户访问的重要入口，所以设计合理的焦点系统是非常重要的产品需求，尤其是不少国家对可访问性有明确的法律要求。
        4.在旧时代，有一个经典的问题是如何去掉输入框上的虚线框，这个虚线框就是 Windows 焦点系统附带的 UI 表现。
        5.现在 Windows 的焦点已经不是用虚线框表示了，但是焦点系统的设计几十年间没有太大变化。
        6.焦点系统认为整个 UI 系统中，有且仅有一个“聚焦”的元素，所有的键盘事件的目标元素都是这个聚焦元素。
        7.Tab 键被用来切换到下一个可聚焦的元素，焦点系统占用了 Tab 键，但是可以用 JavaScript 来阻止这个行为。
        8.浏览器 API 还提供了 API 来操作焦点，如：
          document.body.focus();
          document.body.blur();
        9.其实原本键盘事件不需要捕获过程，但是为了跟 pointer 设备保持一致，也规定了从外向内传播的捕获过程。
      5.自定义事件
        1.除了来自输入设备的事件，还可以自定义事件，实际上事件也是一种非常好的代码架构，但是 DOM API 中的事件并不能用于普通对象，
          所以很遗憾，我们只能在 DOM 元素上使用自定义事件。
        2.自定义事件的代码示例如下（来自 MDN）：
          var evt = new Event("look", {"bubbles":true, "cancelable":false});
          document.dispatchEvent(evt);
        3.这里使用 Event 构造器来创造了一个新的事件，然后调用 dispatchEvent 来在特定元素上触发。
        4.我们可以给这个 Event 添加自定义属性、方法。
        5.注意，这里旧的自定义事件方法（使用 document.createEvent 和 initEvent）已经被废弃。
      6.总结
        1.今天这一节课，我们讲了浏览器中的事件。
        2.我们分别介绍了事件的捕获与冒泡机制、焦点机制和自定义事件。
        3.捕获与冒泡机制来自 pointer 设备输入的处理，捕获是计算机处理输入的逻辑，冒泡是人类理解事件的思维，捕获总是在冒泡之前发生。
        4.焦点机制则来自操作系统的思路，用于处理键盘事件。除了我们讲到的这些，随着输入设备的不断丰富，还有很多新的事件加入，如 
          Geolocation 和陀螺仪等。
        5.最后给你留个小问题。请你找出你所知道的所有事件类型，和它们的目标元素类型。
      7.WIMP 的小故事
        1.WIMP 是由 Alan Kay 主导设计的，这位巨匠，同时也是面向对象之父和 Smalltalk 语言之父。
        2.乔布斯曾经受邀参观施乐，他见到当时的 WIMP 界面，认为非常惊艳，不久后就领导苹果研究了新一代麦金塔系统。
        3.后来，在某次当面对话中，乔布斯指责比尔盖茨抄袭了 WIMP 的设计，盖茨淡定地回答：“史蒂夫，我觉得应该用另一种方式看待这个
          问题。这就像我们有个叫施乐的有钱邻居，当我闯进去想偷走电视时，却发现你已经这么干了。”
        4.但是不论如何，苹果和微软的数十代操作系统，极大地发展了这个体系，才有了我们今天的 UI 界面。
    9.浏览器API（小实验）：动手整理全部API
      1.你好，我是 winter。今天我们来讲讲浏览器 API。
      2.浏览器的 API 数目繁多，我们在之前的课程中，已经一起学习了其中几个比较有体系的部分：比如之前讲到过的 DOM 和 CSSOM 等等。
        但是，如果你留意过，会发现我们讲到的 API 仍然是标准中非常小的一部分。
      3.这里，我们不可能把课程变成一本厚厚的 API 参考手册，所以这一节课，我设计了一个实验，我们一起来给 API 分分类。
      4.我们按照每个 API 所在的标准来分类。所以，我们用代码来反射浏览器环境中全局对象的属性，然后我们用 JavaScript 的 filter 
        方法来逐步过滤掉已知的属性。
      5.接下来，我们整理 API 的方法如下：
        从 Window 的属性中，找到 API 名称；
        查阅 MDN 或者 Google，找到 API 所在的标准；
        阅读标准，手工或者用代码整理出标准中包含的 API；
        用代码在 Window 的属性中过滤掉标准中涉及的 API。
      6.重复这个过程，我们可以找到所有的 API 对应的标准。首先我们先把前面已经讲过的 API 过滤掉。
      7.##JavaScript 中规定的 API
      8.大部分的 API 属于 Window 对象（或者说全局对象），我们可以用反射来看一看现行浏览器中已经实现的 API，我这里使用 Mac 下
        的 Chrome 72.0.3626.121 版本。
      9.我们首先调用 Object.getOwnPropertyNames(window)。在我的环境中，可以看到，共有 821 个属性。
      10.这里包含了 JavaScript 标准规定的属性，我们做一下过滤：
        {
            let js = new Set();
            let objects = ["BigInt", "BigInt64Array", "BigUint64Array", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "Date", "RegExp", "Promise", "Proxy", "Map", "WeakMap", "Set", "WeakSet", "Function", "Boolean", "String", "Number", "Symbol", "Object", "Error", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Atomics", "JSON", "Math", "Reflect", "escape", "unescape"];
            objects.forEach(o => js.add(o));
            let names = Object.getOwnPropertyNames(window)
            names = names.filter(e => !js.has(e));
        }
      11.这一部分我们已经在 JavaScript 部分讲解过了（JavaScript 对象：你知道全部的对象分类吗），所以这里我就采用手工的方式过滤
        出来。
      12.DOM 中的元素构造器
        1.接下来我们看看已经讲过的 DOM 部分，DOM 部分包含了 document 属性和一系列的构造器，我们可以用 JavaScript 的 
          prototype 来过滤构造器。
          names = names.filter( e => {
              try { 
                  return !(window[e].prototype instanceof Node)
              } catch(err) {
                  return true;
              }
          }).filter( e => e != "Node")
        2.这里我们把所有 Node 的子类都过滤掉，再把 Node 本身也过滤掉，这是非常大的一批了。
      13.Window 对象上的属性
        1.接下来我们要找到 Window 对象的定义，我们在下面链接中可以找到。
          https://html.spec.whatwg.org/#window
        2.这里有一个 Window 接口，是使用 WebIDL 定义的，我们手工把其中的函数和属性整理出来，如下：
          window,self,document,name,location,history,customElements,locationbar,menubar, personalbar,
          scrollbars,statusbar,toolbar,status,close,closed,stop,focus, blur,frames,length,top,opener,parent,
          frameElement,open,navigator,applicationCache,alert,confirm,prompt,print,postMessage
        3.接下来，我们编写代码，把这些函数和属性，从浏览器 Window 对象的属性中去掉，JavaScript 代码如下：
          {
              let names = Object.getOwnPropertyNames(window)
              let js = new Set();
              let objects = ["BigInt", "BigInt64Array", "BigUint64Array", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "Date", "RegExp", "Promise", "Proxy", "Map", "WeakMap", "Set", "WeakSet", "Function", "Boolean", "String", "Number", "Symbol", "Object", "Error", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Atomics", "JSON", "Math", "Reflect", "escape", "unescape"];
              objects.forEach(o => js.add(o));
              names = names.filter(e => !js.has(e));

              names = names.filter( e => {
                  try { 
                      return !(window[e].prototype instanceof Node)
                  } catch(err) {
                      return true;
                  }
              }).filter( e => e != "Node")

              let windowprops = new Set();
              objects = ["window", "self", "document", "name", "location", "history", "customElements", "locationbar", "menubar", " personalbar", "scrollbars", "statusbar", "toolbar", "status", "close", "closed", "stop", "focus", " blur", "frames", "length", "top", "opener", "parent", "frameElement", "open", "navigator", "applicationCache", "alert", "confirm", "prompt", "print", "postMessage", "console"];
              objects.forEach(o => windowprops.add(o));
              names = names.filter(e => !windowprops.has(e));
          }
        4.我们还要过滤掉所有的事件，也就是 on 开头的属性。
          names = names.filter( e => !e.match(/^on/))
        5.webkit 前缀的私有属性我们也过滤掉：
          names = names.filter( e => !e.match(/^webkit/))
        6.除此之外，我们在 HTML 标准中还能找到所有的接口，这些我们也过滤掉：
          let interfaces = new Set();
          objects = ["ApplicationCache", "AudioTrack", "AudioTrackList", "BarProp", "BeforeUnloadEvent", "BroadcastChannel", "CanvasGradient", "CanvasPattern", "CanvasRenderingContext2D", "CloseEvent", "CustomElementRegistry", "DOMStringList", "DOMStringMap", "DataTransfer", "DataTransferItem", "DataTransferItemList", "DedicatedWorkerGlobalScope", "Document", "DragEvent", "ErrorEvent", "EventSource", "External", "FormDataEvent", "HTMLAllCollection", "HashChangeEvent", "History", "ImageBitmap", "ImageBitmapRenderingContext", "ImageData", "Location", "MediaError", "MessageChannel", "MessageEvent", "MessagePort", "MimeType", "MimeTypeArray", "Navigator", "OffscreenCanvas", "OffscreenCanvasRenderingContext2D", "PageTransitionEvent", "Path2D", "Plugin", "PluginArray", "PopStateEvent", "PromiseRejectionEvent", "RadioNodeList", "SharedWorker", "SharedWorkerGlobalScope", "Storage", "StorageEvent", "TextMetrics", "TextTrack", "TextTrackCue", "TextTrackCueList", "TextTrackList", "TimeRanges", "TrackEvent", "ValidityState", "VideoTrack", "VideoTrackList", "WebSocket", "Window", "Worker", "WorkerGlobalScope", "WorkerLocation", "WorkerNavigator"];
          objects.forEach(o => interfaces.add(o));
          names = names.filter(e => !interfaces.has(e));
        7.这样过滤之后，我们已经过滤掉了所有的事件、Window 对象、JavaScript 全局对象和 DOM 相关的属性，但是，竟然还剩余了很多
          属性！你是不是很惊讶呢？好了，接下来我们才进入今天的正题。
      14.其它属性
        1.这些既不属于 Window 对象，又不属于 JavaScript 语言的 Global 对象的属性，它们究竟是什么呢？
        2.我们可以一个一个来查看这些属性，来发现一些我们以前没有关注过的标准。
        3.首先，我们要把过滤的代码做一下抽象，写成一个函数：
          function filterOut(names, props) {
              let set = new Set();
              props.forEach(o => set.add(o));
              return names.filter(e => !set.has(e));
          }
        4.每次执行完 filter 函数，都会剩下一些属性，接下来，我们找到剩下的属性来看一看。
      15.ECMAScript 2018 Internationalization API
        1.在我的浏览器环境中，第一个属性是：Intl。
        2.查找这些属性来历的最佳文档是 MDN，当然，你也可以使用 Google。
        3.总之，经过查阅，我发现，它属于 ECMA402 标准，这份标准是 JavaScript 的一个扩展，它包含了国际化相关的内容：
          http://www.ecma-international.org/ecma-402/5.0/index.html#Title
        4.ECMA402 中，只有一个全局属性 Intl，我们也把它过滤掉：
          names = names.filter(e => e != "Intl")
        5.再来看看还有什么属性。
      16.Streams 标准
        1.接下来我看到的属性是： ByteLengthQueuingStrategy。
        2.同样经过查阅，它来自 WHATWG 的 Streams 标准：
          https://streams.spec.whatwg.org/#blqs-class
        3.不过，跟 ECMA402 不同，Streams 标准中还有一些其它属性，这里我手工查阅了这份标准，并做了整理。
        4.接下来，我们用代码把它们跟 ByteLengthQueuingStrategy 一起过滤掉：
          names = filterOut(names, ["ReadableStream", "ReadableStreamDefaultReader", "ReadableStreamBYOBReader", 
          "ReadableStreamDefaultController", "ReadableByteStreamController", "ReadableStreamBYOBRequest", 
          "WritableStream", "WritableStreamDefaultWriter", "WritableStreamDefaultController", "TransformStream", 
          "TransformStreamDefaultController", "ByteLengthQueuingStrategy", "CountQueuingStrategy"]);
        5.好了，过滤之后，又少了一些属性，我们继续往下看。
      17.WebGL
        1.接下来我看到的属性是：WebGLContext​Event。
        2.显然，这个属性来自 WebGL 标准：
          https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15
        3.我们在这份标准中找到了一些别的属性，我们把它一起过滤掉：
          names = filterOut(names, ["WebGLContextEvent","WebGLObject", "WebGLBuffer", "WebGLFramebuffer", 
          "WebGLProgram", "WebGLRenderbuffer", "WebGLShader", "WebGLTexture", "WebGLUniformLocation", 
          "WebGLActiveInfo", "WebGLShaderPrecisionFormat", "WebGLRenderingContext"]);
        4.过滤掉 WebGL，我们继续往下看。
      18.Web Audio API
        1.下一个属性是 WaveShaperNode。这个属性名听起来就跟声音有关，这个属性来自 W3C 的 Web Audio API 标准。
        2.我们来看一下标准：
          https://www.w3.org/TR/webaudio/
        3.Web Audio API 中有大量的属性，这里我用代码做了过滤。得到了以下列表：
          ["AudioContext", "AudioNode", "AnalyserNode", "AudioBuffer", "AudioBufferSourceNode", 
          "AudioDestinationNode", "AudioParam", "AudioListener", "AudioWorklet", "AudioWorkletGlobalScope", 
          "AudioWorkletNode", "AudioWorkletProcessor", "BiquadFilterNode", "ChannelMergerNode", 
          "ChannelSplitterNode", "ConstantSourceNode", "ConvolverNode", "DelayNode", "DynamicsCompressorNode", 
          "GainNode", "IIRFilterNode", "MediaElementAudioSourceNode", "MediaStreamAudioSourceNode", 
          "MediaStreamTrackAudioSourceNode", "MediaStreamAudioDestinationNode", "PannerNode", "PeriodicWave", 
          "OscillatorNode", "StereoPannerNode", "WaveShaperNode", "ScriptProcessorNode", "AudioProcessingEvent"]
        4.于是我们把它们也过滤掉：
          names = filterOut(names, ["AudioContext", "AudioNode", "AnalyserNode", "AudioBuffer", 
          "AudioBufferSourceNode", "AudioDestinationNode", "AudioParam", "AudioListener", "AudioWorklet", 
          "AudioWorkletGlobalScope", "AudioWorkletNode", "AudioWorkletProcessor", "BiquadFilterNode", 
          "ChannelMergerNode", "ChannelSplitterNode", "ConstantSourceNode", "ConvolverNode", "DelayNode", 
          "DynamicsCompressorNode", "GainNode", "IIRFilterNode", "MediaElementAudioSourceNode", 
          "MediaStreamAudioSourceNode", "MediaStreamTrackAudioSourceNode", "MediaStreamAudioDestinationNode", 
          "PannerNode", "PeriodicWave", "OscillatorNode", "StereoPannerNode", "WaveShaperNode", 
          "ScriptProcessorNode", "AudioProcessingEvent"]);
        5.我们继续看下一个属性。
      19.Encoding 标准
        1.在我的环境中，下一个属性是 TextDecoder，经过查阅得知，这个属性也来自一份 WHATWG 的标准，Encoding：
          https://encoding.spec.whatwg.org/#dom-textencoder
        2.这份标准仅仅包含四个接口，我们把它们过滤掉：
          names = filterOut(names, ["TextDecoder", "TextEncoder", "TextDecoderStream", "TextEncoderStream"]);
        3.我们继续来看下一个属性。
      20.Web Background Synchronization
        1.下一个属性是 SyncManager，这个属性比较特殊，它并没有被标准化，但是我们仍然可以找到它的来源文档：
          https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface
        2.这个属性我们就不多说了，过滤掉就好了。
      21.Web Cryptography API
        1.我们继续看下去，下一个属性是 SubtleCrypto，这个属性来自 Web Cryptography API，也是 W3C 的标准。
          https://www.w3.org/TR/WebCryptoAPI/
        2.这份标准中规定了三个 Class 和一个 Window 对象的扩展，给 Window 对象添加了一个属性 crypto。
          names = filterOut(names, ["CryptoKey", "SubtleCrypto", "Crypto", "crypto"]);
        3.我们继续来看。
      22.The Screen Orientation API
        1.下一个属性是 ScreenOrientation，它来自 W3C 的 The Screen Orientation API 标准：
          https://www.w3.org/TR/screen-orientation/
        2.它里面只有 ScreenOrientation 一个接口，也是可以过滤掉的。
      23.结语
        1.到 Screen Orientation API，我这里看到还剩 300 余个属性没有处理，剩余部分，我想把它留给大家自己来完成。
        2.我们可以看到，在整理 API 的过程中，我们可以找到各种不同组织的标准，比如：
          ECMA402 标准来自 ECMA；
          Encoding 标准来自 WHATWG；
          WebGL 标准来自 Khronos；
          Web Cryptography 标准来自 W3C；
          还有些 API，根本没有被标准化。
        3.浏览器环境的 API，正是这样复杂的环境。我们平时编程面对的环境也是这样的一个环境。
        4.所以，面对如此繁复的 API，我建议在系统掌握 DOM、CSSOM 的基础上，你可以仅仅做大概的浏览和记忆，根据实际工作需要，选择
          其中几个来深入学习。
        5.做完这个实验，你对 Web API 的理解应该会有很大提升。
        6.这一节课的问题就是完成所有的 API 到标准的归类，不同的浏览器环境应该略有不同，欢迎你把自己的结果留言一起讨论。
  7.模块四：前端综合应用
    1.性能：前端的性能到底对业务数据有多大的影响？
      1.从今天开始，我们就从前端知识学习的部分，过渡到了实践部分。这节课我来谈谈性能。
      2.性能是个特别有意思的话题，在我之前的工作中，从入门的初级工程师到高级别的技术专家，大家都很喜欢谈性能，我以前参与晋升评审，
        每年总能听到很多关于性能的晋升述职。
      3.那么，今天我就来谈谈我眼中的性能。
      4.性能总论
        while 循环快还是 for 循环快？
        |0 是不是比 Math.floor 性能好？
        1.网上随处可以见到一类对性能的讨论。一些新人也非常热衷此类讨论。但是实际上，它们除了让你写代码的时候纠结之外，毫无意义。
        2.为什么这样讲呢？我想讲一个小故事。
        3.从前有个工程师，特别注重代码细节，有一天他发现系统中的一段代码写的性能很差，因此，他用汇编重写了整段代码，执行效率足足提
          升了三倍。但是最后，大家发现，用户反馈性能丝毫没有提高，因为他优化的那个进程名字叫“System Idle”。
        4.所以你看，性能优化不能只着眼于局部的代码。这里，我要提出一个我的观点：一切没有 profiling 的性能都是耍流氓。凡是真正有
          价值的性能优化，必定是从端到端的业务场景建立体系来考虑的。
        5.在我的认识中，性能体系的建立可以分成以下几部分：
          现状评估和建立指标；
          技术方案；
          执行；
          结果评估和监控。
        6.下面，我就来为你一一讲解。
      5.现状评估和建立指标
        1.要想做好性能优化，正确地评估现状和建立指标是最关键的一步，它又往往是会被轻视的一步。
        2.作为一个工程师，指标又要考虑两个因素。一方面，对用户来说，什么样的性能指标能更好地评估它的体验？另一方面，对公司来说，什
          么样的指标会影响业务价值呢？
        3.在我公布答案之前，我希望你能思考一下，你所负责的业务，是否有前端性能指标？它是否能够满足我上面提到的两个要求？
        4.在我之前的工作中，整个用了长达一年的时间来探索，才找到了合适的指标，并且回答好了两个问题。
        5.性能问题可以分成很多方面，最重要的几个点是：
          页面加载性能；
          动画与操作性能；
          内存、电量消耗。
        6.注意，这里我们仅仅是对“性能”两个字的分析和解读，在对大量的用户数据分析后，我们发现，其实这三部分中，“页面加载性能”跟用
          户的流失率有非常强的关联性，而用户流失率，正是公司业务非常看重的指标。
        7.因此，在开始阶段，我们决定把性能优化的重点放在页面加载性能上。
        8.那么，用什么指标来衡量页面加载性能呢？最容易想到的方案是“用户平均加载时间”，事实上，我们在相当长的一段时间，也都是在使用
          用户平均加载时间作为性能指标。
        9.但是，很快我们发现，这个指标有严重的问题：
          当加载时间低于一定数字，用户体感差别不大了，我们经过一定的研究，认为这个数字大约是 1 秒；
          少数超长时间加载的用户（如 2G），会极大影响整个指标，即指标不能反映大多数用户的体验。
        10.于是，基于以上分析，我们设计了一个新的指标——秒开率，即一秒之内打开的用户占用户总量的百分比。这个指标后来逐渐推广到整个
          公司，甚至影响到了一些业内的其它企业，现在，谈秒开率已经是个非常自然的事情了，但是当初的设计确实走了不少弯路。
      6.技术方案
        1.有了指标，我们就有了优化的目标，接下来，就到了技术出场的环节了。
        2.我们这里还是以加载过程为例，来讲解一下。
        3.首先我们要简单分析一下，从输入 URL 后按下回车，到底发生了什么。
        4.我们在浏览器的原理课程中，已经讲解了浏览器大致的工作过程，但是，我们必须理解几件事：
          从域名到 IP 地址，需要用 DNS 协议查询；
          HTTP 协议是用 TCP 传输的，所以会有 TCP 建立连接过程；
          如果使用 HTTPS，还有有 HTTPS 交换证书；
          每个网页还有图片等请求。
        5.从这个分析和实际试验的结果看，网页的加载时间，不但跟体积有关系，还跟请求数有很大关系，因此，我们最终设计的技术方案大约可
          以这样划分：
          性能优化技术方案划分.jpg
        6.这里仅仅列出了性能优化的一部分技术方案，是我认为比较重要的部分，可以看到，这里涉及的并不仅仅是前端技术，有服务端、客户端、
          设计师团队，所以要想做好性能优化，绝对不能把自己限制在局部的视角，必须是整个业务一起考虑，才能有良好的收效。
      7.执行
        1.技术方案设计好了，它是不会自己变成线上页面的，所以，有了技术方案，我们只完成了一半的工作，接下来我们还需要一个执行过程。
        2.执行也不简单，如果说方案主要靠技术，那么执行就是靠工程实施了。
        3.根据公司的实际情况，工程实施可能有不同的程度，我把工程水平从低到高分成三个阶段：
          纯管理；
          制度化；
          自动化。
        4.纯行政管理，是由经理用纯粹的管理手段来执行方案，比如说，作为前端团队的 Leader，我可以组织会议，要求整个团队使用我们前面
          谈的技术方案。
        5.但是纯行政管理有一些问题，一方面，需要的行政资源不一定有，比如我没法强制让后端团队配合我，另一方面，纯粹的管理方式，团队
          本身的体验并不好，也不利于团队成长，最重要的是，纯粹管理方式容易造成执行不到位。这样的执行方式多数出现在非技术岗位。
        6.制度化执行方式是用规则代替人的命令，指定责任人，通过培训、checklist、定期 review 等具体措施来保证实施。制度化执行可以
          极大地减轻管理工作量，一般现代互联网公司都会采用类似的方式。但是制度化执行方式还有很大成分是依靠人的主动性的，对程序员来
          说，还有更好的方式：自动化。
        7.自动化的方式是在一些重要的操作路径上设置规则，针对我们的性能优化，有两个点适合做这件事：一个是把开发好的页面发布上线，另
          一个是开发好的页面 URL 投放到首页等处的链接。
        8.在我之前的工作中，我们跟测试团队配合，开发了一套页面性能打分系统，它会自动扫面页面上的可优化点，并且跟发布平台和投放平台
          合作，把它加入日常机制中。现在多数公司都会采用制度化和自动化结合的执行方案。
      8.结果评估和监控
        1.执行完了之后，就要向老板汇报争取升职加薪了，还要有一定的结果总结，才是一个完整的工程实施，而且，凡是工程实施，肯定要有一
          定长效机制，不能优化完了退化，这些都要求有线上监控机制。
        2.要想做线上监控，分两个部分：
          数据采集；
          数据展现。
        3.数据采集部分，同样需要发布平台或者开发工具来配合，对性能数据来说，Performance API 非常好用，它是浏览器记录的性能数据，
          一般来说，我们用统一的代码把它上传到服务器端就够用了。
        4.数据的展现部分就比较自由了，可以用不同的数据可视化方案来展现性能数据，没有一定之规。一般的数据监控平台，会提供报警机制，
          对性能来说，报警需求不是特别强烈，但是也可以设置一些条件，针对秒开率特别低的网页报警。
        5.有了监控，再配合一定制度，就可以保障整个团队产出的性能了，要注意，性能不是一个静态的事情，指标需要不断优化，技术方案还需
          要不断随着技术发展迭代，制度、自动化工具也需要不断改进，最终的监控平台产品也不能不做新需求，所以性能应该成为一个团队的日
          常工作的一部分，持续进行。
      9.总结
        1.今天我们学习了前端团队工程实施中的性能体系，首先我们介绍了总体思想：性能应该是基于业务和实际用户体验需求的一种工程实施，
          不是纯粹的技术游戏。
        2.接下来我们分成四个步骤介绍了性能工程体系，首先介绍了现状评估和建立指标，建立指标应当从业务的角度考虑，接下来讲了技术方
          案设计，技术方案应当从整体角度，基于 Profiling 的结果分析来设计。
        3.之后我们讲了实施，我们讲了工程实施的三个层次：纯管理、制度化、工程化，最后，我们讲了结果评估和线上监控，线上监控需要从数
          据采集和数据展现两个部分分别实现。
        4.最后，留一个小问题，请你为自己的团队和业务设计一下性能的整体方案，欢迎来留言分享。
    2.工具链：什么样的工具链才能提升团队效率？  
      1.你好，我是 winter。今天我们的主题是工具。
      2.古语云：“工欲善其事，必先利其器”，程序员群体对工具的爱好和重视是一个悠久的传统。简单趁手的工具是程序员开发的好帮手。
      3.但是在工程方面，工具不仅仅是简单的“趁手”即可，假如一个团队人人都自己发明几个小工具，那么后果将会是灾难性的：同一个团队的同
        学无法互相配合写代码，一旦有人离职，可能某一个项目就永远无法跑起来了。
      4.所以我们今天从工程的角度谈一谈工具体系的规划。
      5.工具总论
        1.跟性能不同，工具体系并非业务结果，所以我们没法用简单的数据指标来衡量工具，它的结果更多程度是一种开发体验：帮助技术团队内
          的同学提升效率和体验。
        2.作为工程体系，我们考虑工具的时候同样要遵循基本规则：现状与指标、方案、实施、结果和监控。
        3.不过，对工具而言，指标和结果都是一种“软性指标”，也就是团队的开发效率和开发体验。这里我不太推荐把开发效率和开发体验过度数
          据化，我的经验是：开发效率提升 n 倍永远是一种臆想或者主观论断。
      6.工具体系的目标
        1.前面已经讲到，工具是为技术团队本身服务的工程体系，那么，工具的目标是什么呢？其实每一种工具的出现，必然都有一个非常具体的
          目标，比如 npm 帮助我们进行包管理，Yeoman 帮助我们初始化项目模板。
        2.但是这些目标是工具的目标，不是工具体系的目标。我们做一个假设，假如你是一个前端团队的工具体系负责人，现在要你来规划团队的
          工具体系，你会怎么做呢？
        3.如果你到社区找了一大堆工具，并且把它们要解决的问题都罗列出来，作为工具体系的目标，那就完全走上了错误的道路。
        4.实际上，在考虑具体的工具之前，我们应该解决工具体系的“元问题”，即：我们对工具本身的要求是什么？
        5.考虑到工程行为都是团队合作，我们对工具最基本的要求就是：版本一致。
        6.只有整个团队的工具版本一致，至少要做到避免大版本差异，才能做到互相接手代码时，团队成员能够正确的使用工具开发。
        7.工具体系的另一个重要需求是：避免冲突，一些工具可能互相没有干扰，比如 Yeoman 和 gulp，有一些工具则由社区设计了配合方案，
          比如 webpack 和 babel，有一些工具，则存在着根本性冲突，如 gulp 和 grunt。
        8.所以，在谈及具体问题之前，我们必须要有这两个要求的解决方案。这就需要引入一个新的概念：工具链。
        9.工具链是一系列互相配合的工具，能够协作完成开发任务（注：工具链这个词最早是由 C/C++ 程序员引入的概念，一般包含编译、链接、
          调试等工具）。
        10.下面我们就来谈谈工具链的设计。
      7.工具体系的设计
        1.要想设计一个工具链，首先我们需要整理一下，前端开发大约要做哪些事，下面是我的答案：
          初始化项目；
          运行和调试；
          测试（单元测试）；
          发布。
        2.那么，一个前端项目的工具链，大约就会包含这些功能。一个典型的社区项目工具链可能就类似下面这样：
          Yeoman
          webpack
          ava/nyc
          aws-cli
        3.但是，这显然不够，我们还需要一种机制，保证团队使用的工具版本一致。
        4.轻量级的做法是，在项目初始化模板中定义 npm script 并且在 npm dev-dependency 中规定它的版本号。
        5.重量级的做法是，开发一个包装工具，在命令行中不直接使用命令，而使用包装过的命令。如在我之前的团队，使用的工具名为 def，它
          规定了一些命令：
          def init
          def dev
          def test
          def publish
        6.这样，工具链的使用者只需指定工具链名称，就不需要知道项目具体使用了哪些工具，这样只需要专注自己的需求就够了。
        7.同时，统一的命令行入口，意味着整个团队不需要互相学习工具链，就可以接手别人的项目开发。
        8.在稍微大一些的团队内部，往往会需要不止一种开发模式，如移动开发和桌面开发，这样，所需要的工具链也不一样，因此我们需要多条工
          具链。
        9.要想开发新的工具链，可以使用复制分支的方式来扩展原来的工具链。在我原来的工作中，不同的工具链被称作“套件”，每一种套件对应着
          一组互相配合的工具。
      8.工具体系的执行
        1.因为工具体系服务的是团队内部成员，所以执行非常简单，同时，工具体系的入口是初始化项目，所以只要初始化工具在手，可以控制其它
          所有工具。
        2.我们在性能的那一课里，已经讲过工程体系的执行分成三个层次：纯管理、制度化和自动化。
        3.工具体系因为其自身特性，可以说是最容易做到自动化的一个体系了。
      9.工具体系的监控
        1.工具体系的结果虽然是软性的，也不能完全不做监控。
        2.纯粹的社区方案比较难做到监控，但是如果我们使用了前面提到的统一命令行入口包装，那么就可以做一些简单的统计工作了。
        3.一般来说，以下指标跟开发者体验较为相关：
          调试 / 构建次数；
          构建平均时长；
          使用的工具版本；
          发布次数。
        4.在我之前的工作中，工具团队曾经从构建平均时长数据中发现构建效率问题，对 webpack 做了大量深度优化来改善开发体验。
        5.同时，工具的相关数据还能够帮助发现一些问题，比如某个项目频繁发布，可能说明它风险很高。工具的相关数据还能帮我们发现老旧的
          工具，如果某个套件使用频率极低，则可以考虑把它下线。
        6.总之，工具体系的监控不仅仅是衡量工具体系的好帮手，也是非常珍贵的研发数据，里面有很多可挖掘的价值。
      10.总结
        1.这一课，我们讲解了工具相关的工程知识。
        2.我们仍然从目标、方案设计、执行和结果四个方面来讲解，工具体系的目标除了单个工具解决具体问题之外，还要注意一致性和配合问题，
          因此我们需要工具链。
        3.工具链一般会涵盖研发阶段的各个主要操作。工具体系的执行比较简单，很容易就可以做到完全的自动化。工具体系的监控同样非常重要，
          工具的监控除了帮助我们改进工具体系，对研发体系的其它部分也有帮助。
        4.最后，请你思考下自己所在的团队，是否已经建立了工具体系？听完了今天的课程，你认为它有哪些可改进的部分？
    3.持续集成：几十个前端一起工作，如何保证工作质量？
      1.你好，我是 winter。今天我们来聊聊持续集成。
      2.持续集成是近现代软件工程中的一个非常重要的概念。它是指在软件开发过程中，以定期或者实时的方式，集成所有人的工作成果，做统一
        的构建和测试。
      3.与持续集成相对的做法是：独立开发各个模块，在软件开发的最终阶段才做集成。持续集成的优势是及早处理集成阶段的问题，使软件质量
        和开发进度可控。
      4.现在持续集成还有升级版本：持续交付和持续部署，这些因为需要更为完善的基础设施，目前很少有公司前端团队可以用上，我们暂且不谈。
      5.传统的持续集成概念诞生于桌面客户端开发，在 Web 前端领域，由于技术和产品形态的差别，我们需要构建的持续集成体系也有一些区别。
      6.持续集成总论
        1.传统软件的持续集成主要有以下措施。
          daily build：每日构建，开发者每天提交代码到代码仓库，构建一个可运行的版本。
          build verification test（BVT）：构建验证测试，每日构建版本出来后，运行一组自动化的测试用例，保证基本功能可用。
        2.对于前端来说，有一些现实的区别：
          前端代码按页面自然解耦，大部分页面都是单人开发；
          前端构建逻辑简单，一般开发阶段都保证构建成功，不需要构建；
          前端代码一般用于开发界面，测试自动化成本极高；
          前端页面跳转，是基于 url，没有明确的产品边界。
        3.基于以上分析，传统的持续集成方案放在前端，要么不需要，要么不适用，要么实施成本高，因此我们不能套用传统的持续集成理论，而
          需要重新思考前端领域的持续集成体系。
      7.持续集成的目标
        1.前面我们已经分析过，每日构建不需要，前端构建验证测试成本过高难以实施，那么我们是不是可以有一些代替的措施呢？
        2.首先我们要确定前端持续集成的目标，我们回到持续集成的根本理念，一是要及早集成代码形成可测试的版本，二是通过一定的测试来验
          证提交的代码的有效性。
      8.持续集成的方案
        1.我们进一步思考，前端持续集成如何完成这两个目标呢？
        2.前端代码不需要构建，或者说只需要单页面构建，但是页面与页面之间的跳转是用 url 构成的，所以我们的可测试的版本，不可能通过
          “构建”来获得。
        3.我们只能通过“发布”来获得一个前端代码的可执行版本，在传统语境中，“发布”的目标是线上生产环境，这显然不行。于是，我们就需要
          一个预览环境，来做一种“虚拟发布”的操作。
        4.我们再来考虑一下，为界面编写自动化测试用例成本很高，那么如何代替构建验证测试呢？
        5.我们回忆一下，在性能一课，我有讲过，页面的性能可以通过一些自动化工具来分析，还可以通过一些数据采集方案来发现性能问题，对
          于预览环境前端页面，我们可以采用同样的措施。
        6.除了基于页面结构的分析和数据采集，我们还可以扫描代码。
        7.综上，我认为前端的持续集成的措施应该是这样的：
          预览环境，代替每日构建，前端每次（或指定次）提交代码到仓库都同步到预览环境，保证预览环境总是可用；
          规则校验，代替构建验证测试，通过数据采集（如前面提到的性能数据）和代码扫描，保证提交的代码满足一定的质量要求。
        8.接下来，让我来详细介绍一下预览环境的设计和规则校验的设计。
      9.预览环境
        1.前端代码发布到线上生产环境需要有线上的机器和域名，而预览环境同样需要机器和域名，不过，只需要在公司内网即可。
        2.所以建立预览环境的第一步就是申请机器和域名，我们需要运维协助，在预览环境的机器上部署 Web 应用服务器。
        3.有了预览环境的机器，下一步就是建立预览环境发布机制。
        4.有些公司使用脚本发布，有些公司使用 git hook，有些公司则使用一个 Web 应用平台，进行白屏操作，因为各个公司的发布机制千
          差万别，我这里没办法讲解具体的方案。这里我建议，预览环境的机器发布流程应该跟线上发布保持一致，这样可以最大程度降低成本
          和降低心智负担。
        5.预览环境的部署和发布机制建立是最基本的需求，在实际应用中，情况要复杂的多，可能需要多个预览环境同时存在。
        6.比如，测试工程师可能要求一个相对稳定的环境来测试，这是一个合理的诉求，比如，全公司大部分业务都可能依赖登录页面，一旦登录
          页面在频繁发布导致一些预览环境的故障，可能全公司都没办法工作了。
        7.又比如，当服务端工程师联调时，会希望前端的预览环境跟服务端的预览环境对接，而当服务端的代码部署到线上生产环境后，可能又需
          要前端的预览环境跟服务端线上环境对接。
        8.这些问题都是我曾经遇到过的非常现实的问题，如果今天回过头来设计，我认为应该设计一套带参数和版本号的预览环境，为测试提供特
          定版本的预览环境，用参数解决那些跟服务端 API 对接问题，但是任何系统都不可能从一开始就设计完善，所以，建议你把重心放到建
          立预览环境的基本需求上来。
      10.规则校验
        1.接下来我们讲讲规则校验，规则校验可以分成三种措施：
          页面结构扫描；
          运行时数据采集；
          代码扫描。
        2.页面结构扫描可以使用无头浏览器（如 phantomjs）配合一些 JavaScript 代码编写的规则来完成。
        3.运行时数据采集，可以通过在页面插入公共 js 文件的方式来完成，最基本的是用 Performance API 来采集性能数据，用 
          window.onerror 来采集 js 错误。
        4.代码扫描，社区有一些现成的方案，比如 JSHint，你可以根据实际需要，选择社区方案或者自研。
      11.持续集成的实施
        1.持续集成的实施，是必须严格做到自动化和制度化的。我们可以通过上节课讲的工具来完成持续集成。其它部分，都可以通过工具和制度
          来完成，这里需要重点讲的是规则校验中的规则部分。
        2.我们刚刚讲解的规则校验仅仅是搭建好了平台，而规则本身，我们需要先形成一个共识，然后在前端团队内部形成一定的更新机制。
        3.这里，我建议用 issue 的方式来管理规则的提案，可以在周会或者月会上讨论，充分保证整个团队对校验规则的一致意见。
        4.这里，我们必须警惕三种错误：
          少数人拍脑袋决定校验规则；
          一成不变的校验规则；
          频繁无规律变化的校验规则。
        5.只有经过民主讨论、定期更新的校验规则，才能在团队中起到积极作用。校验规则决定了整个前端团队的开发体验，所以必须非常慎重。
      12.持续集成的结果
        1.持续集成机制的建立本身就可以视为一种结果，它能够让整个团队的代码质量有一个基本的保障，提前发现问题，统一代码风格，从而带
          来开发体验和效率的提升。
        2.此外，持续集成的结果也能够以数据的方式呈现出整个开发团队的健康状态，这是管理者会非常关注的一个点。
      13.总结
        1.今天我们讲解了持续集成，持续集成这个概念最早来自桌面客户端软件开发，应用到前端领域，会有一定的变化。这里我提出了一个预览
          环境 + 规则校验的前端持续集成体系。
        2.预览环境需要申请机器和域名、部署和建立发布机制，规则校验有三种方法：结构扫描、数据采集和代码扫描。
        3.持续集成的实施需要重点关注校验规则部分，要建立一个民主讨论、定期更新的校验规则。持续集成机制的建立就是其结果本身，此外，
          系统中产生的数据也可以有一定管理价值。
        4.最后留一个问题，你所在的团队，是否有做持续集成呢？请你设计或者改进这个持续集成方案。
    4.搭建系统：大量的低价值需求应该如何应对？
      1.不知道你在工作中有没有遇到过这样的事情：一个运营找过来说，有一个紧急又简单的临时活动页面要做，希望打断现有的产品开发节奏临
        时插入。
      2.这类页面技术难度不高，业务上通常属于“紧急不重要”的事情。
      3.这些需求技术上没挑战，线上存在时间短，上线时间紧又没有任何调整空间，它们往往会成为前端团队里人人都不喜欢的“垃圾需求”，谁要
        是接了这种需求，就只能自认倒霉。
      4.但是，这些真的是垃圾需求吗？换个视角来看，我认为它反而是宝藏。
      5.所谓工程师，就是为了解决这些问题而存在的岗位，我们从工程的视角来看，“大量紧急不重要的页面”，才是真正的需求，现在需求有了，
        我们就应该按照工程的方式，定目标、设计方案、做实施、拿结果来解决问题。这就是我们今天要讲的搭建系统。
      6.搭建系统的目标
        1.搭建系统的目标是解决大量的简单页面生产问题。衡量这个目标的指标应该是生产页面的数量，这部分非常的明确，你如果要做搭建系统，
          可以根据业务的体量和服务的范围来决定具体的指标要求。
        2.第一种，是模板化搭建，由前端工程师生产页面模板，再由运营提供数据来完成页面，可以用以下公式来理解：
          模板 + 数据 = 页面
        3.模板化搭建是一种简单的思路，它的优点是整个系统实现简单。
        4.第二种思路是，模块化搭建，由前端工程师生产模块，由运营把模块和数据组织成页面。
        5.第三种思路，是数据驱动界面，这是一种比较新的思路，即数据中包含了展现自身所需要的模块相关的信息，本身决定了界面。
        6.但是不论何种流派，都可以认为是数据、模块、模板、页面几种实体的相互作用，下面我就来详细讲解一下这几样实体。
      7.数据
        1.数据是用于展现界面所需要的信息。
        2.我们按照数据用途，可以分成界面配置数据和内容数据。
          界面配置数据：决定了页面上颜色、尺寸、位置、图片、文字等展现形式的数据，通常是以页面为单位的配置。
          内容数据：页面要展示的信息，如电商活动页面的商品信息、文章的文字信息等。
        3.按照数据来源，我们又可以分成运营人员手工填写的数据和来自 API 产生的数据。
          运营手工填写固定数据：运营人员依靠自己的专业技能决定的数据，可能包含线下招商信息、商品选品、文章等。
          来自 API 的数据：
            固定数据，由服务端逻辑到指定存储处获取的数据；
            用户相关数据，由算法系统或者服务端逻辑，根据用户信息或者用户喜好推荐的数据。
        4.搭建系统本身是个产品，我们针对数据这个实体，要设计增、删、改、查的能力，根据我们以上的分析，搭建系统的数据部分有两个难点。
        5.第一个难点是数据的手工编辑能力，现在一般的数据都会采用 JSON 格式，JSON 格式中有数字、字符串、数组、对象、布尔等数据类
          型，我们需要根据数据的格式定义为每一种类型设计编辑器。
        6.但是仅仅是基本类型还不够，我们实际开发中，还需要跟实际业务结合来设计编辑器，下面，我就把我在之前的工作中设计的数据编辑器
          列一下。
          整数：整数编辑器，可用 HTML 原生输入框<input type=number min=1 max=100/>实现。
          数字：数字编辑器，可用<input type=number min=1.0 max=100.0/>实现
          字符串：字符串编辑器，可用<input />实现。
          URL：URL 编辑器，可用<input />配合格式校验。
          图片：图片编辑器，需要自研图片上传功能。
          固定字段对象：对象和字段编辑器，可用多个<input />和<label>实现。
          布尔型：开关，可用<select>或者自研组件实现。
          自由字段对象：需要自研 KV 输入组件。
          数组：需要自研列表组件实现。
          对象数组：需要自研表格组件或者列表组件实现。
          矩形区域：需要自研区域选择组件。
        7.这里要注意 JSON 是一个级联的格式，所以对象、数组中很可能需要插入各种不同的数据类型的编辑器，这部分技术上有一定挑战。此
          外，实践中，对象数组很多时候都来自 Excel 数据，Excel 导入也是非常重要的。
        8.第二个难点则是跟服务端 API 的对接，对于服务端系统统一性较好的公司，这不是什么难事，对服务端系统比较奔放的公司，如果服务
          端 API 调用方式不统一，就非常麻烦了。这一块只能根据实际情况见招拆招，我这里没办法详细介绍，
      8.模板
        1.模板可以简单得理解成挖了许多坑的页面，它一般是由前端工程师来生产的一种实体。与数据之间的连接是数据的格式，对 JSON 格式
          来说，JSON Schema 是社区接受度较高的一个方案。
        2.最简单的模板可以用字符串模板来设计，复杂一点的模板则可以由 JavaScript 进行渲染，通过约定全局变量名称或者约定调用函数入
          口做到把数据传递给模板，你可以根据实际需求复杂程度选择合适的方案。
        3.需要注意，在产品设计上，模板可不是“增、删、改、查”那么简单，考虑到实际工程需要，模板必须是版本化的，也就是说，前端每发布
          一个模板，都需要永久性存储一条记录，并且产品设计上必须保持可以回滚，这样，一旦线上发现问题，可以迅速回滚到一个可工作的版
          本，有效降低不可用时长。
        4.此外，模板设计还有批量更新的需求，一些运营活动可能包含数百个页面，它们使用同一套模板，产品设计上必须要注意提供批量更新机
          制。
      9.模块
        1.模块跟模板非常相似，但是从产品的角度，模块是可组合的。跟模板相似的部分如数据连接、版本化发布、批量更新等，这里就不再赘述。
        2.模块化搭建有额外的技术难点，就是可拖拽的模块编辑器，移动端搭建布局相对简单，可以通过简单的自上而下布局和拖拽改变位置来实
          现。
        3.桌面的模块拖拽比较复杂，一般都会采用一些变通的思路简化设计，如提供几种固定的布局模板，提供布局容器，或者采用纯绝对定位布
          局。
        4.在一些产品设计中，会先用模块拼成模板，再指定数据源，这种模式中的“模块”，我们认为是一种开发模板的技术方案，跟我们此处讲的
          产品上的模块概念不同。因为在我们的认知中，模板应该是由前端工程师产生的，具有复用性的一种实体。
      10.页面
        1.不论是模板搭建还是模块搭建，我们的最终生产的目标都是页面。页面同样需要版本化发布，便于回滚。
        2.页面部分实现的难点是跟发布系统的结合，在我们前面讲的所有产品实体中，模板、模块、数据都是存储在搭建系统本身的，但是页面不
          一样，页面必须要提供线上服务，所以页面是要发布到线上生产环境的。
        3.如我们上一课讲的，假设前端持续集成系统有校验规则，页面也必须经过这个过程。
        4.在我之前的工作中，是通过自建静态 Web 服务器 +CDN 回源的方式来支撑搭建系统的线上应用的。
        5.因为服务器上只发布静态内容，并且有 CDN 挡住用户流量，所以只需要少量几台线上机器即可。
      11.搭建系统的实施
        1.在我工作的实践中，搭建系统的实施可以说是所有系统中最容易的了，对多数公司来说搭建系统是一种刚性需求，只要完成了产品开发，
          立刻会有大量的用户。
        2.所以只要正确识别了需求，搭建系统的推行几乎完全不需要担心。
      12.搭建系统的监控
        1.作为一个工具型技术产品，搭建系统同样会产生大量有价值的数据，搭建系统的用户访问和生产页面数量是衡量自身的重要指标。
      13.总结 
        1.本课我为你讲解了搭建系统，搭建系统是为了应对大量简单页面的生产需求而设计的一种工具型产品，它的目标非常明确，就是快速生产
          大量的页面。
        2.方案上，它重点和难点在于几个产品实体的设计，数据部分重点在于编辑器和跟服务端 API 的对接，模板部分则主要是版本化和数据的
          格式定义，模块除了模板的重点，还有拖拽系统，最终产生的页面主要的难点是跟生产环境的对接。
        3.搭建系统的实施主要是把产品在做出来，一般来讲推广是非常自然的事情，最后，搭建系统产生的数据监控关键的指标是用户访问数和生
          产页面数。
        4.本课的思考问题是，请你分析一下你们公司是否有搭建系统的需求，尝试用本课的知识来设计或者改进一下你们的搭建系统。
    5.前端架构：前端架构有哪些核心问题？
      1.你好，我是 winter，今天我们来谈谈架构。
      2.在传统桌面软件开发中，架构师是一种通过设计架构保证团队能够良好分工和有序工作的岗位。
      3.在工程领域，我们凡是要做点什么事儿，都会有明确的目的性，这个目的性，一定是为了完成生产服务业务的。
      4.为什么桌面软件开发需要架构师和架构设计呢？因为桌面软件开发具有高度的复杂性，如果没有架构，就没法分解成互相耦合低的模块来分
        工。
      5.所以一般来说，架构是为了分工而存在的。但是到了前端领域，这个问题是否还存在呢？答案是，不存在。
      6.前端是个天然按照页面解耦的技术，在多页面架构中，页面的复杂度大约刚好适合一个人的工作量。（所以，我们的结论是，前端根本不需
        要架构设计。当然，我这句话是开玩笑的。）
      7.前端不存在分工问题，但是在多人协同时，仍然要解决质量和效率的问题，这就需要组件化了。除此之外还有前端特有的兼容性问题，也是
        需要从架构的角度去解决的。
      8.对于一些追求极致的团队来说，会挑战“单页面应用”，通过单页面应用来提升用户体验，单页面应用的升级版本是谷歌提出的 PWA，PWA 
        既是业务方案也是技术方案，在技术层面，它近乎苛刻地规定了网页的各方面的体验标准。
      9.前端领域还有一个特有的生态：框架，第一代前端框架（如 jQuery, PrototypeJS）重点解决了兼容问题和 API 的易用性问题，在现
        代浏览器普及之后，这些问题逐渐变得不存在或者不重要，所以第二代前端框架（如 Vue，Angular，React）重点解决了组件化问题。
        选择合适的框架，可以节约架构的成本，还能够享受社区资源。
      10.本节课，我会围绕前端架构的几个核心问题，为你介绍前端架构工作。
      11.首先我们来讲讲组件化。
      12.组件化
        1.组件化讲起来是个非常简单的概念，前端主要的开发工作是 UI 开发，而把 UI 上的各种元素分解成组件，规定组件的标准，实现组件
          运行的环境就是组件化了。
        2.现行的组件化方案，目前有五种主流选择：
          Web Component；
          Vue；
          React；Angular；
          自研。
        3.Web Component 是 W3C 推行的规范，理论上是未来的选项；但是实际上这份标准的状态堪忧，Shadow DOM 的设计比较复杂，一般
          的前端掌握起来都比较困难。
        4.此外，CSS 也比较难以应用，需要依靠 CSS Houdini。目前来说，我还没有看到那个前端团队实际在使用 Web Component 作为组件
          化方案。当然，它的优势也非常明显：不需要任何额外的运行时支持，就能在现代浏览器环境运行，也可以跟 HTML 无缝结合。
        5.Vue 是目前最受欢迎的框架（从 github star 来看），由华人程序员尤小右开发和维护。它有两个主要特点，一个是比较符合原本的 
          JavaScript/CSS/HTML 书写习惯；另一个是它绑定了 MVVM 模式，直接确定了 UI 架构，通过 DSL 的支持，数据交互非常简洁。
        6.React 是 Facebook 推行的新一代 Web 框架。它利用 JSX 模式，把 HTML、CSS 和 JavaScript 都放进了 js 文件中，对于不
          喜欢 CSS 和 HTML 的前端工程师来说，是很理想的。它还可以迁移到 React Native，直接编写简单的客户端应用。
        7.Angular 是 Google 推出的 Web 框架，它是比较标准的 MVVM 模式。Angular 曾经因为大版本兼容性而饱受诟病，目前它的核心
          竞争力是与 TypeScript 结合得较好。
        8.上面是我对几种方案的简单介绍。但是实际上，我们做技术选型时的主要依据是团队的现状，开发移动端还是桌面端、是否跟 Native 
          结合、团队成员的技能分布都是需要考虑的因素，这些框架本身的特点，目前我认为仅仅是一种偏好选项，而不是关键因素。
      13.兼容性和适配性
        1.前端开发的特有问题就是兼容性，到了移动时代，需要面对不同的机型，我们又需要解决适配性问题。
        2.兼容性问题到 2011 年左右都是前端的主旋律，但是在之后，随着现代浏览器的逐渐普及，兼容性问题逐渐减小，所以我们这里就不多
          谈兼容性问题了。
        3.适配问题主要适配的是屏幕的三个要素。
          单位英寸像素数（Pixel Per Inch，PPI）：现实世界的一英寸内像素数，决定了屏幕的显示质量。
          设备像素比率（Device Pixel Ratio，DPR）：物理像素与逻辑像素（px）的对应关系。
          分辨率（Resolution）：屏幕区域的宽高所占像素数。
        4.在当前环境下，分辨率适配可以使用 vw 单位解决，DPR 适配则需要用到 CSS 的 viewport 规则来控制缩放比例解决，而 PPI 主
          要影响的是文字，可以采用 media 规则来适配。
      14.单页应用
        1.前文已经讲过，前端架构的解耦问题不大，因为页面是天然解耦的，但是，大家都知道，浏览器加载 HTML 时是会有白屏过程的，对追
          求极致体验的团队来说，希望能够进一步提升体验，于是就有了“单页应用（SPA）”的概念。
        2.单页应用是把多个页面的内容实现在同一个实际页面内的技术，因为失去了页面的天然解耦，所以就要解决耦合问题。也就是说，我们要
          在一个“物理页面”内，通过架构设计来实现若干个“逻辑页面”。
        3.逻辑页面应该做到独立开发和独立发布，一种思路是，每个逻辑页面一个 js，用一个 SPA 框架加载 js 文件。
        4.从交互的角度，这并不困难，但是，这里还有一个隐性需求：保持前进后退历史。
        5.一般来说，前进后退历史使用 URL 的 Hash 部分来控制，但是 onhashchange 事件并没有提供前进或者后退信息，目前还没有完美
          的解决方案，只能牺牲一部分体验。实现单页应用的逻辑页面发布需要改造发布系统，在工程上，这也是一个比较大的挑战。
      15.扩展前端新边界
        1.除了解决现实问题，我认为前端架构的职责还包括扩展前端的边界，所以前端架构还包含了很多 Native 开发任务：如客户端和前端结
          合的方案 Weex 和 React Native；如前端和图形学结合的方案 GCanvas；如前端的 3D 框架 Three.js，这些都是试图用架构的
          手段赋予前端新的能力的尝试。
        2.这些具体的尝试涉及很多领域知识，我这里就不做详细介绍了，但是如果你成为了一个前端架构师，我希望你也把“拓展前端边界”当做团
          队的核心目标之一。
      16.总结
        1.今天我从宏观的角度介绍了前端架构相关的知识，我重点介绍了“组件化”“适配性”“单页应用”三个前端架构需要解决的核心问题，组件
          化在社区有很多现成的方案，我们需要做的主要工作是框架选型。适配性需要用到 CSS 的几种特性：vw 单位、viewport 规则和 
          media 规则，单页应用重点是逻辑页面解耦、独立开发和发布和保持前进后退历史。
        2.最后留一个思考问题，你所在的团队有前端架构师吗？如果有的话，他的工作职责是什么？
