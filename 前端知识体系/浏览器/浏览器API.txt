let names = Object.getOwnPropertyNames(window)
// JavaScript 中规定的 API
let js = new Set();
let objects = ["BigInt", "BigInt64Array", "BigUint64Array", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "Date", "RegExp", "Promise", "Proxy", "Map", "WeakMap", "Set", "WeakSet", "Function", "Boolean", "String", "Number", "Symbol", "Object", "Error", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Atomics", "JSON", "Math", "Reflect", "escape", "unescape"];
objects.forEach(o => js.add(o));
names = names.filter(e => !js.has(e));
// DOM 中的元素构造器
names = names.filter( e => {
  try { 
    return !(window[e].prototype instanceof Node)
  } catch(err) {
    return true;
  }
}).filter( e => e != "Node")
// Window 对象上的属性
// https://html.spec.whatwg.org/#window
let windowprops = new Set();
objects = ["window", "self", "document", "name", "location", "history", "customElements", "locationbar", "menubar", " personalbar", "scrollbars", "statusbar", "toolbar", "status", "close", "closed", "stop", "focus", " blur", "frames", "length", "top", "opener", "parent", "frameElement", "open", "navigator", "applicationCache", "alert", "confirm", "prompt", "print", "postMessage", "console"];
objects.forEach(o => windowprops.add(o));
names = names.filter(e => !windowprops.has(e));
// 我们还要过滤掉所有的事件，也就是 on 开头的属性
names = names.filter( e => !e.match(/^on/))
// webkit 前缀的私有属性我们也过滤掉
names = names.filter( e => !e.match(/^webkit/))
// HTML 标准中还能找到所有的接口，这些我们也过滤掉
let interfaces = new Set();
objects = ["ApplicationCache", "AudioTrack", "AudioTrackList", "BarProp", "BeforeUnloadEvent", "BroadcastChannel", "CanvasGradient", "CanvasPattern", "CanvasRenderingContext2D", "CloseEvent", "CustomElementRegistry", "DOMStringList", "DOMStringMap", "DataTransfer", "DataTransferItem", "DataTransferItemList", "DedicatedWorkerGlobalScope", "Document", "DragEvent", "ErrorEvent", "EventSource", "External", "FormDataEvent", "HTMLAllCollection", "HashChangeEvent", "History", "ImageBitmap", "ImageBitmapRenderingContext", "ImageData", "Location", "MediaError", "MessageChannel", "MessageEvent", "MessagePort", "MimeType", "MimeTypeArray", "Navigator", "OffscreenCanvas", "OffscreenCanvasRenderingContext2D", "PageTransitionEvent", "Path2D", "Plugin", "PluginArray", "PopStateEvent", "PromiseRejectionEvent", "RadioNodeList", "SharedWorker", "SharedWorkerGlobalScope", "Storage", "StorageEvent", "TextMetrics", "TextTrack", "TextTrackCue", "TextTrackCueList", "TextTrackList", "TimeRanges", "TrackEvent", "ValidityState", "VideoTrack", "VideoTrackList", "WebSocket", "Window", "Worker", "WorkerGlobalScope", "WorkerLocation", "WorkerNavigator"];
objects.forEach(o => interfaces.add(o));
names = names.filter(e => !interfaces.has(e));

// 其它属性
// 首先，我们要把过滤的代码做一下抽象，写成一个函数
function filterOut(names, props) {
  let set = new Set();
  props.forEach(o => set.add(o));
  return names.filter(e => !set.has(e));
}
// ECMAScript 2018 Internationalization API
// http://www.ecma-international.org/ecma-402/5.0/index.html#Title
names = names.filter(e => e != "Intl")
// Streams 标准
// https://streams.spec.whatwg.org/#blqs-class
names = filterOut(names, ["ReadableStream", "ReadableStreamDefaultReader", "ReadableStreamBYOBReader", "ReadableStreamDefaultController", "ReadableByteStreamController", "ReadableStreamBYOBRequest", "WritableStream", "WritableStreamDefaultWriter", "WritableStreamDefaultController", "TransformStream", "TransformStreamDefaultController", "ByteLengthQueuingStrategy", "CountQueuingStrategy"]);
// WebGL
// https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15
names = filterOut(names, ["WebGLContextEvent","WebGLObject", "WebGLBuffer", "WebGLFramebuffer", "WebGLProgram", "WebGLRenderbuffer", "WebGLShader", "WebGLTexture", "WebGLUniformLocation", "WebGLActiveInfo", "WebGLShaderPrecisionFormat", "WebGLRenderingContext", "WebGLVertexArrayObject", "WebGLTransformFeedback", "WebGLSync", "WebGLSampler", "WebGLQuery", "WebGL2RenderingContext"]);
// Web Audio API
// https://www.w3.org/TR/webaudio/
names = filterOut(names, ["AudioContext", "AudioNode", "AnalyserNode", "AudioBuffer", "AudioBufferSourceNode", "AudioDestinationNode", "AudioParam", "AudioListener", "AudioWorklet", "AudioWorkletGlobalScope", "AudioWorkletNode", "AudioWorkletProcessor", "BiquadFilterNode", "ChannelMergerNode", "ChannelSplitterNode", "ConstantSourceNode", "ConvolverNode", "DelayNode", "DynamicsCompressorNode", "GainNode", "IIRFilterNode", "MediaElementAudioSourceNode", "MediaStreamAudioSourceNode", "MediaStreamTrackAudioSourceNode", "MediaStreamAudioDestinationNode", "PannerNode", "PeriodicWave", "OscillatorNode", "StereoPannerNode", "WaveShaperNode", "ScriptProcessorNode", "AudioProcessingEvent"]);
// https://webaudio.github.io/web-audio-api/
names = filterOut(names, ["OfflineAudioContext", "OfflineAudioCompletionEvent", "BaseAudioContext", "AudioScheduledSourceNode"]);
// Encoding 标准
// https://encoding.spec.whatwg.org/#dom-textencoder
names = filterOut(names, ["TextDecoder", "TextEncoder", "TextDecoderStream", "TextEncoderStream"]);
// Web Background Synchronization
// 这个属性比较特殊，它并没有被标准化
// https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface
names = names.filter(e => e != "SyncManager")
// Web Cryptography API
// https://www.w3.org/TR/WebCryptoAPI/
names = filterOut(names, ["CryptoKey", "SubtleCrypto", "Crypto", "crypto"]);
// Media Source Extensions
// https://www.w3.org/TR/media-source/
names = filterOut(names, ["MediaSource", "SourceBuffer", "SourceBufferList"]);
// The Screen Orientation API
// https://www.w3.org/TR/screen-orientation/
names = names.filter(e => e != "ScreenOrientation")

// 自己继续分析
// ECMA 262 标准
// https://tc39.es/ecma262/#sec-globalthis
names = names.filter(e => e != "globalThis")
// WebRTC 标准
// https://w3c.github.io/webrtc-pc/
names = filterOut(names, ["RTCTrackEvent", "RTCStatsReport", "RTCSessionDescription", "RTCRtpTransceiver", "RTCRtpSender", "RTCRtpReceiver", "RTCPeerConnectionIceEvent", "RTCPeerConnectionIceErrorEvent", "RTCPeerConnection", "RTCIceCandidate", "RTCErrorEvent", "RTCError", "RTCDataChannelEvent", "RTCDataChannel", "RTCDTMFToneChangeEvent", "RTCDTMFSender", "RTCCertificate"]);
// MediaStream Image Capture
// https://w3c.github.io/mediacapture-image/
names = filterOut(names, ["PhotoCapabilities", "MediaSettingsRange", "ImageCapture"]);
// Network Information API
// https://wicg.github.io/netinfo/#idl-def-NetworkInformation
names = names.filter(e => e != "NetworkInformation")
// Media Capture and Streams
// https://w3c.github.io/mediacapture-main/
names = filterOut(names, ["OverconstrainedError", "MediaStreamTrackEvent", "MediaStreamTrack", "MediaStreamEvent", "MediaStream", "InputDeviceInfo"]);
// MediaStream Recording
// https://w3c.github.io/mediacapture-record/
names = filterOut(names, ["MediaRecorder", "BlobEvent"]);
// Media Capabilities
// https://w3c.github.io/media-capabilities/#mediacapabilities
names = filterOut(names, ["MediaCapabilities"]);
// Indexed Database API 2.0
// https://www.w3.org/TR/IndexedDB/
names = filterOut(names, ["IDBVersionChangeEvent", "IDBTransaction", "IDBRequest", "IDBOpenDBRequest", "IDBObjectStore", "IDBKeyRange", "IDBIndex", "IDBFactory", "IDBDatabase", "IDBCursorWithValue", "IDBCursor"]);
// Geolocation API
// https://w3c.github.io/geolocation-api/
names = filterOut(names, ["GeolocationPositionError", "GeolocationPosition", "GeolocationCoordinates", "Geolocation"]);
// Gamepad Extensions
// https://w3c.github.io/gamepad/extensions.html
names = filterOut(names, ["GamepadHapticActuator", "GamepadEvent", "Gamepad", "GamepadButton"]);
// DOM - Living Standard — Last Updated 1 April 2020
// https://dom.spec.whatwg.org/#interface-domerror
names = filterOut(names, ["DOMError", "TreeWalker", "StaticRange"]);
// Media Capture from DOM Elements
// https://w3c.github.io/mediacapture-fromelement/#idl-def-CanvasCaptureMediaStream
names = filterOut(names, ["CanvasCaptureMediaStreamTrack"]);
// BeforeInstallPromptEvent
// 该特性是非标准的，请尽量不要在生产环境中使用它！
names = names.filter(e => e != "BeforeInstallPromptEvent")
// Battery Status API
// https://w3c.github.io/battery/
names = filterOut(names, ["BatteryManager"]);
// Document Object Model (DOM) Level 3 XPath Specification
// https://www.w3.org/TR/DOM-Level-3-XPath/xpath.html
names = filterOut(names, ["XPathResult", "XPathExpression", "XPathEvaluator"]);
// XMLHttpRequest
// https://xhr.spec.whatwg.org/
names = filterOut(names, ["XMLHttpRequestEventTarget", "XMLHttpRequest"]);
// Document Object Model (DOM) Level 3 Events Specification
// https://www.w3.org/TR/2014/WD-DOM-Level-3-Events-20140925/
names = filterOut(names, ["WheelEvent", "UIEvent"]);
// Visual Viewport API
// https://wicg.github.io/visual-viewport/#the-visualviewport-interface
names = filterOut(names, ["VisualViewport"]);
// WebVTT: The Web Video Text Tracks Format
// https://w3c.github.io/webvtt/#dom-vttcue-vttcue
names = filterOut(names, ["VTTCue"]);
// URL
// https://url.spec.whatwg.org/
names = filterOut(names, ["URLSearchParams", "URL"]);
// CSS Transitions
// https://drafts.csswg.org/css-transitions/#Events-TransitionEvent
names = filterOut(names, ["TransitionEvent"]);
// Touch Events
// https://www.w3.org/TR/touch-events/
names = filterOut(names, ["TouchList", "TouchEvent", "Touch"]);
// Long Tasks API 1
// https://www.w3.org/TR/longtasks/#sec-TaskAttributionTiming
names = filterOut(names, ["TaskAttributionTiming"]);
// CSS Object Model (CSSOM)
// https://drafts.csswg.org/cssom/
names = filterOut(names, ["StyleSheetList", "StyleSheet"]);
// CSS Typed OM Level 1
// https://drafts.css-houdini.org/css-typed-om-1/#stylepropertymapreadonly
names = filterOut(names, ["StylePropertyMapReadOnly", "StylePropertyMap"]);
// Content Security Policy Level 2
// https://w3c.github.io/webappsec-csp/2/#firing-securitypolicyviolationevent-events
names = filterOut(names, ["SecurityPolicyViolationEvent"]);
// CSSOM View Module
// https://drafts.csswg.org/cssom-view/#the-screen-interface
names = filterOut(names, ["Screen"]);
// Scalable Vector Graphics (SVG) 2
// https://svgwg.org/svg2-draft/types.html
names = filterOut(names, ["SVGUnitTypes", "SVGTransformList", "SVGTransform", "SVGStringList", "SVGRect", "SVGPreserveAspectRatio", "SVGPointList", "SVGPoint", "SVGNumberList", "SVGNumber", "SVGMatrix", "SVGLengthList", "SVGLength", "SVGAnimatedTransformList", "SVGAnimatedString", "SVGAnimatedRect", "SVGAnimatedPreserveAspectRatio", "SVGAnimatedNumberList", "SVGAnimatedNumber", "SVGAnimatedLengthList", "SVGAnimatedLength", "SVGAnimatedInteger", "SVGAnimatedEnumeration", "SVGAnimatedBoolean", "SVGAnimatedAngle", "SVGAngle"]);



// MDN中查找不到的属性
names = filterOut(names, ["MediaEncryptedEvent", "AudioParamMap", "XMLSerializer", "XMLHttpRequestUpload", 
        "TextEvent", "Selection"]);





// Performance API
names = filterOut(names, ["PerformanceTiming", "PerformanceServerTiming", "PerformanceResourceTiming", "PerformancePaintTiming", "PerformanceObserverEntryList", "PerformanceObserver", "PerformanceNavigationTiming", "PerformanceNavigation", "PerformanceMeasure", "PerformanceMark", "PerformanceLongTaskTiming", "PerformanceEventTiming", "PerformanceEntry", "PerformanceElementTiming", "Performance"]);



