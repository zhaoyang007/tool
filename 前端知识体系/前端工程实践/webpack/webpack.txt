html-webpack-plugin
	1.开发环境中的作用：启动了webpack-dev-server后，它会在项目根目录中生成一个隐形的index.html，如果output中配置了publicPath，
		会生成在项目跟目录的publicPath中。webpack-dev-server会自动在根目录下寻找这个index.html，但是根目录里根本没有index.html。
		所以访问页面出现的是项目目录结构，在webpack-dev-server中配置historyApiFallback就可以直接访问到index.html。
	2.生产环境打包中的作用：生产环境打包，会生成一个index.html来包含我们打包好的js和css文件。
webpack.DefinePlugin
	使用vue,react这些框架时，一定要用的plugin，webpack.DefinePlugin。
	new webpack.DefinePlugin({
		'process.env': {
			NODE_ENV: isDev ? '"development"' : '"production"'
		}
	})  
	1.定义了这个，就可以在业务js代码中引用到process.env.NODE_ENV
	2.webpack打包时，会根据配置文件上定义的环境变量去选择不同的vue或react版本打包。
extract-text-webpack-plugin
	把非js的代码，单独打包成一个静态资源文件。比如把css文件拎出来打包成一个单独的文件，因为这些文件可能是要做浏览器缓存。
	1.new ExtractPlugin('styles.[contentHash:8].css')
	2.使用ExtractPlugin的loader
		ExtractPlugin.extract({
			fallback: 'vue-style-loader',
			use: [
				'css-loader',
				{
					loader: 'postcss-loader',
					options: {
						sourceMap: true // 使用stylus生成好的sourceMap来用，编译效率更快
					}
				},
				'stylus-loader'
			]
		})
vue-loader
	1.vue-loader配置项：vue-loader.config.js
		module.exports = (isDev) => {
			return {
				preserveWhitepace: true,
				extractCSS: !isDev, // 将.vue文件里的css也通过extract-text-webpack-plugin这个插件单独打包到我们的那个大css文件中去,
														// 注：对于异步加载的.vue文件，这个作用就失效了。
				cssModules: {}, // 实现css module的功能
			}
		}
eslint的配置
	1.安装包
		1.eslint
		2.eslint-loader
		3.eslint-config-standard
			4.eslint-plugin-standard
			5.eslint-plugin-promise
			6.eslint-plugin-import
			7.eslint-plugin-node
		8.eslint-plugin-html
		9.babel-eslint
		说明：
			1. 3是一个比较好且流行的eslint书写规范，我们自己就不定义这个规范了。
			2. 4567是3官方推荐我们安装的，因为它的校验规则要依赖于这些plugin进行验证
			3. 因为.vue文件类似于html的格式，它不是我们标准的javascript文件。eslint没法直接识别vue文件里面的javascript代码，所以8
			   能够让eslint识别一个文件里script标签下面的javascript。所以就用这个工具去解析我们的.vue文件就可以了。官方的推荐也是这
				 么去做。
	2.配置文件.eslintrc
		{
			"extends": "standard",
			"plugins": [
				"html"
			],
			"parser": "babel-eslint"
		}
		每项配置的作用
			1."extends": "standard" // 使用哪个eslint的规范的。
			2."plugins": ["html"] 	// eslint检查.vue文件不报错。
			3.代码都是要经过babel去处理过的。会有一些语法对eslint不是特别支持。可能就会出现一些问题。所以一般使用webpack和babel开发的
				项目都会指定它的parser是babel-eslint。
	3.检查代码是否符合规则
	  "lint": "eslint --ext .js --ext .jsx --ext .vue client/"
	4.修复代码规则
	  "lint-fix": "eslint --fix --ext .js --ext .jsx --ext .vue client/"
	5.eslint-loader
		1.开发的过程中，每次修改代码，自动进行eslint检查。
		2.配置eslint-loader
			{
				test: /\.(vue|js|jsx)$/,
				loader: 'eslint-loader',
				exclude: /node_modules/,
				enforce: 'pre'
			}
precommit
	git进行代码提交的时候，可以使用precommit的git钩子。在调用git commit的时候，先运行precommit命令。
	"precommit": "npm run lint-fix"，自动帮我们去检测代码，如果代码不通过eslint。没有办法提交代码。
	安装husky：它自动会在本地项目的.git目录下面去生成一个hook，它会读取package.json里的一些内容，比如说我们的precommit。
	注意：安装husky之前项目要git init初始化好，如果连git目录都没有，它安装的过程当中，生成的git hook就没法放进去。
